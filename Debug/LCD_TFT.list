
LCD_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cfc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001714  08006ec0  08006ec0  00007ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  080085d4  080085d4  000095d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000095dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085e0  080085e0  000095e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080085e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000018  080085fc  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080085fc  0000a0f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe36  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f29  00000000  00000000  00019e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021ebd  00000000  00000000  0001cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011726  00000000  00000000  0003eb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d1a44  00000000  00000000  0005027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00121cbf  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000bb7  00000000  00000000  00121d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004010  00000000  00000000  001228bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001268cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006ea8 	.word	0x08006ea8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08006ea8 	.word	0x08006ea8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f004 fd91 	bl	8005020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f9b3 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 fa99 	bl	8000a38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 fa6d 	bl	80009e4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800050a:	f000 fa1b 	bl	8000944 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  tft_gpio_init();
 800050e:	f004 fceb 	bl	8004ee8 <tft_gpio_init>
  HAL_TIM_Base_Start(&htim1);
 8000512:	48d1      	ldr	r0, [pc, #836]	@ (8000858 <main+0x364>)
 8000514:	f005 fee6 	bl	80062e4 <HAL_TIM_Base_Start>
  ID = tft_readID();
 8000518:	f002 ff90 	bl	800343c <tft_readID>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4bce      	ldr	r3, [pc, #824]	@ (800085c <main+0x368>)
 8000522:	801a      	strh	r2, [r3, #0]
  HAL_Delay(100);
 8000524:	2064      	movs	r0, #100	@ 0x64
 8000526:	f004 fded 	bl	8005104 <HAL_Delay>
  tft_init (ID);
 800052a:	4bcc      	ldr	r3, [pc, #816]	@ (800085c <main+0x368>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fbfc 	bl	8002d2c <tft_init>
  tft_setRotation(3);
 8000534:	2003      	movs	r0, #3
 8000536:	f003 f8c1 	bl	80036bc <tft_setRotation>
  tft_fillScreen(BLACK);
 800053a:	2000      	movs	r0, #0
 800053c:	f004 fad8 	bl	8004af0 <tft_fillScreen>
  //tft_fillTriangle(160,120, 110, 145, 110, 95, BLACK );
  //tft_fillCircle(145, 95, 5, BLACK);
 // tft_fillCircle(130, 120, 8, BLUE);
 // tft_fillCircle(100, 120, 8, BLUE);
  //tft_drawPixel(160, 120, CYAN);
  tft_fillRect(0, 180, 320, 5, BLUE);
 8000540:	231f      	movs	r3, #31
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2305      	movs	r3, #5
 8000546:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800054a:	21b4      	movs	r1, #180	@ 0xb4
 800054c:	2000      	movs	r0, #0
 800054e:	f003 ff4b 	bl	80043e8 <tft_fillRect>
  tft_fillRect(0,  60, 320, 5, BLUE);
 8000552:	231f      	movs	r3, #31
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2305      	movs	r3, #5
 8000558:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800055c:	213c      	movs	r1, #60	@ 0x3c
 800055e:	2000      	movs	r0, #0
 8000560:	f003 ff42 	bl	80043e8 <tft_fillRect>
  //tft_fillCircle(230, 120, 40,BLACK);
 // tft_fillCircle(50, 120, 40,YELLOW);
  //tft_fillCircle(65, 95, 5, BLACK);
 // tft_fillTriangle(50,120, 95, 145, 195, 95, BLACK );

  tft_fillCircle(50, 120, 40,YELLOW);
 8000564:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000568:	2228      	movs	r2, #40	@ 0x28
 800056a:	2178      	movs	r1, #120	@ 0x78
 800056c:	2032      	movs	r0, #50	@ 0x32
 800056e:	f003 fe3c 	bl	80041ea <tft_fillCircle>
  tft_fillCircle(65, 95, 5, BLACK);
 8000572:	2300      	movs	r3, #0
 8000574:	2205      	movs	r2, #5
 8000576:	215f      	movs	r1, #95	@ 0x5f
 8000578:	2041      	movs	r0, #65	@ 0x41
 800057a:	f003 fe36 	bl	80041ea <tft_fillCircle>
  tft_fillTriangle(50,120, 110, 145, 110, 95, BLACK );
 800057e:	2300      	movs	r3, #0
 8000580:	9302      	str	r3, [sp, #8]
 8000582:	235f      	movs	r3, #95	@ 0x5f
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	236e      	movs	r3, #110	@ 0x6e
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2391      	movs	r3, #145	@ 0x91
 800058c:	226e      	movs	r2, #110	@ 0x6e
 800058e:	2178      	movs	r1, #120	@ 0x78
 8000590:	2032      	movs	r0, #50	@ 0x32
 8000592:	f004 f94d 	bl	8004830 <tft_fillTriangle>

  tft_fillCircle(240, 120, 8, YELLOW);
 8000596:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800059a:	2208      	movs	r2, #8
 800059c:	2178      	movs	r1, #120	@ 0x78
 800059e:	20f0      	movs	r0, #240	@ 0xf0
 80005a0:	f003 fe23 	bl	80041ea <tft_fillCircle>
  tft_fillCircle(200, 120, 8, YELLOW);
 80005a4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80005a8:	2208      	movs	r2, #8
 80005aa:	2178      	movs	r1, #120	@ 0x78
 80005ac:	20c8      	movs	r0, #200	@ 0xc8
 80005ae:	f003 fe1c 	bl	80041ea <tft_fillCircle>
  tft_fillCircle(160, 120, 8, YELLOW);
 80005b2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80005b6:	2208      	movs	r2, #8
 80005b8:	2178      	movs	r1, #120	@ 0x78
 80005ba:	20a0      	movs	r0, #160	@ 0xa0
 80005bc:	f003 fe15 	bl	80041ea <tft_fillCircle>
  tft_fillCircle(120, 120, 8, YELLOW);
 80005c0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80005c4:	2208      	movs	r2, #8
 80005c6:	2178      	movs	r1, #120	@ 0x78
 80005c8:	2078      	movs	r0, #120	@ 0x78
 80005ca:	f003 fe0e 	bl	80041ea <tft_fillCircle>
  tft_fillCircle(80,  120, 8, YELLOW);
 80005ce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80005d2:	2208      	movs	r2, #8
 80005d4:	2178      	movs	r1, #120	@ 0x78
 80005d6:	2050      	movs	r0, #80	@ 0x50
 80005d8:	f003 fe07 	bl	80041ea <tft_fillCircle>
  tft_fillCircle(40,  120, 8, YELLOW);
 80005dc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80005e0:	2208      	movs	r2, #8
 80005e2:	2178      	movs	r1, #120	@ 0x78
 80005e4:	2028      	movs	r0, #40	@ 0x28
 80005e6:	f003 fe00 	bl	80041ea <tft_fillCircle>


  tft_printnewtstr(40, BLUE, &mono18x7bold, 1, (uint8_t*)"PAC-MAN");
 80005ea:	4b9d      	ldr	r3, [pc, #628]	@ (8000860 <main+0x36c>)
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4a9c      	ldr	r2, [pc, #624]	@ (8000864 <main+0x370>)
 80005f2:	211f      	movs	r1, #31
 80005f4:	2028      	movs	r0, #40	@ 0x28
 80005f6:	f004 fc2b 	bl	8004e50 <tft_printnewtstr>

  HAL_Delay(400);
 80005fa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80005fe:	f004 fd81 	bl	8005104 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  tft_fillCircle(105, 120, 40,BLACK);
 8000602:	2300      	movs	r3, #0
 8000604:	2228      	movs	r2, #40	@ 0x28
 8000606:	2178      	movs	r1, #120	@ 0x78
 8000608:	2069      	movs	r0, #105	@ 0x69
 800060a:	f003 fdee 	bl	80041ea <tft_fillCircle>

	  tft_fillCircle(50, 120, 40,YELLOW);
 800060e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000612:	2228      	movs	r2, #40	@ 0x28
 8000614:	2178      	movs	r1, #120	@ 0x78
 8000616:	2032      	movs	r0, #50	@ 0x32
 8000618:	f003 fde7 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(65, 95, 5, BLACK);
 800061c:	2300      	movs	r3, #0
 800061e:	2205      	movs	r2, #5
 8000620:	215f      	movs	r1, #95	@ 0x5f
 8000622:	2041      	movs	r0, #65	@ 0x41
 8000624:	f003 fde1 	bl	80041ea <tft_fillCircle>
	  tft_fillTriangle(50,120, 110, 145, 110, 95, BLACK );
 8000628:	2300      	movs	r3, #0
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	235f      	movs	r3, #95	@ 0x5f
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	236e      	movs	r3, #110	@ 0x6e
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2391      	movs	r3, #145	@ 0x91
 8000636:	226e      	movs	r2, #110	@ 0x6e
 8000638:	2178      	movs	r1, #120	@ 0x78
 800063a:	2032      	movs	r0, #50	@ 0x32
 800063c:	f004 f8f8 	bl	8004830 <tft_fillTriangle>

	  tft_fillCircle(240, 120, 8, YELLOW);
 8000640:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000644:	2208      	movs	r2, #8
 8000646:	2178      	movs	r1, #120	@ 0x78
 8000648:	20f0      	movs	r0, #240	@ 0xf0
 800064a:	f003 fdce 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(200, 120, 8, YELLOW);
 800064e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000652:	2208      	movs	r2, #8
 8000654:	2178      	movs	r1, #120	@ 0x78
 8000656:	20c8      	movs	r0, #200	@ 0xc8
 8000658:	f003 fdc7 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(160, 120, 8, YELLOW);
 800065c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000660:	2208      	movs	r2, #8
 8000662:	2178      	movs	r1, #120	@ 0x78
 8000664:	20a0      	movs	r0, #160	@ 0xa0
 8000666:	f003 fdc0 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(120, 120, 8, YELLOW);
 800066a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800066e:	2208      	movs	r2, #8
 8000670:	2178      	movs	r1, #120	@ 0x78
 8000672:	2078      	movs	r0, #120	@ 0x78
 8000674:	f003 fdb9 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(80,  120, 8, YELLOW);
 8000678:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800067c:	2208      	movs	r2, #8
 800067e:	2178      	movs	r1, #120	@ 0x78
 8000680:	2050      	movs	r0, #80	@ 0x50
 8000682:	f003 fdb2 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(40,  120, 8, YELLOW);
 8000686:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800068a:	2208      	movs	r2, #8
 800068c:	2178      	movs	r1, #120	@ 0x78
 800068e:	2028      	movs	r0, #40	@ 0x28
 8000690:	f003 fdab 	bl	80041ea <tft_fillCircle>

	  HAL_Delay(400);
 8000694:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000698:	f004 fd34 	bl	8005104 <HAL_Delay>

	  tft_fillCircle(50, 120, 40,YELLOW);
 800069c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80006a0:	2228      	movs	r2, #40	@ 0x28
 80006a2:	2178      	movs	r1, #120	@ 0x78
 80006a4:	2032      	movs	r0, #50	@ 0x32
 80006a6:	f003 fda0 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(65, 95, 5, BLACK);
 80006aa:	2300      	movs	r3, #0
 80006ac:	2205      	movs	r2, #5
 80006ae:	215f      	movs	r1, #95	@ 0x5f
 80006b0:	2041      	movs	r0, #65	@ 0x41
 80006b2:	f003 fd9a 	bl	80041ea <tft_fillCircle>

	  HAL_Delay(400);
 80006b6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80006ba:	f004 fd23 	bl	8005104 <HAL_Delay>

	  tft_fillCircle(50, 120, 40,BLACK);
 80006be:	2300      	movs	r3, #0
 80006c0:	2228      	movs	r2, #40	@ 0x28
 80006c2:	2178      	movs	r1, #120	@ 0x78
 80006c4:	2032      	movs	r0, #50	@ 0x32
 80006c6:	f003 fd90 	bl	80041ea <tft_fillCircle>

	  tft_fillCircle(65, 120, 40,YELLOW);
 80006ca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80006ce:	2228      	movs	r2, #40	@ 0x28
 80006d0:	2178      	movs	r1, #120	@ 0x78
 80006d2:	2041      	movs	r0, #65	@ 0x41
 80006d4:	f003 fd89 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(80, 95, 5, BLACK);
 80006d8:	2300      	movs	r3, #0
 80006da:	2205      	movs	r2, #5
 80006dc:	215f      	movs	r1, #95	@ 0x5f
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f003 fd83 	bl	80041ea <tft_fillCircle>
	  tft_fillTriangle(65,120, 110, 145, 110, 95, BLACK );
 80006e4:	2300      	movs	r3, #0
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	235f      	movs	r3, #95	@ 0x5f
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	236e      	movs	r3, #110	@ 0x6e
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2391      	movs	r3, #145	@ 0x91
 80006f2:	226e      	movs	r2, #110	@ 0x6e
 80006f4:	2178      	movs	r1, #120	@ 0x78
 80006f6:	2041      	movs	r0, #65	@ 0x41
 80006f8:	f004 f89a 	bl	8004830 <tft_fillTriangle>

	  HAL_Delay(400);
 80006fc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000700:	f004 fd00 	bl	8005104 <HAL_Delay>

	  tft_fillCircle(65, 120, 40,YELLOW);
 8000704:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000708:	2228      	movs	r2, #40	@ 0x28
 800070a:	2178      	movs	r1, #120	@ 0x78
 800070c:	2041      	movs	r0, #65	@ 0x41
 800070e:	f003 fd6c 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(80, 95, 5, BLACK);
 8000712:	2300      	movs	r3, #0
 8000714:	2205      	movs	r2, #5
 8000716:	215f      	movs	r1, #95	@ 0x5f
 8000718:	2050      	movs	r0, #80	@ 0x50
 800071a:	f003 fd66 	bl	80041ea <tft_fillCircle>

	  HAL_Delay(400);
 800071e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000722:	f004 fcef 	bl	8005104 <HAL_Delay>

	  tft_fillCircle(65, 120, 40,BLACK);
 8000726:	2300      	movs	r3, #0
 8000728:	2228      	movs	r2, #40	@ 0x28
 800072a:	2178      	movs	r1, #120	@ 0x78
 800072c:	2041      	movs	r0, #65	@ 0x41
 800072e:	f003 fd5c 	bl	80041ea <tft_fillCircle>

	  tft_fillCircle(90, 120, 40,YELLOW);
 8000732:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000736:	2228      	movs	r2, #40	@ 0x28
 8000738:	2178      	movs	r1, #120	@ 0x78
 800073a:	205a      	movs	r0, #90	@ 0x5a
 800073c:	f003 fd55 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(105, 95, 5, BLACK);
 8000740:	2300      	movs	r3, #0
 8000742:	2205      	movs	r2, #5
 8000744:	215f      	movs	r1, #95	@ 0x5f
 8000746:	2069      	movs	r0, #105	@ 0x69
 8000748:	f003 fd4f 	bl	80041ea <tft_fillCircle>
	  tft_fillTriangle(90,120, 150, 145, 150, 95, BLACK );
 800074c:	2300      	movs	r3, #0
 800074e:	9302      	str	r3, [sp, #8]
 8000750:	235f      	movs	r3, #95	@ 0x5f
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	2396      	movs	r3, #150	@ 0x96
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2391      	movs	r3, #145	@ 0x91
 800075a:	2296      	movs	r2, #150	@ 0x96
 800075c:	2178      	movs	r1, #120	@ 0x78
 800075e:	205a      	movs	r0, #90	@ 0x5a
 8000760:	f004 f866 	bl	8004830 <tft_fillTriangle>

	  tft_fillCircle(240, 120, 8, YELLOW);
 8000764:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000768:	2208      	movs	r2, #8
 800076a:	2178      	movs	r1, #120	@ 0x78
 800076c:	20f0      	movs	r0, #240	@ 0xf0
 800076e:	f003 fd3c 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(200, 120, 8, YELLOW);
 8000772:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000776:	2208      	movs	r2, #8
 8000778:	2178      	movs	r1, #120	@ 0x78
 800077a:	20c8      	movs	r0, #200	@ 0xc8
 800077c:	f003 fd35 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(160, 120, 8, YELLOW);
 8000780:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000784:	2208      	movs	r2, #8
 8000786:	2178      	movs	r1, #120	@ 0x78
 8000788:	20a0      	movs	r0, #160	@ 0xa0
 800078a:	f003 fd2e 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(120, 120, 8, YELLOW);
 800078e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000792:	2208      	movs	r2, #8
 8000794:	2178      	movs	r1, #120	@ 0x78
 8000796:	2078      	movs	r0, #120	@ 0x78
 8000798:	f003 fd27 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(80,  120, 8, YELLOW);
 800079c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007a0:	2208      	movs	r2, #8
 80007a2:	2178      	movs	r1, #120	@ 0x78
 80007a4:	2050      	movs	r0, #80	@ 0x50
 80007a6:	f003 fd20 	bl	80041ea <tft_fillCircle>

	  HAL_Delay(400);
 80007aa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007ae:	f004 fca9 	bl	8005104 <HAL_Delay>

	  tft_fillCircle(90, 120, 40,YELLOW);
 80007b2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007b6:	2228      	movs	r2, #40	@ 0x28
 80007b8:	2178      	movs	r1, #120	@ 0x78
 80007ba:	205a      	movs	r0, #90	@ 0x5a
 80007bc:	f003 fd15 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(105, 95, 5, BLACK);
 80007c0:	2300      	movs	r3, #0
 80007c2:	2205      	movs	r2, #5
 80007c4:	215f      	movs	r1, #95	@ 0x5f
 80007c6:	2069      	movs	r0, #105	@ 0x69
 80007c8:	f003 fd0f 	bl	80041ea <tft_fillCircle>

	  tft_fillCircle(240, 120, 8, YELLOW);
 80007cc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007d0:	2208      	movs	r2, #8
 80007d2:	2178      	movs	r1, #120	@ 0x78
 80007d4:	20f0      	movs	r0, #240	@ 0xf0
 80007d6:	f003 fd08 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(200, 120, 8, YELLOW);
 80007da:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007de:	2208      	movs	r2, #8
 80007e0:	2178      	movs	r1, #120	@ 0x78
 80007e2:	20c8      	movs	r0, #200	@ 0xc8
 80007e4:	f003 fd01 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(160, 120, 8, YELLOW);
 80007e8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007ec:	2208      	movs	r2, #8
 80007ee:	2178      	movs	r1, #120	@ 0x78
 80007f0:	20a0      	movs	r0, #160	@ 0xa0
 80007f2:	f003 fcfa 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(120, 120, 8, YELLOW);
 80007f6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80007fa:	2208      	movs	r2, #8
 80007fc:	2178      	movs	r1, #120	@ 0x78
 80007fe:	2078      	movs	r0, #120	@ 0x78
 8000800:	f003 fcf3 	bl	80041ea <tft_fillCircle>

	  HAL_Delay(400);
 8000804:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000808:	f004 fc7c 	bl	8005104 <HAL_Delay>

	  tft_fillCircle(90, 120, 40,BLACK);
 800080c:	2300      	movs	r3, #0
 800080e:	2228      	movs	r2, #40	@ 0x28
 8000810:	2178      	movs	r1, #120	@ 0x78
 8000812:	205a      	movs	r0, #90	@ 0x5a
 8000814:	f003 fce9 	bl	80041ea <tft_fillCircle>

	  tft_fillCircle(105, 120, 40,YELLOW);
 8000818:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800081c:	2228      	movs	r2, #40	@ 0x28
 800081e:	2178      	movs	r1, #120	@ 0x78
 8000820:	2069      	movs	r0, #105	@ 0x69
 8000822:	f003 fce2 	bl	80041ea <tft_fillCircle>
	  tft_fillCircle(120, 95, 5, BLACK);
 8000826:	2300      	movs	r3, #0
 8000828:	2205      	movs	r2, #5
 800082a:	215f      	movs	r1, #95	@ 0x5f
 800082c:	2078      	movs	r0, #120	@ 0x78
 800082e:	f003 fcdc 	bl	80041ea <tft_fillCircle>
	  tft_fillTriangle(90,120, 150, 145, 150, 95, BLACK );
 8000832:	2300      	movs	r3, #0
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	235f      	movs	r3, #95	@ 0x5f
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	2396      	movs	r3, #150	@ 0x96
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2391      	movs	r3, #145	@ 0x91
 8000840:	2296      	movs	r2, #150	@ 0x96
 8000842:	2178      	movs	r1, #120	@ 0x78
 8000844:	205a      	movs	r0, #90	@ 0x5a
 8000846:	f003 fff3 	bl	8004830 <tft_fillTriangle>

	  HAL_Delay(400);
 800084a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800084e:	f004 fc59 	bl	8005104 <HAL_Delay>
	  tft_fillCircle(105, 120, 40,BLACK);
 8000852:	bf00      	nop
 8000854:	e6d5      	b.n	8000602 <main+0x10e>
 8000856:	bf00      	nop
 8000858:	20000038 	.word	0x20000038
 800085c:	200000c8 	.word	0x200000c8
 8000860:	08006ec0 	.word	0x08006ec0
 8000864:	080080ac 	.word	0x080080ac

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2234      	movs	r2, #52	@ 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f006 faea 	bl	8006e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <SystemClock_Config+0xd4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a29      	ldr	r2, [pc, #164]	@ (800093c <SystemClock_Config+0xd4>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <SystemClock_Config+0xd4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <SystemClock_Config+0xd8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b4:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <SystemClock_Config+0xd8>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <SystemClock_Config+0xd8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008dc:	2310      	movs	r3, #16
 80008de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fa06 	bl	8005d08 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000902:	f000 f933 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	2102      	movs	r1, #2
 8000922:	4618      	mov	r0, r3
 8000924:	f004 fea6 	bl	8005674 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800092e:	f000 f91d 	bl	8000b6c <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	@ 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000962:	4a1f      	ldr	r2, [pc, #124]	@ (80009e0 <MX_TIM1_Init+0x9c>)
 8000964:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000968:	2253      	movs	r2, #83	@ 0x53
 800096a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_TIM1_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000974:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000978:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_TIM1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800098c:	4813      	ldr	r0, [pc, #76]	@ (80009dc <MX_TIM1_Init+0x98>)
 800098e:	f005 fc59 	bl	8006244 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f8e8 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_TIM1_Init+0x98>)
 80009aa:	f005 fd03 	bl	80063b4 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009b4:	f000 f8da 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_TIM1_Init+0x98>)
 80009c6:	f005 ff03 	bl	80067d0 <HAL_TIMEx_MasterConfigSynchronization>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009d0:	f000 f8cc 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000038 	.word	0x20000038
 80009e0:	40010000 	.word	0x40010000

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <MX_USART2_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f005 ff54 	bl	80068c8 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f8a1 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000080 	.word	0x20000080
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b42      	ldr	r3, [pc, #264]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a41      	ldr	r2, [pc, #260]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a3a      	ldr	r2, [pc, #232]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b38      	ldr	r3, [pc, #224]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b34      	ldr	r3, [pc, #208]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a33      	ldr	r2, [pc, #204]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2182      	movs	r1, #130	@ 0x82
 8000ac2:	4827      	ldr	r0, [pc, #156]	@ (8000b60 <MX_GPIO_Init+0x128>)
 8000ac4:	f004 fdbc 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f240 7133 	movw	r1, #1843	@ 0x733
 8000ace:	4825      	ldr	r0, [pc, #148]	@ (8000b64 <MX_GPIO_Init+0x12c>)
 8000ad0:	f004 fdb6 	bl	8005640 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f240 4139 	movw	r1, #1081	@ 0x439
 8000ada:	4823      	ldr	r0, [pc, #140]	@ (8000b68 <MX_GPIO_Init+0x130>)
 8000adc:	f004 fdb0 	bl	8005640 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	481a      	ldr	r0, [pc, #104]	@ (8000b60 <MX_GPIO_Init+0x128>)
 8000af8:	f004 fc0e 	bl	8005318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000afc:	2382      	movs	r3, #130	@ 0x82
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <MX_GPIO_Init+0x128>)
 8000b14:	f004 fc00 	bl	8005318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000b18:	f240 7333 	movw	r3, #1843	@ 0x733
 8000b1c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <MX_GPIO_Init+0x12c>)
 8000b32:	f004 fbf1 	bl	8005318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8000b36:	f240 4339 	movw	r3, #1081	@ 0x439
 8000b3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <MX_GPIO_Init+0x130>)
 8000b50:	f004 fbe2 	bl	8005318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	@ 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020400 	.word	0x40020400

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f004 fb7a 	bl	80052b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c04 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10d      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_TIM_Base_MspInit+0x40>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <HAL_TIM_Base_MspInit+0x40>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <HAL_TIM_Base_MspInit+0x40>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40010000 	.word	0x40010000
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a19      	ldr	r2, [pc, #100]	@ (8000c90 <HAL_UART_MspInit+0x84>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12b      	bne.n	8000c86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a17      	ldr	r2, [pc, #92]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c66:	230c      	movs	r3, #12
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c82:	f004 fb49 	bl	8005318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f004 f9e7 	bl	80050c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	@ (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <PIN_LOW>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4619      	mov	r1, r3
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f004 fc84 	bl	8005640 <HAL_GPIO_WritePin>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <PIN_HIGH>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4619      	mov	r1, r3
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f004 fc74 	bl	8005640 <HAL_GPIO_WritePin>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <PIN_INPUT>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f004 faca 	bl	8005318 <HAL_GPIO_Init>
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <PIN_OUTPUT>:
 *
 * @param GPIOx port
 * @param GPIO_Pin pino
 */
void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f004 fab2 	bl	8005318 <HAL_GPIO_Init>
}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <width>:
/* Variáveis globais *********************************************************/
uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <width+0x14>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <height>:

uint16_t height(void)
{ return _height; }
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <height+0x14>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000006 	.word	0x20000006

08000dec <color565_to_555>:

static void delay (uint32_t time);

/* Funções privadas **********************************************************/
static uint16_t color565_to_555(uint16_t color)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
	return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	b29b      	uxth	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <color555_to_565>:

static uint16_t color555_to_565(uint16_t color)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
	return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	115b      	asrs	r3, r3, #5
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	105b      	asrs	r3, r3, #1
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	b29b      	uxth	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <color565_to_r>:

static uint8_t color565_to_r(uint16_t color)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	80fb      	strh	r3, [r7, #6]
	return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	121b      	asrs	r3, r3, #8
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f023 0307 	bic.w	r3, r3, #7
 8000e82:	b2db      	uxtb	r3, r3
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <color565_to_g>:

static uint8_t color565_to_g(uint16_t color)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
	return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	10db      	asrs	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f023 0303 	bic.w	r3, r3, #3
 8000ea4:	b2db      	uxtb	r3, r3
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <color565_to_b>:

static uint8_t color565_to_b(uint16_t color)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	80fb      	strh	r3, [r7, #6]
	return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	b2db      	uxtb	r3, r3
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <pushCommand>:

static void pushCommand(uint16_t cmd, uint8_t * block, int8_t N)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	6039      	str	r1, [r7, #0]
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	4613      	mov	r3, r2
 8000edc:	717b      	strb	r3, [r7, #5]
	WriteCmdParamN(cmd, N, block);
 8000ede:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fab6 	bl	8001458 <WriteCmdParamN>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <setReadDir>:

static void setReadDir (void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000ef8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efc:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <setReadDir+0x50>)
 8000efe:	f7ff ff2f 	bl	8000d60 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000f02:	2180      	movs	r1, #128	@ 0x80
 8000f04:	4810      	ldr	r0, [pc, #64]	@ (8000f48 <setReadDir+0x54>)
 8000f06:	f7ff ff2b 	bl	8000d60 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000f0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <setReadDir+0x50>)
 8000f10:	f7ff ff26 	bl	8000d60 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000f14:	2108      	movs	r1, #8
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <setReadDir+0x58>)
 8000f18:	f7ff ff22 	bl	8000d60 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <setReadDir+0x58>)
 8000f20:	f7ff ff1e 	bl	8000d60 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000f24:	2110      	movs	r1, #16
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <setReadDir+0x58>)
 8000f28:	f7ff ff1a 	bl	8000d60 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f30:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <setReadDir+0x58>)
 8000f32:	f7ff ff15 	bl	8000d60 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3a:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <setReadDir+0x50>)
 8000f3c:	f7ff ff10 	bl	8000d60 <PIN_INPUT>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020400 	.word	0x40020400

08000f50 <setWriteDir>:

static void setWriteDir (void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000f54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f58:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <setWriteDir+0x50>)
 8000f5a:	f7ff ff17 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000f5e:	2180      	movs	r1, #128	@ 0x80
 8000f60:	4810      	ldr	r0, [pc, #64]	@ (8000fa4 <setWriteDir+0x54>)
 8000f62:	f7ff ff13 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000f66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <setWriteDir+0x50>)
 8000f6c:	f7ff ff0e 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000f70:	2108      	movs	r1, #8
 8000f72:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <setWriteDir+0x58>)
 8000f74:	f7ff ff0a 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000f78:	2120      	movs	r1, #32
 8000f7a:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <setWriteDir+0x58>)
 8000f7c:	f7ff ff06 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000f80:	2110      	movs	r1, #16
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <setWriteDir+0x58>)
 8000f84:	f7ff ff02 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000f88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8c:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <setWriteDir+0x58>)
 8000f8e:	f7ff fefd 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000f92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f96:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <setWriteDir+0x50>)
 8000f98:	f7ff fef8 	bl	8000d8c <PIN_OUTPUT>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020400 	.word	0x40020400

08000fac <write24>:
		}
	CS_IDLE;
}

static void write24(uint16_t color)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	uint8_t r = color565_to_r(color);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff58 	bl	8000e6e <color565_to_r>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
	uint8_t g = color565_to_g(color);
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff63 	bl	8000e90 <color565_to_g>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73bb      	strb	r3, [r7, #14]
	uint8_t b = color565_to_b(color);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff6e 	bl	8000eb2 <color565_to_b>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	737b      	strb	r3, [r7, #13]
	write8(r);
 8000fda:	4b71      	ldr	r3, [pc, #452]	@ (80011a0 <write24+0x1f4>)
 8000fdc:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8000fe0:	619a      	str	r2, [r3, #24]
 8000fe2:	4b70      	ldr	r3, [pc, #448]	@ (80011a4 <write24+0x1f8>)
 8000fe4:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	4b6f      	ldr	r3, [pc, #444]	@ (80011a8 <write24+0x1fc>)
 8000fec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001002:	431a      	orrs	r2, r3
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	025b      	lsls	r3, r3, #9
 8001008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800100c:	431a      	orrs	r2, r3
 800100e:	4b64      	ldr	r3, [pc, #400]	@ (80011a0 <write24+0x1f4>)
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	105b      	asrs	r3, r3, #1
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	431a      	orrs	r2, r3
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	431a      	orrs	r2, r3
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	431a      	orrs	r2, r3
 8001036:	4b5b      	ldr	r3, [pc, #364]	@ (80011a4 <write24+0x1f8>)
 8001038:	619a      	str	r2, [r3, #24]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	019b      	lsls	r3, r3, #6
 800103e:	4a5a      	ldr	r2, [pc, #360]	@ (80011a8 <write24+0x1fc>)
 8001040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	2102      	movs	r1, #2
 8001048:	4855      	ldr	r0, [pc, #340]	@ (80011a0 <write24+0x1f4>)
 800104a:	f7ff fe69 	bl	8000d20 <PIN_LOW>
 800104e:	2102      	movs	r1, #2
 8001050:	4853      	ldr	r0, [pc, #332]	@ (80011a0 <write24+0x1f4>)
 8001052:	f7ff fe65 	bl	8000d20 <PIN_LOW>
 8001056:	2102      	movs	r1, #2
 8001058:	4851      	ldr	r0, [pc, #324]	@ (80011a0 <write24+0x1f4>)
 800105a:	f7ff fe61 	bl	8000d20 <PIN_LOW>
 800105e:	2102      	movs	r1, #2
 8001060:	484f      	ldr	r0, [pc, #316]	@ (80011a0 <write24+0x1f4>)
 8001062:	f7ff fe6d 	bl	8000d40 <PIN_HIGH>
 8001066:	2102      	movs	r1, #2
 8001068:	484d      	ldr	r0, [pc, #308]	@ (80011a0 <write24+0x1f4>)
 800106a:	f7ff fe69 	bl	8000d40 <PIN_HIGH>
	write8(g);
 800106e:	4b4c      	ldr	r3, [pc, #304]	@ (80011a0 <write24+0x1f4>)
 8001070:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <write24+0x1f8>)
 8001078:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <write24+0x1fc>)
 8001080:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001096:	431a      	orrs	r2, r3
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	025b      	lsls	r3, r3, #9
 800109c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010a0:	431a      	orrs	r2, r3
 80010a2:	4b3f      	ldr	r3, [pc, #252]	@ (80011a0 <write24+0x1f4>)
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	105b      	asrs	r3, r3, #1
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	431a      	orrs	r2, r3
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	f003 0320 	and.w	r3, r3, #32
 80010c0:	431a      	orrs	r2, r3
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	431a      	orrs	r2, r3
 80010ca:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <write24+0x1f8>)
 80010cc:	619a      	str	r2, [r3, #24]
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	4a35      	ldr	r2, [pc, #212]	@ (80011a8 <write24+0x1fc>)
 80010d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	2102      	movs	r1, #2
 80010dc:	4830      	ldr	r0, [pc, #192]	@ (80011a0 <write24+0x1f4>)
 80010de:	f7ff fe1f 	bl	8000d20 <PIN_LOW>
 80010e2:	2102      	movs	r1, #2
 80010e4:	482e      	ldr	r0, [pc, #184]	@ (80011a0 <write24+0x1f4>)
 80010e6:	f7ff fe1b 	bl	8000d20 <PIN_LOW>
 80010ea:	2102      	movs	r1, #2
 80010ec:	482c      	ldr	r0, [pc, #176]	@ (80011a0 <write24+0x1f4>)
 80010ee:	f7ff fe17 	bl	8000d20 <PIN_LOW>
 80010f2:	2102      	movs	r1, #2
 80010f4:	482a      	ldr	r0, [pc, #168]	@ (80011a0 <write24+0x1f4>)
 80010f6:	f7ff fe23 	bl	8000d40 <PIN_HIGH>
 80010fa:	2102      	movs	r1, #2
 80010fc:	4828      	ldr	r0, [pc, #160]	@ (80011a0 <write24+0x1f4>)
 80010fe:	f7ff fe1f 	bl	8000d40 <PIN_HIGH>
	write8(b);
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <write24+0x1f4>)
 8001104:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <write24+0x1f8>)
 800110c:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <write24+0x1fc>)
 8001114:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001118:	619a      	str	r2, [r3, #24]
 800111a:	7b7b      	ldrb	r3, [r7, #13]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001122:	7b7b      	ldrb	r3, [r7, #13]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800112a:	431a      	orrs	r2, r3
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	025b      	lsls	r3, r3, #9
 8001130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001134:	431a      	orrs	r2, r3
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <write24+0x1f4>)
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001142:	7b7b      	ldrb	r3, [r7, #13]
 8001144:	105b      	asrs	r3, r3, #1
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	431a      	orrs	r2, r3
 800114c:	7b7b      	ldrb	r3, [r7, #13]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	431a      	orrs	r2, r3
 8001156:	7b7b      	ldrb	r3, [r7, #13]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	431a      	orrs	r2, r3
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <write24+0x1f8>)
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	019b      	lsls	r3, r3, #6
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <write24+0x1fc>)
 8001168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	2102      	movs	r1, #2
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <write24+0x1f4>)
 8001172:	f7ff fdd5 	bl	8000d20 <PIN_LOW>
 8001176:	2102      	movs	r1, #2
 8001178:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <write24+0x1f4>)
 800117a:	f7ff fdd1 	bl	8000d20 <PIN_LOW>
 800117e:	2102      	movs	r1, #2
 8001180:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <write24+0x1f4>)
 8001182:	f7ff fdcd 	bl	8000d20 <PIN_LOW>
 8001186:	2102      	movs	r1, #2
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <write24+0x1f4>)
 800118a:	f7ff fdd9 	bl	8000d40 <PIN_HIGH>
 800118e:	2102      	movs	r1, #2
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <write24+0x1f4>)
 8001192:	f7ff fdd5 	bl	8000d40 <PIN_HIGH>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800

080011ac <writecmddata>:

static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	460a      	mov	r2, r1
 80011b6:	80fb      	strh	r3, [r7, #6]
 80011b8:	4613      	mov	r3, r2
 80011ba:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE;
 80011bc:	2101      	movs	r1, #1
 80011be:	48a3      	ldr	r0, [pc, #652]	@ (800144c <writecmddata+0x2a0>)
 80011c0:	f7ff fdae 	bl	8000d20 <PIN_LOW>
	WriteCmd(cmd);
 80011c4:	2110      	movs	r1, #16
 80011c6:	48a2      	ldr	r0, [pc, #648]	@ (8001450 <writecmddata+0x2a4>)
 80011c8:	f7ff fdaa 	bl	8000d20 <PIN_LOW>
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	73bb      	strb	r3, [r7, #14]
 80011d8:	4b9d      	ldr	r3, [pc, #628]	@ (8001450 <writecmddata+0x2a4>)
 80011da:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	4b9a      	ldr	r3, [pc, #616]	@ (800144c <writecmddata+0x2a0>)
 80011e2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	4b9a      	ldr	r3, [pc, #616]	@ (8001454 <writecmddata+0x2a8>)
 80011ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001200:	431a      	orrs	r2, r3
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	025b      	lsls	r3, r3, #9
 8001206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800120a:	431a      	orrs	r2, r3
 800120c:	4b90      	ldr	r3, [pc, #576]	@ (8001450 <writecmddata+0x2a4>)
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	105b      	asrs	r3, r3, #1
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	431a      	orrs	r2, r3
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	431a      	orrs	r2, r3
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	431a      	orrs	r2, r3
 8001234:	4b85      	ldr	r3, [pc, #532]	@ (800144c <writecmddata+0x2a0>)
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	4a85      	ldr	r2, [pc, #532]	@ (8001454 <writecmddata+0x2a8>)
 800123e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	2102      	movs	r1, #2
 8001246:	4882      	ldr	r0, [pc, #520]	@ (8001450 <writecmddata+0x2a4>)
 8001248:	f7ff fd6a 	bl	8000d20 <PIN_LOW>
 800124c:	2102      	movs	r1, #2
 800124e:	4880      	ldr	r0, [pc, #512]	@ (8001450 <writecmddata+0x2a4>)
 8001250:	f7ff fd66 	bl	8000d20 <PIN_LOW>
 8001254:	2102      	movs	r1, #2
 8001256:	487e      	ldr	r0, [pc, #504]	@ (8001450 <writecmddata+0x2a4>)
 8001258:	f7ff fd62 	bl	8000d20 <PIN_LOW>
 800125c:	2102      	movs	r1, #2
 800125e:	487c      	ldr	r0, [pc, #496]	@ (8001450 <writecmddata+0x2a4>)
 8001260:	f7ff fd6e 	bl	8000d40 <PIN_HIGH>
 8001264:	2102      	movs	r1, #2
 8001266:	487a      	ldr	r0, [pc, #488]	@ (8001450 <writecmddata+0x2a4>)
 8001268:	f7ff fd6a 	bl	8000d40 <PIN_HIGH>
 800126c:	4b78      	ldr	r3, [pc, #480]	@ (8001450 <writecmddata+0x2a4>)
 800126e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	4b75      	ldr	r3, [pc, #468]	@ (800144c <writecmddata+0x2a0>)
 8001276:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	4b75      	ldr	r3, [pc, #468]	@ (8001454 <writecmddata+0x2a8>)
 800127e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	431a      	orrs	r2, r3
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800129e:	431a      	orrs	r2, r3
 80012a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001450 <writecmddata+0x2a4>)
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	105b      	asrs	r3, r3, #1
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	431a      	orrs	r2, r3
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	431a      	orrs	r2, r3
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	431a      	orrs	r2, r3
 80012c8:	4b60      	ldr	r3, [pc, #384]	@ (800144c <writecmddata+0x2a0>)
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	7bbb      	ldrb	r3, [r7, #14]
 80012ce:	019b      	lsls	r3, r3, #6
 80012d0:	4a60      	ldr	r2, [pc, #384]	@ (8001454 <writecmddata+0x2a8>)
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	2102      	movs	r1, #2
 80012da:	485d      	ldr	r0, [pc, #372]	@ (8001450 <writecmddata+0x2a4>)
 80012dc:	f7ff fd20 	bl	8000d20 <PIN_LOW>
 80012e0:	2102      	movs	r1, #2
 80012e2:	485b      	ldr	r0, [pc, #364]	@ (8001450 <writecmddata+0x2a4>)
 80012e4:	f7ff fd1c 	bl	8000d20 <PIN_LOW>
 80012e8:	2102      	movs	r1, #2
 80012ea:	4859      	ldr	r0, [pc, #356]	@ (8001450 <writecmddata+0x2a4>)
 80012ec:	f7ff fd18 	bl	8000d20 <PIN_LOW>
 80012f0:	2102      	movs	r1, #2
 80012f2:	4857      	ldr	r0, [pc, #348]	@ (8001450 <writecmddata+0x2a4>)
 80012f4:	f7ff fd24 	bl	8000d40 <PIN_HIGH>
 80012f8:	2102      	movs	r1, #2
 80012fa:	4855      	ldr	r0, [pc, #340]	@ (8001450 <writecmddata+0x2a4>)
 80012fc:	f7ff fd20 	bl	8000d40 <PIN_HIGH>
 8001300:	2110      	movs	r1, #16
 8001302:	4853      	ldr	r0, [pc, #332]	@ (8001450 <writecmddata+0x2a4>)
 8001304:	f7ff fd1c 	bl	8000d40 <PIN_HIGH>
	WriteData(dat);
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	737b      	strb	r3, [r7, #13]
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	733b      	strb	r3, [r7, #12]
 8001314:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <writecmddata+0x2a4>)
 8001316:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	4b4b      	ldr	r3, [pc, #300]	@ (800144c <writecmddata+0x2a0>)
 800131e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001322:	619a      	str	r2, [r3, #24]
 8001324:	4b4b      	ldr	r3, [pc, #300]	@ (8001454 <writecmddata+0x2a8>)
 8001326:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800132a:	619a      	str	r2, [r3, #24]
 800132c:	7b7b      	ldrb	r3, [r7, #13]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133c:	431a      	orrs	r2, r3
 800133e:	7b7b      	ldrb	r3, [r7, #13]
 8001340:	025b      	lsls	r3, r3, #9
 8001342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001346:	431a      	orrs	r2, r3
 8001348:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <writecmddata+0x2a4>)
 800134a:	619a      	str	r2, [r3, #24]
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	105b      	asrs	r3, r3, #1
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	431a      	orrs	r2, r3
 800135e:	7b7b      	ldrb	r3, [r7, #13]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	431a      	orrs	r2, r3
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	431a      	orrs	r2, r3
 8001370:	4b36      	ldr	r3, [pc, #216]	@ (800144c <writecmddata+0x2a0>)
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	019b      	lsls	r3, r3, #6
 8001378:	4a36      	ldr	r2, [pc, #216]	@ (8001454 <writecmddata+0x2a8>)
 800137a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	2102      	movs	r1, #2
 8001382:	4833      	ldr	r0, [pc, #204]	@ (8001450 <writecmddata+0x2a4>)
 8001384:	f7ff fccc 	bl	8000d20 <PIN_LOW>
 8001388:	2102      	movs	r1, #2
 800138a:	4831      	ldr	r0, [pc, #196]	@ (8001450 <writecmddata+0x2a4>)
 800138c:	f7ff fcc8 	bl	8000d20 <PIN_LOW>
 8001390:	2102      	movs	r1, #2
 8001392:	482f      	ldr	r0, [pc, #188]	@ (8001450 <writecmddata+0x2a4>)
 8001394:	f7ff fcc4 	bl	8000d20 <PIN_LOW>
 8001398:	2102      	movs	r1, #2
 800139a:	482d      	ldr	r0, [pc, #180]	@ (8001450 <writecmddata+0x2a4>)
 800139c:	f7ff fcd0 	bl	8000d40 <PIN_HIGH>
 80013a0:	2102      	movs	r1, #2
 80013a2:	482b      	ldr	r0, [pc, #172]	@ (8001450 <writecmddata+0x2a4>)
 80013a4:	f7ff fccc 	bl	8000d40 <PIN_HIGH>
 80013a8:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <writecmddata+0x2a4>)
 80013aa:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80013ae:	619a      	str	r2, [r3, #24]
 80013b0:	4b26      	ldr	r3, [pc, #152]	@ (800144c <writecmddata+0x2a0>)
 80013b2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80013b6:	619a      	str	r2, [r3, #24]
 80013b8:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <writecmddata+0x2a8>)
 80013ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	7b3b      	ldrb	r3, [r7, #12]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d0:	431a      	orrs	r2, r3
 80013d2:	7b3b      	ldrb	r3, [r7, #12]
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013da:	431a      	orrs	r2, r3
 80013dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <writecmddata+0x2a4>)
 80013de:	619a      	str	r2, [r3, #24]
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80013e8:	7b3b      	ldrb	r3, [r7, #12]
 80013ea:	105b      	asrs	r3, r3, #1
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	7b3b      	ldrb	r3, [r7, #12]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	431a      	orrs	r2, r3
 80013fc:	7b3b      	ldrb	r3, [r7, #12]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	431a      	orrs	r2, r3
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <writecmddata+0x2a0>)
 8001406:	619a      	str	r2, [r3, #24]
 8001408:	7b3b      	ldrb	r3, [r7, #12]
 800140a:	019b      	lsls	r3, r3, #6
 800140c:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <writecmddata+0x2a8>)
 800140e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	2102      	movs	r1, #2
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <writecmddata+0x2a4>)
 8001418:	f7ff fc82 	bl	8000d20 <PIN_LOW>
 800141c:	2102      	movs	r1, #2
 800141e:	480c      	ldr	r0, [pc, #48]	@ (8001450 <writecmddata+0x2a4>)
 8001420:	f7ff fc7e 	bl	8000d20 <PIN_LOW>
 8001424:	2102      	movs	r1, #2
 8001426:	480a      	ldr	r0, [pc, #40]	@ (8001450 <writecmddata+0x2a4>)
 8001428:	f7ff fc7a 	bl	8000d20 <PIN_LOW>
 800142c:	2102      	movs	r1, #2
 800142e:	4808      	ldr	r0, [pc, #32]	@ (8001450 <writecmddata+0x2a4>)
 8001430:	f7ff fc86 	bl	8000d40 <PIN_HIGH>
 8001434:	2102      	movs	r1, #2
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <writecmddata+0x2a4>)
 8001438:	f7ff fc82 	bl	8000d40 <PIN_HIGH>
	CS_IDLE;
 800143c:	2101      	movs	r1, #1
 800143e:	4803      	ldr	r0, [pc, #12]	@ (800144c <writecmddata+0x2a0>)
 8001440:	f7ff fc7e 	bl	8000d40 <PIN_HIGH>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020400 	.word	0x40020400
 8001450:	40020000 	.word	0x40020000
 8001454:	40020800 	.word	0x40020800

08001458 <WriteCmdParamN>:

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	603a      	str	r2, [r7, #0]
 8001462:	80fb      	strh	r3, [r7, #6]
 8001464:	460b      	mov	r3, r1
 8001466:	717b      	strb	r3, [r7, #5]
	CS_ACTIVE;
 8001468:	2101      	movs	r1, #1
 800146a:	4853      	ldr	r0, [pc, #332]	@ (80015b8 <WriteCmdParamN+0x160>)
 800146c:	f7ff fc58 	bl	8000d20 <PIN_LOW>
	WriteCmd(cmd);
 8001470:	2110      	movs	r1, #16
 8001472:	4852      	ldr	r0, [pc, #328]	@ (80015bc <WriteCmdParamN+0x164>)
 8001474:	f7ff fc54 	bl	8000d20 <PIN_LOW>
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	73bb      	strb	r3, [r7, #14]
 8001484:	4b4d      	ldr	r3, [pc, #308]	@ (80015bc <WriteCmdParamN+0x164>)
 8001486:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800148a:	619a      	str	r2, [r3, #24]
 800148c:	4b4a      	ldr	r3, [pc, #296]	@ (80015b8 <WriteCmdParamN+0x160>)
 800148e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001492:	619a      	str	r2, [r3, #24]
 8001494:	4b4a      	ldr	r3, [pc, #296]	@ (80015c0 <WriteCmdParamN+0x168>)
 8001496:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800149a:	619a      	str	r2, [r3, #24]
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ac:	431a      	orrs	r2, r3
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b6:	431a      	orrs	r2, r3
 80014b8:	4b40      	ldr	r3, [pc, #256]	@ (80015bc <WriteCmdParamN+0x164>)
 80014ba:	619a      	str	r2, [r3, #24]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	105b      	asrs	r3, r3, #1
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	431a      	orrs	r2, r3
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	431a      	orrs	r2, r3
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	431a      	orrs	r2, r3
 80014e0:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <WriteCmdParamN+0x160>)
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	019b      	lsls	r3, r3, #6
 80014e8:	4a35      	ldr	r2, [pc, #212]	@ (80015c0 <WriteCmdParamN+0x168>)
 80014ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	2102      	movs	r1, #2
 80014f2:	4832      	ldr	r0, [pc, #200]	@ (80015bc <WriteCmdParamN+0x164>)
 80014f4:	f7ff fc14 	bl	8000d20 <PIN_LOW>
 80014f8:	2102      	movs	r1, #2
 80014fa:	4830      	ldr	r0, [pc, #192]	@ (80015bc <WriteCmdParamN+0x164>)
 80014fc:	f7ff fc10 	bl	8000d20 <PIN_LOW>
 8001500:	2102      	movs	r1, #2
 8001502:	482e      	ldr	r0, [pc, #184]	@ (80015bc <WriteCmdParamN+0x164>)
 8001504:	f7ff fc0c 	bl	8000d20 <PIN_LOW>
 8001508:	2102      	movs	r1, #2
 800150a:	482c      	ldr	r0, [pc, #176]	@ (80015bc <WriteCmdParamN+0x164>)
 800150c:	f7ff fc18 	bl	8000d40 <PIN_HIGH>
 8001510:	2102      	movs	r1, #2
 8001512:	482a      	ldr	r0, [pc, #168]	@ (80015bc <WriteCmdParamN+0x164>)
 8001514:	f7ff fc14 	bl	8000d40 <PIN_HIGH>
 8001518:	4b28      	ldr	r3, [pc, #160]	@ (80015bc <WriteCmdParamN+0x164>)
 800151a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800151e:	619a      	str	r2, [r3, #24]
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <WriteCmdParamN+0x160>)
 8001522:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <WriteCmdParamN+0x168>)
 800152a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800152e:	619a      	str	r2, [r3, #24]
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001540:	431a      	orrs	r2, r3
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800154a:	431a      	orrs	r2, r3
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <WriteCmdParamN+0x164>)
 800154e:	619a      	str	r2, [r3, #24]
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001558:	7bbb      	ldrb	r3, [r7, #14]
 800155a:	105b      	asrs	r3, r3, #1
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	431a      	orrs	r2, r3
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	431a      	orrs	r2, r3
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <WriteCmdParamN+0x160>)
 8001576:	619a      	str	r2, [r3, #24]
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	019b      	lsls	r3, r3, #6
 800157c:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <WriteCmdParamN+0x168>)
 800157e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	2102      	movs	r1, #2
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <WriteCmdParamN+0x164>)
 8001588:	f7ff fbca 	bl	8000d20 <PIN_LOW>
 800158c:	2102      	movs	r1, #2
 800158e:	480b      	ldr	r0, [pc, #44]	@ (80015bc <WriteCmdParamN+0x164>)
 8001590:	f7ff fbc6 	bl	8000d20 <PIN_LOW>
 8001594:	2102      	movs	r1, #2
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <WriteCmdParamN+0x164>)
 8001598:	f7ff fbc2 	bl	8000d20 <PIN_LOW>
 800159c:	2102      	movs	r1, #2
 800159e:	4807      	ldr	r0, [pc, #28]	@ (80015bc <WriteCmdParamN+0x164>)
 80015a0:	f7ff fbce 	bl	8000d40 <PIN_HIGH>
 80015a4:	2102      	movs	r1, #2
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <WriteCmdParamN+0x164>)
 80015a8:	f7ff fbca 	bl	8000d40 <PIN_HIGH>
 80015ac:	2110      	movs	r1, #16
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <WriteCmdParamN+0x164>)
 80015b0:	f7ff fbc6 	bl	8000d40 <PIN_HIGH>
	while (N-- > 0) {
 80015b4:	e104      	b.n	80017c0 <WriteCmdParamN+0x368>
 80015b6:	bf00      	nop
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020800 	.word	0x40020800
		uint8_t u8 = *block++;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	603a      	str	r2, [r7, #0]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	737b      	strb	r3, [r7, #13]
		write8(u8);
 80015ce:	4b85      	ldr	r3, [pc, #532]	@ (80017e4 <WriteCmdParamN+0x38c>)
 80015d0:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	4b84      	ldr	r3, [pc, #528]	@ (80017e8 <WriteCmdParamN+0x390>)
 80015d8:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80015dc:	619a      	str	r2, [r3, #24]
 80015de:	4b83      	ldr	r3, [pc, #524]	@ (80017ec <WriteCmdParamN+0x394>)
 80015e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015e4:	619a      	str	r2, [r3, #24]
 80015e6:	7b7b      	ldrb	r3, [r7, #13]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80015ee:	7b7b      	ldrb	r3, [r7, #13]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f6:	431a      	orrs	r2, r3
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001600:	431a      	orrs	r2, r3
 8001602:	4b78      	ldr	r3, [pc, #480]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001604:	619a      	str	r2, [r3, #24]
 8001606:	7b7b      	ldrb	r3, [r7, #13]
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800160e:	7b7b      	ldrb	r3, [r7, #13]
 8001610:	105b      	asrs	r3, r3, #1
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	431a      	orrs	r2, r3
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	431a      	orrs	r2, r3
 800162a:	4b6f      	ldr	r3, [pc, #444]	@ (80017e8 <WriteCmdParamN+0x390>)
 800162c:	619a      	str	r2, [r3, #24]
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	4a6e      	ldr	r2, [pc, #440]	@ (80017ec <WriteCmdParamN+0x394>)
 8001634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	2102      	movs	r1, #2
 800163c:	4869      	ldr	r0, [pc, #420]	@ (80017e4 <WriteCmdParamN+0x38c>)
 800163e:	f7ff fb6f 	bl	8000d20 <PIN_LOW>
 8001642:	2102      	movs	r1, #2
 8001644:	4867      	ldr	r0, [pc, #412]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001646:	f7ff fb6b 	bl	8000d20 <PIN_LOW>
 800164a:	2102      	movs	r1, #2
 800164c:	4865      	ldr	r0, [pc, #404]	@ (80017e4 <WriteCmdParamN+0x38c>)
 800164e:	f7ff fb67 	bl	8000d20 <PIN_LOW>
 8001652:	2102      	movs	r1, #2
 8001654:	4863      	ldr	r0, [pc, #396]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001656:	f7ff fb73 	bl	8000d40 <PIN_HIGH>
 800165a:	2102      	movs	r1, #2
 800165c:	4861      	ldr	r0, [pc, #388]	@ (80017e4 <WriteCmdParamN+0x38c>)
 800165e:	f7ff fb6f 	bl	8000d40 <PIN_HIGH>
		if (N && is8347) {
 8001662:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80aa 	beq.w	80017c0 <WriteCmdParamN+0x368>
 800166c:	4b60      	ldr	r3, [pc, #384]	@ (80017f0 <WriteCmdParamN+0x398>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a5 	beq.w	80017c0 <WriteCmdParamN+0x368>
			cmd++;
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	3301      	adds	r3, #1
 800167a:	80fb      	strh	r3, [r7, #6]
			WriteCmd(cmd);
 800167c:	2110      	movs	r1, #16
 800167e:	4859      	ldr	r0, [pc, #356]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001680:	f7ff fb4e 	bl	8000d20 <PIN_LOW>
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b29b      	uxth	r3, r3
 800168a:	733b      	strb	r3, [r7, #12]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	72fb      	strb	r3, [r7, #11]
 8001690:	4b54      	ldr	r3, [pc, #336]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001692:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001696:	619a      	str	r2, [r3, #24]
 8001698:	4b53      	ldr	r3, [pc, #332]	@ (80017e8 <WriteCmdParamN+0x390>)
 800169a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800169e:	619a      	str	r2, [r3, #24]
 80016a0:	4b52      	ldr	r3, [pc, #328]	@ (80017ec <WriteCmdParamN+0x394>)
 80016a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	7b3b      	ldrb	r3, [r7, #12]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80016b0:	7b3b      	ldrb	r3, [r7, #12]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b8:	431a      	orrs	r2, r3
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016c2:	431a      	orrs	r2, r3
 80016c4:	4b47      	ldr	r3, [pc, #284]	@ (80017e4 <WriteCmdParamN+0x38c>)
 80016c6:	619a      	str	r2, [r3, #24]
 80016c8:	7b3b      	ldrb	r3, [r7, #12]
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80016d0:	7b3b      	ldrb	r3, [r7, #12]
 80016d2:	105b      	asrs	r3, r3, #1
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	431a      	orrs	r2, r3
 80016da:	7b3b      	ldrb	r3, [r7, #12]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	431a      	orrs	r2, r3
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	431a      	orrs	r2, r3
 80016ec:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <WriteCmdParamN+0x390>)
 80016ee:	619a      	str	r2, [r3, #24]
 80016f0:	7b3b      	ldrb	r3, [r7, #12]
 80016f2:	019b      	lsls	r3, r3, #6
 80016f4:	4a3d      	ldr	r2, [pc, #244]	@ (80017ec <WriteCmdParamN+0x394>)
 80016f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	2102      	movs	r1, #2
 80016fe:	4839      	ldr	r0, [pc, #228]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001700:	f7ff fb0e 	bl	8000d20 <PIN_LOW>
 8001704:	2102      	movs	r1, #2
 8001706:	4837      	ldr	r0, [pc, #220]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001708:	f7ff fb0a 	bl	8000d20 <PIN_LOW>
 800170c:	2102      	movs	r1, #2
 800170e:	4835      	ldr	r0, [pc, #212]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001710:	f7ff fb06 	bl	8000d20 <PIN_LOW>
 8001714:	2102      	movs	r1, #2
 8001716:	4833      	ldr	r0, [pc, #204]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001718:	f7ff fb12 	bl	8000d40 <PIN_HIGH>
 800171c:	2102      	movs	r1, #2
 800171e:	4831      	ldr	r0, [pc, #196]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001720:	f7ff fb0e 	bl	8000d40 <PIN_HIGH>
 8001724:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001726:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800172a:	619a      	str	r2, [r3, #24]
 800172c:	4b2e      	ldr	r3, [pc, #184]	@ (80017e8 <WriteCmdParamN+0x390>)
 800172e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001732:	619a      	str	r2, [r3, #24]
 8001734:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <WriteCmdParamN+0x394>)
 8001736:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001744:	7afb      	ldrb	r3, [r7, #11]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	431a      	orrs	r2, r3
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	025b      	lsls	r3, r3, #9
 8001752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001756:	431a      	orrs	r2, r3
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <WriteCmdParamN+0x38c>)
 800175a:	619a      	str	r2, [r3, #24]
 800175c:	7afb      	ldrb	r3, [r7, #11]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	105b      	asrs	r3, r3, #1
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	431a      	orrs	r2, r3
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	431a      	orrs	r2, r3
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	431a      	orrs	r2, r3
 8001780:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <WriteCmdParamN+0x390>)
 8001782:	619a      	str	r2, [r3, #24]
 8001784:	7afb      	ldrb	r3, [r7, #11]
 8001786:	019b      	lsls	r3, r3, #6
 8001788:	4a18      	ldr	r2, [pc, #96]	@ (80017ec <WriteCmdParamN+0x394>)
 800178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	2102      	movs	r1, #2
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <WriteCmdParamN+0x38c>)
 8001794:	f7ff fac4 	bl	8000d20 <PIN_LOW>
 8001798:	2102      	movs	r1, #2
 800179a:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <WriteCmdParamN+0x38c>)
 800179c:	f7ff fac0 	bl	8000d20 <PIN_LOW>
 80017a0:	2102      	movs	r1, #2
 80017a2:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <WriteCmdParamN+0x38c>)
 80017a4:	f7ff fabc 	bl	8000d20 <PIN_LOW>
 80017a8:	2102      	movs	r1, #2
 80017aa:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <WriteCmdParamN+0x38c>)
 80017ac:	f7ff fac8 	bl	8000d40 <PIN_HIGH>
 80017b0:	2102      	movs	r1, #2
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <WriteCmdParamN+0x38c>)
 80017b4:	f7ff fac4 	bl	8000d40 <PIN_HIGH>
 80017b8:	2110      	movs	r1, #16
 80017ba:	480a      	ldr	r0, [pc, #40]	@ (80017e4 <WriteCmdParamN+0x38c>)
 80017bc:	f7ff fac0 	bl	8000d40 <PIN_HIGH>
	while (N-- > 0) {
 80017c0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	3a01      	subs	r2, #1
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	717a      	strb	r2, [r7, #5]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f73f aef9 	bgt.w	80015c4 <WriteCmdParamN+0x16c>
		}
	}
	CS_IDLE;
 80017d2:	2101      	movs	r1, #1
 80017d4:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <WriteCmdParamN+0x390>)
 80017d6:	f7ff fab3 	bl	8000d40 <PIN_HIGH>
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	200000cb 	.word	0x200000cb

080017f4 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	4603      	mov	r3, r0
 8001808:	71bb      	strb	r3, [r7, #6]
 800180a:	460b      	mov	r3, r1
 800180c:	717b      	strb	r3, [r7, #5]
 800180e:	4613      	mov	r3, r2
 8001810:	713b      	strb	r3, [r7, #4]
	uint8_t d[4];
	d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	733b      	strb	r3, [r7, #12]
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	737b      	strb	r3, [r7, #13]
 800181a:	793b      	ldrb	r3, [r7, #4]
 800181c:	73bb      	strb	r3, [r7, #14]
 800181e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001822:	73fb      	strb	r3, [r7, #15]
	WriteCmdParamN(cmd, 4, d);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	b29b      	uxth	r3, r3
 8001828:	f107 020c 	add.w	r2, r7, #12
 800182c:	2104      	movs	r1, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fe12 	bl	8001458 <WriteCmdParamN>
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}

0800183c <init_table>:

static void init_table(const void *table, int16_t size)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]

	uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24

	while (size > 0)
 800184c:	e046      	b.n	80018dc <init_table+0xa0>
	{
		uint8_t cmd = pgm_read_byte(p++);
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	627a      	str	r2, [r7, #36]	@ 0x24
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		uint8_t len = pgm_read_byte(p++);
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if (cmd == TFTLCD_DELAY8)
 8001866:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800186a:	2b7f      	cmp	r3, #127	@ 0x7f
 800186c:	d108      	bne.n	8001880 <init_table+0x44>
		{
			delay(len);
 800186e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fbb6 	bl	8001fe4 <delay>
			len = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800187e:	e024      	b.n	80018ca <init_table+0x8e>
		}
		else
		{
			for (uint8_t i = 0; i < len; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001886:	e010      	b.n	80018aa <init_table+0x6e>
				dat[i] = pgm_read_byte(p++);
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	627a      	str	r2, [r7, #36]	@ 0x24
 800188e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001892:	7819      	ldrb	r1, [r3, #0]
 8001894:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8001898:	443b      	add	r3, r7
 800189a:	460a      	mov	r2, r1
 800189c:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (uint8_t i = 0; i < len; i++)
 80018a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018a4:	3301      	adds	r3, #1
 80018a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80018aa:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80018ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3e8      	bcc.n	8001888 <init_table+0x4c>
			WriteCmdParamN(cmd, len, dat);
 80018b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f997 1023 	ldrsb.w	r1, [r7, #35]	@ 0x23
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fdc7 	bl	8001458 <WriteCmdParamN>
		}
		size -= len + 2;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3b02      	subs	r3, #2
 80018d8:	b29b      	uxth	r3, r3
 80018da:	807b      	strh	r3, [r7, #2]
	while (size > 0)
 80018dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dcb4      	bgt.n	800184e <init_table+0x12>
	}
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	@ 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <init_table16>:

static void init_table16(const void *table, int16_t size)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
	uint16_t *p = (uint16_t *) table;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
	while (size > 0) {
 80018fe:	e01d      	b.n	800193c <init_table16+0x4e>
		uint16_t cmd = pgm_read_word(p++);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1c9a      	adds	r2, r3, #2
 8001904:	60fa      	str	r2, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	817b      	strh	r3, [r7, #10]
		uint16_t d = pgm_read_word(p++);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1c9a      	adds	r2, r3, #2
 800190e:	60fa      	str	r2, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	813b      	strh	r3, [r7, #8]
		if (cmd == TFTLCD_DELAY)
 8001914:	897b      	ldrh	r3, [r7, #10]
 8001916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191a:	4293      	cmp	r3, r2
 800191c:	d104      	bne.n	8001928 <init_table16+0x3a>
			delay(d);
 800191e:	893b      	ldrh	r3, [r7, #8]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fb5f 	bl	8001fe4 <delay>
 8001926:	e005      	b.n	8001934 <init_table16+0x46>
		else {
			writecmddata(cmd, d);                      //static function
 8001928:	893a      	ldrh	r2, [r7, #8]
 800192a:	897b      	ldrh	r3, [r7, #10]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fc3c 	bl	80011ac <writecmddata>
		}
		size -= 2 * sizeof(int16_t);
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	3b04      	subs	r3, #4
 8001938:	b29b      	uxth	r3, r3
 800193a:	807b      	strh	r3, [r7, #2]
	while (size > 0) {
 800193c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dcdd      	bgt.n	8001900 <init_table16+0x12>
	}
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <read16bits>:

static uint16_t read16bits(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	uint16_t ret;
	uint8_t lo;
	READ_8(ret);
 8001956:	2101      	movs	r1, #1
 8001958:	4873      	ldr	r0, [pc, #460]	@ (8001b28 <read16bits+0x1d8>)
 800195a:	f7ff f9f1 	bl	8000d40 <PIN_HIGH>
 800195e:	2101      	movs	r1, #1
 8001960:	4871      	ldr	r0, [pc, #452]	@ (8001b28 <read16bits+0x1d8>)
 8001962:	f7ff f9dd 	bl	8000d20 <PIN_LOW>
 8001966:	2101      	movs	r1, #1
 8001968:	486f      	ldr	r0, [pc, #444]	@ (8001b28 <read16bits+0x1d8>)
 800196a:	f7ff f9d9 	bl	8000d20 <PIN_LOW>
 800196e:	2101      	movs	r1, #1
 8001970:	486d      	ldr	r0, [pc, #436]	@ (8001b28 <read16bits+0x1d8>)
 8001972:	f7ff f9d5 	bl	8000d20 <PIN_LOW>
 8001976:	2101      	movs	r1, #1
 8001978:	486b      	ldr	r0, [pc, #428]	@ (8001b28 <read16bits+0x1d8>)
 800197a:	f7ff f9d1 	bl	8000d20 <PIN_LOW>
 800197e:	2101      	movs	r1, #1
 8001980:	4869      	ldr	r0, [pc, #420]	@ (8001b28 <read16bits+0x1d8>)
 8001982:	f7ff f9cd 	bl	8000d20 <PIN_LOW>
 8001986:	2101      	movs	r1, #1
 8001988:	4867      	ldr	r0, [pc, #412]	@ (8001b28 <read16bits+0x1d8>)
 800198a:	f7ff f9c9 	bl	8000d20 <PIN_LOW>
 800198e:	2101      	movs	r1, #1
 8001990:	4865      	ldr	r0, [pc, #404]	@ (8001b28 <read16bits+0x1d8>)
 8001992:	f7ff f9c5 	bl	8000d20 <PIN_LOW>
 8001996:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <read16bits+0x1d8>)
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	b29b      	uxth	r3, r3
 800199e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b61      	ldr	r3, [pc, #388]	@ (8001b2c <read16bits+0x1dc>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b2c <read16bits+0x1dc>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <read16bits+0x1dc>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <read16bits+0x1dc>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <read16bits+0x1d8>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001b30 <read16bits+0x1e0>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b45      	ldr	r3, [pc, #276]	@ (8001b28 <read16bits+0x1d8>)
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	0a5b      	lsrs	r3, r3, #9
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]
 8001a22:	2101      	movs	r1, #1
 8001a24:	4840      	ldr	r0, [pc, #256]	@ (8001b28 <read16bits+0x1d8>)
 8001a26:	f7ff f98b 	bl	8000d40 <PIN_HIGH>
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	483e      	ldr	r0, [pc, #248]	@ (8001b28 <read16bits+0x1d8>)
 8001a2e:	f7ff f987 	bl	8000d40 <PIN_HIGH>
	READ_8(lo);
 8001a32:	2101      	movs	r1, #1
 8001a34:	483c      	ldr	r0, [pc, #240]	@ (8001b28 <read16bits+0x1d8>)
 8001a36:	f7ff f983 	bl	8000d40 <PIN_HIGH>
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	483a      	ldr	r0, [pc, #232]	@ (8001b28 <read16bits+0x1d8>)
 8001a3e:	f7ff f96f 	bl	8000d20 <PIN_LOW>
 8001a42:	2101      	movs	r1, #1
 8001a44:	4838      	ldr	r0, [pc, #224]	@ (8001b28 <read16bits+0x1d8>)
 8001a46:	f7ff f96b 	bl	8000d20 <PIN_LOW>
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4836      	ldr	r0, [pc, #216]	@ (8001b28 <read16bits+0x1d8>)
 8001a4e:	f7ff f967 	bl	8000d20 <PIN_LOW>
 8001a52:	2101      	movs	r1, #1
 8001a54:	4834      	ldr	r0, [pc, #208]	@ (8001b28 <read16bits+0x1d8>)
 8001a56:	f7ff f963 	bl	8000d20 <PIN_LOW>
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4832      	ldr	r0, [pc, #200]	@ (8001b28 <read16bits+0x1d8>)
 8001a5e:	f7ff f95f 	bl	8000d20 <PIN_LOW>
 8001a62:	2101      	movs	r1, #1
 8001a64:	4830      	ldr	r0, [pc, #192]	@ (8001b28 <read16bits+0x1d8>)
 8001a66:	f7ff f95b 	bl	8000d20 <PIN_LOW>
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	482e      	ldr	r0, [pc, #184]	@ (8001b28 <read16bits+0x1d8>)
 8001a6e:	f7ff f957 	bl	8000d20 <PIN_LOW>
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <read16bits+0x1d8>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b2a      	ldr	r3, [pc, #168]	@ (8001b2c <read16bits+0x1dc>)
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b26      	ldr	r3, [pc, #152]	@ (8001b2c <read16bits+0x1dc>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <read16bits+0x1dc>)
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <read16bits+0x1dc>)
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <read16bits+0x1d8>)
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <read16bits+0x1e0>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <read16bits+0x1d8>)
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	0a5b      	lsrs	r3, r3, #9
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	717b      	strb	r3, [r7, #5]
 8001afe:	2101      	movs	r1, #1
 8001b00:	4809      	ldr	r0, [pc, #36]	@ (8001b28 <read16bits+0x1d8>)
 8001b02:	f7ff f91d 	bl	8000d40 <PIN_HIGH>
 8001b06:	2101      	movs	r1, #1
 8001b08:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <read16bits+0x1d8>)
 8001b0a:	f7ff f919 	bl	8000d40 <PIN_HIGH>
	return (ret << 8) | lo;
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	797b      	ldrb	r3, [r7, #5]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	b29b      	uxth	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40020800 	.word	0x40020800

08001b34 <readReg>:

static uint16_t readReg(uint16_t reg, int8_t index)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	80fb      	strh	r3, [r7, #6]
 8001b40:	4613      	mov	r3, r2
 8001b42:	717b      	strb	r3, [r7, #5]
	uint16_t ret;
	uint8_t lo;
	if (!done_reset)
 8001b44:	4b65      	ldr	r3, [pc, #404]	@ (8001cdc <readReg+0x1a8>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <readReg+0x1c>
		tft_reset();
 8001b4c:	f001 f8a2 	bl	8002c94 <tft_reset>
	CS_ACTIVE;
 8001b50:	2101      	movs	r1, #1
 8001b52:	4863      	ldr	r0, [pc, #396]	@ (8001ce0 <readReg+0x1ac>)
 8001b54:	f7ff f8e4 	bl	8000d20 <PIN_LOW>
	WriteCmd(reg);
 8001b58:	2110      	movs	r1, #16
 8001b5a:	4862      	ldr	r0, [pc, #392]	@ (8001ce4 <readReg+0x1b0>)
 8001b5c:	f7ff f8e0 	bl	8000d20 <PIN_LOW>
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	73bb      	strb	r3, [r7, #14]
 8001b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ce4 <readReg+0x1b0>)
 8001b6e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001b72:	619a      	str	r2, [r3, #24]
 8001b74:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce0 <readReg+0x1ac>)
 8001b76:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001b7a:	619a      	str	r2, [r3, #24]
 8001b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce8 <readReg+0x1b4>)
 8001b7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b94:	431a      	orrs	r2, r3
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	4b50      	ldr	r3, [pc, #320]	@ (8001ce4 <readReg+0x1b0>)
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	105b      	asrs	r3, r3, #1
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	4b45      	ldr	r3, [pc, #276]	@ (8001ce0 <readReg+0x1ac>)
 8001bca:	619a      	str	r2, [r3, #24]
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	019b      	lsls	r3, r3, #6
 8001bd0:	4a45      	ldr	r2, [pc, #276]	@ (8001ce8 <readReg+0x1b4>)
 8001bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4842      	ldr	r0, [pc, #264]	@ (8001ce4 <readReg+0x1b0>)
 8001bdc:	f7ff f8a0 	bl	8000d20 <PIN_LOW>
 8001be0:	2102      	movs	r1, #2
 8001be2:	4840      	ldr	r0, [pc, #256]	@ (8001ce4 <readReg+0x1b0>)
 8001be4:	f7ff f89c 	bl	8000d20 <PIN_LOW>
 8001be8:	2102      	movs	r1, #2
 8001bea:	483e      	ldr	r0, [pc, #248]	@ (8001ce4 <readReg+0x1b0>)
 8001bec:	f7ff f898 	bl	8000d20 <PIN_LOW>
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	483c      	ldr	r0, [pc, #240]	@ (8001ce4 <readReg+0x1b0>)
 8001bf4:	f7ff f8a4 	bl	8000d40 <PIN_HIGH>
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	483a      	ldr	r0, [pc, #232]	@ (8001ce4 <readReg+0x1b0>)
 8001bfc:	f7ff f8a0 	bl	8000d40 <PIN_HIGH>
 8001c00:	4b38      	ldr	r3, [pc, #224]	@ (8001ce4 <readReg+0x1b0>)
 8001c02:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8001c06:	619a      	str	r2, [r3, #24]
 8001c08:	4b35      	ldr	r3, [pc, #212]	@ (8001ce0 <readReg+0x1ac>)
 8001c0a:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <readReg+0x1b4>)
 8001c12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001c20:	7bbb      	ldrb	r3, [r7, #14]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <readReg+0x1b0>)
 8001c36:	619a      	str	r2, [r3, #24]
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
 8001c42:	105b      	asrs	r3, r3, #1
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	431a      	orrs	r2, r3
 8001c54:	7bbb      	ldrb	r3, [r7, #14]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <readReg+0x1ac>)
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	7bbb      	ldrb	r3, [r7, #14]
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	4a20      	ldr	r2, [pc, #128]	@ (8001ce8 <readReg+0x1b4>)
 8001c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	481d      	ldr	r0, [pc, #116]	@ (8001ce4 <readReg+0x1b0>)
 8001c70:	f7ff f856 	bl	8000d20 <PIN_LOW>
 8001c74:	2102      	movs	r1, #2
 8001c76:	481b      	ldr	r0, [pc, #108]	@ (8001ce4 <readReg+0x1b0>)
 8001c78:	f7ff f852 	bl	8000d20 <PIN_LOW>
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	4819      	ldr	r0, [pc, #100]	@ (8001ce4 <readReg+0x1b0>)
 8001c80:	f7ff f84e 	bl	8000d20 <PIN_LOW>
 8001c84:	2102      	movs	r1, #2
 8001c86:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <readReg+0x1b0>)
 8001c88:	f7ff f85a 	bl	8000d40 <PIN_HIGH>
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <readReg+0x1b0>)
 8001c90:	f7ff f856 	bl	8000d40 <PIN_HIGH>
 8001c94:	2110      	movs	r1, #16
 8001c96:	4813      	ldr	r0, [pc, #76]	@ (8001ce4 <readReg+0x1b0>)
 8001c98:	f7ff f852 	bl	8000d40 <PIN_HIGH>
	setReadDir();
 8001c9c:	f7ff f92a 	bl	8000ef4 <setReadDir>
	delay(1);    //1us should be adequate
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f000 f99f 	bl	8001fe4 <delay>
	//    READ_16(ret);
	do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001ca6:	f7ff fe53 	bl	8001950 <read16bits>
 8001caa:	4603      	mov	r3, r0
 8001cac:	81bb      	strh	r3, [r7, #12]
 8001cae:	797b      	ldrb	r3, [r7, #5]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	717b      	strb	r3, [r7, #5]
 8001cb6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	daf3      	bge.n	8001ca6 <readReg+0x172>
	RD_IDLE;
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <readReg+0x1b0>)
 8001cc2:	f7ff f83d 	bl	8000d40 <PIN_HIGH>
	CS_IDLE;
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <readReg+0x1ac>)
 8001cca:	f7ff f839 	bl	8000d40 <PIN_HIGH>
	setWriteDir();
 8001cce:	f7ff f93f 	bl	8000f50 <setWriteDir>
	return ret;
 8001cd2:	89bb      	ldrh	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200000ca 	.word	0x200000ca
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020800 	.word	0x40020800

08001cec <readReg32>:

static uint32_t readReg32(uint16_t reg)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
	uint16_t h = readReg(reg, 0);
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff1a 	bl	8001b34 <readReg>
 8001d00:	4603      	mov	r3, r0
 8001d02:	81fb      	strh	r3, [r7, #14]
	uint16_t l = readReg(reg, 1);
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff13 	bl	8001b34 <readReg>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	81bb      	strh	r3, [r7, #12]
	return ((uint32_t) h << 16) | (l);
 8001d12:	89fb      	ldrh	r3, [r7, #14]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	89bb      	ldrh	r3, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <readReg40>:

static uint32_t readReg40(uint16_t reg)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	80fb      	strh	r3, [r7, #6]
	uint16_t h = readReg(reg, 0);
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff feff 	bl	8001b34 <readReg>
 8001d36:	4603      	mov	r3, r0
 8001d38:	81fb      	strh	r3, [r7, #14]
	uint16_t m = readReg(reg, 1);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fef8 	bl	8001b34 <readReg>
 8001d44:	4603      	mov	r3, r0
 8001d46:	81bb      	strh	r3, [r7, #12]
	uint16_t l = readReg(reg, 2);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fef1 	bl	8001b34 <readReg>
 8001d52:	4603      	mov	r3, r0
 8001d54:	817b      	strh	r3, [r7, #10]
	return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	061a      	lsls	r2, r3, #24
 8001d5a:	89bb      	ldrh	r3, [r7, #12]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	897a      	ldrh	r2, [r7, #10]
 8001d62:	0a12      	lsrs	r2, r2, #8
 8001d64:	b292      	uxth	r2, r2
 8001d66:	4313      	orrs	r3, r2
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <setAddrWindow>:
{
	pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}

static void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	80fb      	strh	r3, [r7, #6]
 8001d82:	4603      	mov	r3, r0
 8001d84:	80bb      	strh	r3, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8001d8e:	4b80      	ldr	r3, [pc, #512]	@ (8001f90 <setAddrWindow+0x220>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	f249 3227 	movw	r2, #37671	@ 0x9327
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d117      	bne.n	8001dca <setAddrWindow+0x5a>
		if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8001d9a:	4b7e      	ldr	r3, [pc, #504]	@ (8001f94 <setAddrWindow+0x224>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d107      	bne.n	8001db2 <setAddrWindow+0x42>
 8001da2:	88bb      	ldrh	r3, [r7, #4]
 8001da4:	3320      	adds	r3, #32
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	80bb      	strh	r3, [r7, #4]
 8001daa:	883b      	ldrh	r3, [r7, #0]
 8001dac:	3320      	adds	r3, #32
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	803b      	strh	r3, [r7, #0]
		if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 8001db2:	4b78      	ldr	r3, [pc, #480]	@ (8001f94 <setAddrWindow+0x224>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d107      	bne.n	8001dca <setAddrWindow+0x5a>
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	3320      	adds	r3, #32
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	80fb      	strh	r3, [r7, #6]
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	3320      	adds	r3, #32
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	807b      	strh	r3, [r7, #2]
	}
#endif
#if 1
	if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8001dca:	4b71      	ldr	r3, [pc, #452]	@ (8001f90 <setAddrWindow+0x220>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d128      	bne.n	8001e28 <setAddrWindow+0xb8>
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001f94 <setAddrWindow+0x224>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d022      	beq.n	8001e28 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	81fb      	strh	r3, [r7, #14]
 8001dec:	883a      	ldrh	r2, [r7, #0]
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8001df6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <setAddrWindow+0x9c>
 8001dfe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	803b      	strh	r3, [r7, #0]
 8001e0a:	e00d      	b.n	8001e28 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8001e0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <setAddrWindow+0xb8>
 8001e14:	887a      	ldrh	r2, [r7, #2]
 8001e16:	89bb      	ldrh	r3, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	807b      	strh	r3, [r7, #2]
 8001e1e:	883a      	ldrh	r2, [r7, #0]
 8001e20:	89bb      	ldrh	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	803b      	strh	r3, [r7, #0]
	}
#endif
	if (_lcd_capable & MIPI_DCS_REV1) {
 8001e28:	4b5b      	ldr	r3, [pc, #364]	@ (8001f98 <setAddrWindow+0x228>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d054      	beq.n	8001ede <setAddrWindow+0x16e>
		WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8001e34:	4b59      	ldr	r3, [pc, #356]	@ (8001f9c <setAddrWindow+0x22c>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b2d8      	uxtb	r0, r3
 8001e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3e:	121b      	asrs	r3, r3, #8
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b2d9      	uxtb	r1, r3
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e4c:	121b      	asrs	r3, r3, #8
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	b2dc      	uxtb	r4, r3
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4623      	mov	r3, r4
 8001e5a:	f7ff fccb 	bl	80017f4 <WriteCmdParam4>
		WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8001e5e:	4b50      	ldr	r3, [pc, #320]	@ (8001fa0 <setAddrWindow+0x230>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b2d8      	uxtb	r0, r3
 8001e64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e68:	121b      	asrs	r3, r3, #8
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	b2d9      	uxtb	r1, r3
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e76:	121b      	asrs	r3, r3, #8
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	b2dc      	uxtb	r4, r3
 8001e7c:	883b      	ldrh	r3, [r7, #0]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4623      	mov	r3, r4
 8001e84:	f7ff fcb6 	bl	80017f4 <WriteCmdParam4>
		if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8001e88:	4b46      	ldr	r3, [pc, #280]	@ (8001fa4 <setAddrWindow+0x234>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d07b      	beq.n	8001f88 <setAddrWindow+0x218>
 8001e90:	4b3f      	ldr	r3, [pc, #252]	@ (8001f90 <setAddrWindow+0x220>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	2b65      	cmp	r3, #101	@ 0x65
 8001e96:	d177      	bne.n	8001f88 <setAddrWindow+0x218>
			uint8_t d[2];
			d[0] = x >> 8; d[1] = x;
 8001e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9c:	121b      	asrs	r3, r3, #8
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	723b      	strb	r3, [r7, #8]
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	727b      	strb	r3, [r7, #9]
			WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa8 <setAddrWindow+0x238>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	f107 0208 	add.w	r2, r7, #8
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff facf 	bl	8001458 <WriteCmdParamN>
			d[0] = y >> 8; d[1] = y;
 8001eba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ebe:	121b      	asrs	r3, r3, #8
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	723b      	strb	r3, [r7, #8]
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	727b      	strb	r3, [r7, #9]
			WriteCmdParamN(_MP, 2, d);
 8001ecc:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <setAddrWindow+0x23c>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	f107 0208 	add.w	r2, r7, #8
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fabe 	bl	8001458 <WriteCmdParamN>
			tft_writeCmdData(_SP, y);
			tft_writeCmdData(_EC, x1);
			tft_writeCmdData(_EP, y1);
		}
	}
}
 8001edc:	e054      	b.n	8001f88 <setAddrWindow+0x218>
		tft_writeCmdData(_MC, x);
 8001ede:	4b32      	ldr	r3, [pc, #200]	@ (8001fa8 <setAddrWindow+0x238>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f8d2 	bl	8002090 <tft_writeCmdData>
		tft_writeCmdData(_MP, y);
 8001eec:	4b2f      	ldr	r3, [pc, #188]	@ (8001fac <setAddrWindow+0x23c>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	88ba      	ldrh	r2, [r7, #4]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f8cb 	bl	8002090 <tft_writeCmdData>
		if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8001efa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001efe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d105      	bne.n	8001f12 <setAddrWindow+0x1a2>
 8001f06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d03a      	beq.n	8001f88 <setAddrWindow+0x218>
			if (_lcd_capable & XSA_XEA_16BIT) {
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <setAddrWindow+0x228>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d018      	beq.n	8001f50 <setAddrWindow+0x1e0>
				if (rotation & 1)
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <setAddrWindow+0x224>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <setAddrWindow+0x1ce>
					y1 = y = (y1 << 8) | y;
 8001f2a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	80bb      	strh	r3, [r7, #4]
 8001f38:	88bb      	ldrh	r3, [r7, #4]
 8001f3a:	803b      	strh	r3, [r7, #0]
 8001f3c:	e008      	b.n	8001f50 <setAddrWindow+0x1e0>
					x1 = x = (x1 << 8) | x;
 8001f3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	80fb      	strh	r3, [r7, #6]
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	807b      	strh	r3, [r7, #2]
			tft_writeCmdData(_SC, x);
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <setAddrWindow+0x22c>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	88fa      	ldrh	r2, [r7, #6]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f899 	bl	8002090 <tft_writeCmdData>
			tft_writeCmdData(_SP, y);
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <setAddrWindow+0x230>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	88ba      	ldrh	r2, [r7, #4]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f892 	bl	8002090 <tft_writeCmdData>
			tft_writeCmdData(_EC, x1);
 8001f6c:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <setAddrWindow+0x240>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f88b 	bl	8002090 <tft_writeCmdData>
			tft_writeCmdData(_EP, y1);
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <setAddrWindow+0x244>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	883a      	ldrh	r2, [r7, #0]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f884 	bl	8002090 <tft_writeCmdData>
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	200000d8 	.word	0x200000d8
 8001f94:	200000d2 	.word	0x200000d2
 8001f98:	200000d6 	.word	0x200000d6
 8001f9c:	200000e4 	.word	0x200000e4
 8001fa0:	200000e8 	.word	0x200000e8
 8001fa4:	200000cb 	.word	0x200000cb
 8001fa8:	200000de 	.word	0x200000de
 8001fac:	200000e0 	.word	0x200000e0
 8001fb0:	200000e6 	.word	0x200000e6
 8001fb4:	200000ea 	.word	0x200000ea

08001fb8 <writePixel>:

static void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	80bb      	strh	r3, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	807b      	strh	r3, [r7, #2]
	tft_drawPixel(x, y, color);
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f001 fdf9 	bl	8003bcc <tft_drawPixel>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <delay>:
 * @details Precisa ser customizada de acordo com o microcontrolador
 *
 * @param time unidade de us
 */
static void delay (uint32_t time)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <delay+0x2c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001ff4:	bf00      	nop
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <delay+0x2c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d8f9      	bhi.n	8001ff6 <delay+0x12>
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	20000038 	.word	0x20000038

08002014 <tft_color565>:

/* Funções públicas **********************************************************/
uint16_t tft_color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	460b      	mov	r3, r1
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	4613      	mov	r3, r2
 8002024:	717b      	strb	r3, [r7, #5]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21b      	sxth	r3, r3
 800202c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002030:	f023 0307 	bic.w	r3, r3, #7
 8002034:	b21a      	sxth	r2, r3
 8002036:	79bb      	ldrb	r3, [r7, #6]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	b21b      	sxth	r3, r3
 800203c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002040:	b21b      	sxth	r3, r3
 8002042:	4313      	orrs	r3, r2
 8002044:	b21a      	sxth	r2, r3
 8002046:	797b      	ldrb	r3, [r7, #5]
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	b21b      	sxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b21b      	sxth	r3, r3
 8002052:	b29b      	uxth	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <tft_readPixel>:

uint16_t tft_readPixel(int16_t x, int16_t y) { uint16_t color; tft_readGRAM(x, y, &color, 1, 1); return color; }
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
 8002066:	4603      	mov	r3, r0
 8002068:	460a      	mov	r2, r1
 800206a:	80fb      	strh	r3, [r7, #6]
 800206c:	4613      	mov	r3, r2
 800206e:	80bb      	strh	r3, [r7, #4]
 8002070:	f107 020e 	add.w	r2, r7, #14
 8002074:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002078:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800207c:	2301      	movs	r3, #1
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	f000 f817 	bl	80020b4 <tft_readGRAM>
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <tft_writeCmdData>:

void tft_writeCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
 80020a0:	88ba      	ldrh	r2, [r7, #4]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f880 	bl	80011ac <writecmddata>
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <tft_readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t tft_readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60ba      	str	r2, [r7, #8]
 80020bc:	461a      	mov	r2, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	81fb      	strh	r3, [r7, #14]
 80020c2:	460b      	mov	r3, r1
 80020c4:	81bb      	strh	r3, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
	uint16_t ret, dummy, _MR = _MW;
 80020ca:	4b1c      	ldr	r3, [pc, #112]	@ (800213c <tft_readGRAM+0x88>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t n = w * h, row = 0, col = 0;
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80020d4:	fb12 f303 	smulbb	r3, r2, r3
 80020d8:	b29b      	uxth	r3, r3
 80020da:	847b      	strh	r3, [r7, #34]	@ 0x22
 80020dc:	2300      	movs	r3, #0
 80020de:	843b      	strh	r3, [r7, #32]
 80020e0:	2300      	movs	r3, #0
 80020e2:	83fb      	strh	r3, [r7, #30]
	uint8_t r, g, b, tmp;

	if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 80020e4:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <tft_readGRAM+0x8c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <tft_readGRAM+0x48>
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <tft_readGRAM+0x90>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <tft_readGRAM+0x48>
		_MR = 0x2E;
 80020f8:	232e      	movs	r3, #46	@ 0x2e
 80020fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (_lcd_ID == 0x1602)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <tft_readGRAM+0x94>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <tft_readGRAM+0x58>
		_MR = 0x2E;
 8002108:	232e      	movs	r3, #46	@ 0x2e
 800210a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 800210c:	89fa      	ldrh	r2, [r7, #14]
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	4413      	add	r3, r2
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	b21c      	sxth	r4, r3
 800211a:	89ba      	ldrh	r2, [r7, #12]
 800211c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800211e:	4413      	add	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29b      	uxth	r3, r3
 8002126:	b21b      	sxth	r3, r3
 8002128:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800212c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002130:	4622      	mov	r2, r4
 8002132:	f7ff fe1d 	bl	8001d70 <setAddrWindow>
	while (n > 0) {
 8002136:	f000 bd86 	b.w	8002c46 <tft_readGRAM+0xb92>
 800213a:	bf00      	nop
 800213c:	200000e2 	.word	0x200000e2
 8002140:	200000cb 	.word	0x200000cb
 8002144:	200000d6 	.word	0x200000d6
 8002148:	200000d8 	.word	0x200000d8
		if (!(_lcd_capable & MIPI_DCS_REV1)) {
 800214c:	4ba0      	ldr	r3, [pc, #640]	@ (80023d0 <tft_readGRAM+0x31c>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <tft_readGRAM+0xc8>
			tft_writeCmdData(_MC, x + col);
 8002158:	4b9e      	ldr	r3, [pc, #632]	@ (80023d4 <tft_readGRAM+0x320>)
 800215a:	8818      	ldrh	r0, [r3, #0]
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	8bfb      	ldrh	r3, [r7, #30]
 8002160:	4413      	add	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	4619      	mov	r1, r3
 8002166:	f7ff ff93 	bl	8002090 <tft_writeCmdData>
			tft_writeCmdData(_MP, y + row);
 800216a:	4b9b      	ldr	r3, [pc, #620]	@ (80023d8 <tft_readGRAM+0x324>)
 800216c:	8818      	ldrh	r0, [r3, #0]
 800216e:	89ba      	ldrh	r2, [r7, #12]
 8002170:	8c3b      	ldrh	r3, [r7, #32]
 8002172:	4413      	add	r3, r2
 8002174:	b29b      	uxth	r3, r3
 8002176:	4619      	mov	r1, r3
 8002178:	f7ff ff8a 	bl	8002090 <tft_writeCmdData>
		}
		CS_ACTIVE;
 800217c:	2101      	movs	r1, #1
 800217e:	4897      	ldr	r0, [pc, #604]	@ (80023dc <tft_readGRAM+0x328>)
 8002180:	f7fe fdce 	bl	8000d20 <PIN_LOW>
		WriteCmd(_MR);
 8002184:	2110      	movs	r1, #16
 8002186:	4896      	ldr	r0, [pc, #600]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002188:	f7fe fdca 	bl	8000d20 <PIN_LOW>
 800218c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	b29b      	uxth	r3, r3
 8002192:	777b      	strb	r3, [r7, #29]
 8002194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002196:	773b      	strb	r3, [r7, #28]
 8002198:	4b91      	ldr	r3, [pc, #580]	@ (80023e0 <tft_readGRAM+0x32c>)
 800219a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800219e:	619a      	str	r2, [r3, #24]
 80021a0:	4b8e      	ldr	r3, [pc, #568]	@ (80023dc <tft_readGRAM+0x328>)
 80021a2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80021a6:	619a      	str	r2, [r3, #24]
 80021a8:	4b8e      	ldr	r3, [pc, #568]	@ (80023e4 <tft_readGRAM+0x330>)
 80021aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021ae:	619a      	str	r2, [r3, #24]
 80021b0:	7f7b      	ldrb	r3, [r7, #29]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80021b8:	7f7b      	ldrb	r3, [r7, #29]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c0:	431a      	orrs	r2, r3
 80021c2:	7f7b      	ldrb	r3, [r7, #29]
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ca:	431a      	orrs	r2, r3
 80021cc:	4b84      	ldr	r3, [pc, #528]	@ (80023e0 <tft_readGRAM+0x32c>)
 80021ce:	619a      	str	r2, [r3, #24]
 80021d0:	7f7b      	ldrb	r3, [r7, #29]
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80021d8:	7f7b      	ldrb	r3, [r7, #29]
 80021da:	105b      	asrs	r3, r3, #1
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	431a      	orrs	r2, r3
 80021e2:	7f7b      	ldrb	r3, [r7, #29]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	431a      	orrs	r2, r3
 80021ec:	7f7b      	ldrb	r3, [r7, #29]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	431a      	orrs	r2, r3
 80021f4:	4b79      	ldr	r3, [pc, #484]	@ (80023dc <tft_readGRAM+0x328>)
 80021f6:	619a      	str	r2, [r3, #24]
 80021f8:	7f7b      	ldrb	r3, [r7, #29]
 80021fa:	019b      	lsls	r3, r3, #6
 80021fc:	4a79      	ldr	r2, [pc, #484]	@ (80023e4 <tft_readGRAM+0x330>)
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	2102      	movs	r1, #2
 8002206:	4876      	ldr	r0, [pc, #472]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002208:	f7fe fd8a 	bl	8000d20 <PIN_LOW>
 800220c:	2102      	movs	r1, #2
 800220e:	4874      	ldr	r0, [pc, #464]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002210:	f7fe fd86 	bl	8000d20 <PIN_LOW>
 8002214:	2102      	movs	r1, #2
 8002216:	4872      	ldr	r0, [pc, #456]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002218:	f7fe fd82 	bl	8000d20 <PIN_LOW>
 800221c:	2102      	movs	r1, #2
 800221e:	4870      	ldr	r0, [pc, #448]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002220:	f7fe fd8e 	bl	8000d40 <PIN_HIGH>
 8002224:	2102      	movs	r1, #2
 8002226:	486e      	ldr	r0, [pc, #440]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002228:	f7fe fd8a 	bl	8000d40 <PIN_HIGH>
 800222c:	4b6c      	ldr	r3, [pc, #432]	@ (80023e0 <tft_readGRAM+0x32c>)
 800222e:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8002232:	619a      	str	r2, [r3, #24]
 8002234:	4b69      	ldr	r3, [pc, #420]	@ (80023dc <tft_readGRAM+0x328>)
 8002236:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	4b69      	ldr	r3, [pc, #420]	@ (80023e4 <tft_readGRAM+0x330>)
 800223e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002242:	619a      	str	r2, [r3, #24]
 8002244:	7f3b      	ldrb	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800224c:	7f3b      	ldrb	r3, [r7, #28]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	431a      	orrs	r2, r3
 8002256:	7f3b      	ldrb	r3, [r7, #28]
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800225e:	431a      	orrs	r2, r3
 8002260:	4b5f      	ldr	r3, [pc, #380]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	7f3b      	ldrb	r3, [r7, #28]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800226c:	7f3b      	ldrb	r3, [r7, #28]
 800226e:	105b      	asrs	r3, r3, #1
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	431a      	orrs	r2, r3
 8002276:	7f3b      	ldrb	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	7f3b      	ldrb	r3, [r7, #28]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	431a      	orrs	r2, r3
 8002288:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <tft_readGRAM+0x328>)
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	7f3b      	ldrb	r3, [r7, #28]
 800228e:	019b      	lsls	r3, r3, #6
 8002290:	4a54      	ldr	r2, [pc, #336]	@ (80023e4 <tft_readGRAM+0x330>)
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	2102      	movs	r1, #2
 800229a:	4851      	ldr	r0, [pc, #324]	@ (80023e0 <tft_readGRAM+0x32c>)
 800229c:	f7fe fd40 	bl	8000d20 <PIN_LOW>
 80022a0:	2102      	movs	r1, #2
 80022a2:	484f      	ldr	r0, [pc, #316]	@ (80023e0 <tft_readGRAM+0x32c>)
 80022a4:	f7fe fd3c 	bl	8000d20 <PIN_LOW>
 80022a8:	2102      	movs	r1, #2
 80022aa:	484d      	ldr	r0, [pc, #308]	@ (80023e0 <tft_readGRAM+0x32c>)
 80022ac:	f7fe fd38 	bl	8000d20 <PIN_LOW>
 80022b0:	2102      	movs	r1, #2
 80022b2:	484b      	ldr	r0, [pc, #300]	@ (80023e0 <tft_readGRAM+0x32c>)
 80022b4:	f7fe fd44 	bl	8000d40 <PIN_HIGH>
 80022b8:	2102      	movs	r1, #2
 80022ba:	4849      	ldr	r0, [pc, #292]	@ (80023e0 <tft_readGRAM+0x32c>)
 80022bc:	f7fe fd40 	bl	8000d40 <PIN_HIGH>
 80022c0:	2110      	movs	r1, #16
 80022c2:	4847      	ldr	r0, [pc, #284]	@ (80023e0 <tft_readGRAM+0x32c>)
 80022c4:	f7fe fd3c 	bl	8000d40 <PIN_HIGH>
		setReadDir();
 80022c8:	f7fe fe14 	bl	8000ef4 <setReadDir>
		if (_lcd_capable & READ_NODUMMY) {
 80022cc:	4b40      	ldr	r3, [pc, #256]	@ (80023d0 <tft_readGRAM+0x31c>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 816d 	bne.w	80025b4 <tft_readGRAM+0x500>
			;
		} else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 80022da:	4b3d      	ldr	r3, [pc, #244]	@ (80023d0 <tft_readGRAM+0x31c>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <tft_readGRAM+0x23e>
 80022e6:	4b40      	ldr	r3, [pc, #256]	@ (80023e8 <tft_readGRAM+0x334>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	f241 2289 	movw	r2, #4745	@ 0x1289
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d17c      	bne.n	80023ec <tft_readGRAM+0x338>
			READ_8(r);
 80022f2:	2101      	movs	r1, #1
 80022f4:	483a      	ldr	r0, [pc, #232]	@ (80023e0 <tft_readGRAM+0x32c>)
 80022f6:	f7fe fd23 	bl	8000d40 <PIN_HIGH>
 80022fa:	2101      	movs	r1, #1
 80022fc:	4838      	ldr	r0, [pc, #224]	@ (80023e0 <tft_readGRAM+0x32c>)
 80022fe:	f7fe fd0f 	bl	8000d20 <PIN_LOW>
 8002302:	2101      	movs	r1, #1
 8002304:	4836      	ldr	r0, [pc, #216]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002306:	f7fe fd0b 	bl	8000d20 <PIN_LOW>
 800230a:	2101      	movs	r1, #1
 800230c:	4834      	ldr	r0, [pc, #208]	@ (80023e0 <tft_readGRAM+0x32c>)
 800230e:	f7fe fd07 	bl	8000d20 <PIN_LOW>
 8002312:	2101      	movs	r1, #1
 8002314:	4832      	ldr	r0, [pc, #200]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002316:	f7fe fd03 	bl	8000d20 <PIN_LOW>
 800231a:	2101      	movs	r1, #1
 800231c:	4830      	ldr	r0, [pc, #192]	@ (80023e0 <tft_readGRAM+0x32c>)
 800231e:	f7fe fcff 	bl	8000d20 <PIN_LOW>
 8002322:	2101      	movs	r1, #1
 8002324:	482e      	ldr	r0, [pc, #184]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002326:	f7fe fcfb 	bl	8000d20 <PIN_LOW>
 800232a:	2101      	movs	r1, #1
 800232c:	482c      	ldr	r0, [pc, #176]	@ (80023e0 <tft_readGRAM+0x32c>)
 800232e:	f7fe fcf7 	bl	8000d20 <PIN_LOW>
 8002332:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <tft_readGRAM+0x32c>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <tft_readGRAM+0x328>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <tft_readGRAM+0x328>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <tft_readGRAM+0x328>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <tft_readGRAM+0x328>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4313      	orrs	r3, r2
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <tft_readGRAM+0x32c>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	b2db      	uxtb	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <tft_readGRAM+0x330>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <tft_readGRAM+0x32c>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	0a5b      	lsrs	r3, r3, #9
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	75fb      	strb	r3, [r7, #23]
 80023be:	2101      	movs	r1, #1
 80023c0:	4807      	ldr	r0, [pc, #28]	@ (80023e0 <tft_readGRAM+0x32c>)
 80023c2:	f7fe fcbd 	bl	8000d40 <PIN_HIGH>
 80023c6:	2101      	movs	r1, #1
 80023c8:	4805      	ldr	r0, [pc, #20]	@ (80023e0 <tft_readGRAM+0x32c>)
 80023ca:	f7fe fcb9 	bl	8000d40 <PIN_HIGH>
 80023ce:	e0f1      	b.n	80025b4 <tft_readGRAM+0x500>
 80023d0:	200000d6 	.word	0x200000d6
 80023d4:	200000de 	.word	0x200000de
 80023d8:	200000e0 	.word	0x200000e0
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40020800 	.word	0x40020800
 80023e8:	200000d8 	.word	0x200000d8
		} else {
			READ_16(dummy);
 80023ec:	2101      	movs	r1, #1
 80023ee:	48ac      	ldr	r0, [pc, #688]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80023f0:	f7fe fca6 	bl	8000d40 <PIN_HIGH>
 80023f4:	2101      	movs	r1, #1
 80023f6:	48aa      	ldr	r0, [pc, #680]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80023f8:	f7fe fc92 	bl	8000d20 <PIN_LOW>
 80023fc:	2101      	movs	r1, #1
 80023fe:	48a8      	ldr	r0, [pc, #672]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002400:	f7fe fc8e 	bl	8000d20 <PIN_LOW>
 8002404:	2101      	movs	r1, #1
 8002406:	48a6      	ldr	r0, [pc, #664]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002408:	f7fe fc8a 	bl	8000d20 <PIN_LOW>
 800240c:	2101      	movs	r1, #1
 800240e:	48a4      	ldr	r0, [pc, #656]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002410:	f7fe fc86 	bl	8000d20 <PIN_LOW>
 8002414:	2101      	movs	r1, #1
 8002416:	48a2      	ldr	r0, [pc, #648]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002418:	f7fe fc82 	bl	8000d20 <PIN_LOW>
 800241c:	2101      	movs	r1, #1
 800241e:	48a0      	ldr	r0, [pc, #640]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002420:	f7fe fc7e 	bl	8000d20 <PIN_LOW>
 8002424:	2101      	movs	r1, #1
 8002426:	489e      	ldr	r0, [pc, #632]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002428:	f7fe fc7a 	bl	8000d20 <PIN_LOW>
 800242c:	4b9c      	ldr	r3, [pc, #624]	@ (80026a0 <tft_readGRAM+0x5ec>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b9a      	ldr	r3, [pc, #616]	@ (80026a4 <tft_readGRAM+0x5f0>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b95      	ldr	r3, [pc, #596]	@ (80026a4 <tft_readGRAM+0x5f0>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b90      	ldr	r3, [pc, #576]	@ (80026a4 <tft_readGRAM+0x5f0>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b8c      	ldr	r3, [pc, #560]	@ (80026a4 <tft_readGRAM+0x5f0>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b87      	ldr	r3, [pc, #540]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b84      	ldr	r3, [pc, #528]	@ (80026a8 <tft_readGRAM+0x5f4>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b7e      	ldr	r3, [pc, #504]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	76fb      	strb	r3, [r7, #27]
 80024b8:	2101      	movs	r1, #1
 80024ba:	4879      	ldr	r0, [pc, #484]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024bc:	f7fe fc40 	bl	8000d40 <PIN_HIGH>
 80024c0:	2101      	movs	r1, #1
 80024c2:	4877      	ldr	r0, [pc, #476]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024c4:	f7fe fc3c 	bl	8000d40 <PIN_HIGH>
 80024c8:	2101      	movs	r1, #1
 80024ca:	4875      	ldr	r0, [pc, #468]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024cc:	f7fe fc38 	bl	8000d40 <PIN_HIGH>
 80024d0:	2101      	movs	r1, #1
 80024d2:	4873      	ldr	r0, [pc, #460]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024d4:	f7fe fc24 	bl	8000d20 <PIN_LOW>
 80024d8:	2101      	movs	r1, #1
 80024da:	4871      	ldr	r0, [pc, #452]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024dc:	f7fe fc20 	bl	8000d20 <PIN_LOW>
 80024e0:	2101      	movs	r1, #1
 80024e2:	486f      	ldr	r0, [pc, #444]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024e4:	f7fe fc1c 	bl	8000d20 <PIN_LOW>
 80024e8:	2101      	movs	r1, #1
 80024ea:	486d      	ldr	r0, [pc, #436]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024ec:	f7fe fc18 	bl	8000d20 <PIN_LOW>
 80024f0:	2101      	movs	r1, #1
 80024f2:	486b      	ldr	r0, [pc, #428]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024f4:	f7fe fc14 	bl	8000d20 <PIN_LOW>
 80024f8:	2101      	movs	r1, #1
 80024fa:	4869      	ldr	r0, [pc, #420]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80024fc:	f7fe fc10 	bl	8000d20 <PIN_LOW>
 8002500:	2101      	movs	r1, #1
 8002502:	4867      	ldr	r0, [pc, #412]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002504:	f7fe fc0c 	bl	8000d20 <PIN_LOW>
 8002508:	4b65      	ldr	r3, [pc, #404]	@ (80026a0 <tft_readGRAM+0x5ec>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <tft_readGRAM+0x5f0>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	b29b      	uxth	r3, r3
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	b29b      	uxth	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b5e      	ldr	r3, [pc, #376]	@ (80026a4 <tft_readGRAM+0x5f0>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	b29b      	uxth	r3, r3
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	b29b      	uxth	r3, r3
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	b29b      	uxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b59      	ldr	r3, [pc, #356]	@ (80026a4 <tft_readGRAM+0x5f0>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	b29b      	uxth	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b55      	ldr	r3, [pc, #340]	@ (80026a4 <tft_readGRAM+0x5f0>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	b29b      	uxth	r3, r3
 800255a:	4313      	orrs	r3, r2
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b50      	ldr	r3, [pc, #320]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	b29b      	uxth	r3, r3
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	b29b      	uxth	r3, r3
 800256c:	4313      	orrs	r3, r2
 800256e:	b29a      	uxth	r2, r3
 8002570:	4b4d      	ldr	r3, [pc, #308]	@ (80026a8 <tft_readGRAM+0x5f4>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	b29b      	uxth	r3, r3
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	b29b      	uxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b47      	ldr	r3, [pc, #284]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	b29b      	uxth	r3, r3
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b29b      	uxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	833b      	strh	r3, [r7, #24]
 8002594:	2101      	movs	r1, #1
 8002596:	4842      	ldr	r0, [pc, #264]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002598:	f7fe fbd2 	bl	8000d40 <PIN_HIGH>
 800259c:	2101      	movs	r1, #1
 800259e:	4840      	ldr	r0, [pc, #256]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025a0:	f7fe fbce 	bl	8000d40 <PIN_HIGH>
 80025a4:	7efb      	ldrb	r3, [r7, #27]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	833b      	strh	r3, [r7, #24]
		}
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 80025b4:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <tft_readGRAM+0x5f8>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f241 5211 	movw	r2, #5393	@ 0x1511
 80025bc:	4293      	cmp	r3, r2
 80025be:	f040 830f 	bne.w	8002be0 <tft_readGRAM+0xb2c>
 80025c2:	2101      	movs	r1, #1
 80025c4:	4836      	ldr	r0, [pc, #216]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025c6:	f7fe fbbb 	bl	8000d40 <PIN_HIGH>
 80025ca:	2101      	movs	r1, #1
 80025cc:	4834      	ldr	r0, [pc, #208]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025ce:	f7fe fba7 	bl	8000d20 <PIN_LOW>
 80025d2:	2101      	movs	r1, #1
 80025d4:	4832      	ldr	r0, [pc, #200]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025d6:	f7fe fba3 	bl	8000d20 <PIN_LOW>
 80025da:	2101      	movs	r1, #1
 80025dc:	4830      	ldr	r0, [pc, #192]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025de:	f7fe fb9f 	bl	8000d20 <PIN_LOW>
 80025e2:	2101      	movs	r1, #1
 80025e4:	482e      	ldr	r0, [pc, #184]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025e6:	f7fe fb9b 	bl	8000d20 <PIN_LOW>
 80025ea:	2101      	movs	r1, #1
 80025ec:	482c      	ldr	r0, [pc, #176]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025ee:	f7fe fb97 	bl	8000d20 <PIN_LOW>
 80025f2:	2101      	movs	r1, #1
 80025f4:	482a      	ldr	r0, [pc, #168]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025f6:	f7fe fb93 	bl	8000d20 <PIN_LOW>
 80025fa:	2101      	movs	r1, #1
 80025fc:	4828      	ldr	r0, [pc, #160]	@ (80026a0 <tft_readGRAM+0x5ec>)
 80025fe:	f7fe fb8f 	bl	8000d20 <PIN_LOW>
 8002602:	4b27      	ldr	r3, [pc, #156]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <tft_readGRAM+0x5f0>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <tft_readGRAM+0x5f0>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <tft_readGRAM+0x5f0>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <tft_readGRAM+0x5f0>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <tft_readGRAM+0x5ec>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4313      	orrs	r3, r2
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <tft_readGRAM+0x5f4>)
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <tft_readGRAM+0x5ec>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	0a5b      	lsrs	r3, r3, #9
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	75fb      	strb	r3, [r7, #23]
 800268e:	2101      	movs	r1, #1
 8002690:	4803      	ldr	r0, [pc, #12]	@ (80026a0 <tft_readGRAM+0x5ec>)
 8002692:	f7fe fb55 	bl	8000d40 <PIN_HIGH>
 8002696:	2101      	movs	r1, #1
 8002698:	4801      	ldr	r0, [pc, #4]	@ (80026a0 <tft_readGRAM+0x5ec>)
 800269a:	f7fe fb51 	bl	8000d40 <PIN_HIGH>
		while (n)
 800269e:	e29f      	b.n	8002be0 <tft_readGRAM+0xb2c>
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020800 	.word	0x40020800
 80026ac:	200000d8 	.word	0x200000d8
		{
			if (_lcd_capable & READ_24BITS)
 80026b0:	4bab      	ldr	r3, [pc, #684]	@ (8002960 <tft_readGRAM+0x8ac>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 816b 	beq.w	8002994 <tft_readGRAM+0x8e0>
			{
				READ_8(r);
 80026be:	2101      	movs	r1, #1
 80026c0:	48a8      	ldr	r0, [pc, #672]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026c2:	f7fe fb3d 	bl	8000d40 <PIN_HIGH>
 80026c6:	2101      	movs	r1, #1
 80026c8:	48a6      	ldr	r0, [pc, #664]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026ca:	f7fe fb29 	bl	8000d20 <PIN_LOW>
 80026ce:	2101      	movs	r1, #1
 80026d0:	48a4      	ldr	r0, [pc, #656]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026d2:	f7fe fb25 	bl	8000d20 <PIN_LOW>
 80026d6:	2101      	movs	r1, #1
 80026d8:	48a2      	ldr	r0, [pc, #648]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026da:	f7fe fb21 	bl	8000d20 <PIN_LOW>
 80026de:	2101      	movs	r1, #1
 80026e0:	48a0      	ldr	r0, [pc, #640]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026e2:	f7fe fb1d 	bl	8000d20 <PIN_LOW>
 80026e6:	2101      	movs	r1, #1
 80026e8:	489e      	ldr	r0, [pc, #632]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026ea:	f7fe fb19 	bl	8000d20 <PIN_LOW>
 80026ee:	2101      	movs	r1, #1
 80026f0:	489c      	ldr	r0, [pc, #624]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026f2:	f7fe fb15 	bl	8000d20 <PIN_LOW>
 80026f6:	2101      	movs	r1, #1
 80026f8:	489a      	ldr	r0, [pc, #616]	@ (8002964 <tft_readGRAM+0x8b0>)
 80026fa:	f7fe fb11 	bl	8000d20 <PIN_LOW>
 80026fe:	4b99      	ldr	r3, [pc, #612]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b96      	ldr	r3, [pc, #600]	@ (8002968 <tft_readGRAM+0x8b4>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b92      	ldr	r3, [pc, #584]	@ (8002968 <tft_readGRAM+0x8b4>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4313      	orrs	r3, r2
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b8d      	ldr	r3, [pc, #564]	@ (8002968 <tft_readGRAM+0x8b4>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b88      	ldr	r3, [pc, #544]	@ (8002968 <tft_readGRAM+0x8b4>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4313      	orrs	r3, r2
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b83      	ldr	r3, [pc, #524]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b81      	ldr	r3, [pc, #516]	@ (800296c <tft_readGRAM+0x8b8>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4313      	orrs	r3, r2
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b7a      	ldr	r3, [pc, #488]	@ (8002964 <tft_readGRAM+0x8b0>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	0a5b      	lsrs	r3, r3, #9
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4313      	orrs	r3, r2
 8002788:	75fb      	strb	r3, [r7, #23]
 800278a:	2101      	movs	r1, #1
 800278c:	4875      	ldr	r0, [pc, #468]	@ (8002964 <tft_readGRAM+0x8b0>)
 800278e:	f7fe fad7 	bl	8000d40 <PIN_HIGH>
 8002792:	2101      	movs	r1, #1
 8002794:	4873      	ldr	r0, [pc, #460]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002796:	f7fe fad3 	bl	8000d40 <PIN_HIGH>
				READ_8(g);
 800279a:	2101      	movs	r1, #1
 800279c:	4871      	ldr	r0, [pc, #452]	@ (8002964 <tft_readGRAM+0x8b0>)
 800279e:	f7fe facf 	bl	8000d40 <PIN_HIGH>
 80027a2:	2101      	movs	r1, #1
 80027a4:	486f      	ldr	r0, [pc, #444]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027a6:	f7fe fabb 	bl	8000d20 <PIN_LOW>
 80027aa:	2101      	movs	r1, #1
 80027ac:	486d      	ldr	r0, [pc, #436]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027ae:	f7fe fab7 	bl	8000d20 <PIN_LOW>
 80027b2:	2101      	movs	r1, #1
 80027b4:	486b      	ldr	r0, [pc, #428]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027b6:	f7fe fab3 	bl	8000d20 <PIN_LOW>
 80027ba:	2101      	movs	r1, #1
 80027bc:	4869      	ldr	r0, [pc, #420]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027be:	f7fe faaf 	bl	8000d20 <PIN_LOW>
 80027c2:	2101      	movs	r1, #1
 80027c4:	4867      	ldr	r0, [pc, #412]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027c6:	f7fe faab 	bl	8000d20 <PIN_LOW>
 80027ca:	2101      	movs	r1, #1
 80027cc:	4865      	ldr	r0, [pc, #404]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027ce:	f7fe faa7 	bl	8000d20 <PIN_LOW>
 80027d2:	2101      	movs	r1, #1
 80027d4:	4863      	ldr	r0, [pc, #396]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027d6:	f7fe faa3 	bl	8000d20 <PIN_LOW>
 80027da:	4b62      	ldr	r3, [pc, #392]	@ (8002964 <tft_readGRAM+0x8b0>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002968 <tft_readGRAM+0x8b4>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002968 <tft_readGRAM+0x8b4>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4b56      	ldr	r3, [pc, #344]	@ (8002968 <tft_readGRAM+0x8b4>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b51      	ldr	r3, [pc, #324]	@ (8002968 <tft_readGRAM+0x8b4>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b4c      	ldr	r3, [pc, #304]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4313      	orrs	r3, r2
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b4a      	ldr	r3, [pc, #296]	@ (800296c <tft_readGRAM+0x8b8>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	0a5b      	lsrs	r3, r3, #9
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4313      	orrs	r3, r2
 8002864:	757b      	strb	r3, [r7, #21]
 8002866:	2101      	movs	r1, #1
 8002868:	483e      	ldr	r0, [pc, #248]	@ (8002964 <tft_readGRAM+0x8b0>)
 800286a:	f7fe fa69 	bl	8000d40 <PIN_HIGH>
 800286e:	2101      	movs	r1, #1
 8002870:	483c      	ldr	r0, [pc, #240]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002872:	f7fe fa65 	bl	8000d40 <PIN_HIGH>
				READ_8(b);
 8002876:	2101      	movs	r1, #1
 8002878:	483a      	ldr	r0, [pc, #232]	@ (8002964 <tft_readGRAM+0x8b0>)
 800287a:	f7fe fa61 	bl	8000d40 <PIN_HIGH>
 800287e:	2101      	movs	r1, #1
 8002880:	4838      	ldr	r0, [pc, #224]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002882:	f7fe fa4d 	bl	8000d20 <PIN_LOW>
 8002886:	2101      	movs	r1, #1
 8002888:	4836      	ldr	r0, [pc, #216]	@ (8002964 <tft_readGRAM+0x8b0>)
 800288a:	f7fe fa49 	bl	8000d20 <PIN_LOW>
 800288e:	2101      	movs	r1, #1
 8002890:	4834      	ldr	r0, [pc, #208]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002892:	f7fe fa45 	bl	8000d20 <PIN_LOW>
 8002896:	2101      	movs	r1, #1
 8002898:	4832      	ldr	r0, [pc, #200]	@ (8002964 <tft_readGRAM+0x8b0>)
 800289a:	f7fe fa41 	bl	8000d20 <PIN_LOW>
 800289e:	2101      	movs	r1, #1
 80028a0:	4830      	ldr	r0, [pc, #192]	@ (8002964 <tft_readGRAM+0x8b0>)
 80028a2:	f7fe fa3d 	bl	8000d20 <PIN_LOW>
 80028a6:	2101      	movs	r1, #1
 80028a8:	482e      	ldr	r0, [pc, #184]	@ (8002964 <tft_readGRAM+0x8b0>)
 80028aa:	f7fe fa39 	bl	8000d20 <PIN_LOW>
 80028ae:	2101      	movs	r1, #1
 80028b0:	482c      	ldr	r0, [pc, #176]	@ (8002964 <tft_readGRAM+0x8b0>)
 80028b2:	f7fe fa35 	bl	8000d20 <PIN_LOW>
 80028b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <tft_readGRAM+0x8b0>)
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b28      	ldr	r3, [pc, #160]	@ (8002968 <tft_readGRAM+0x8b4>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <tft_readGRAM+0x8b4>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002968 <tft_readGRAM+0x8b4>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002968 <tft_readGRAM+0x8b4>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <tft_readGRAM+0x8b0>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <tft_readGRAM+0x8b8>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	0a5b      	lsrs	r3, r3, #9
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	753b      	strb	r3, [r7, #20]
 8002942:	2101      	movs	r1, #1
 8002944:	4807      	ldr	r0, [pc, #28]	@ (8002964 <tft_readGRAM+0x8b0>)
 8002946:	f7fe f9fb 	bl	8000d40 <PIN_HIGH>
 800294a:	2101      	movs	r1, #1
 800294c:	4805      	ldr	r0, [pc, #20]	@ (8002964 <tft_readGRAM+0x8b0>)
 800294e:	f7fe f9f7 	bl	8000d40 <PIN_HIGH>
				if (_lcd_capable & READ_BGR)
 8002952:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <tft_readGRAM+0x8ac>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d011      	beq.n	8002982 <tft_readGRAM+0x8ce>
 800295e:	e007      	b.n	8002970 <tft_readGRAM+0x8bc>
 8002960:	200000d6 	.word	0x200000d6
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40020800 	.word	0x40020800
					ret = tft_color565(b, g, r);
 8002970:	7dfa      	ldrb	r2, [r7, #23]
 8002972:	7d79      	ldrb	r1, [r7, #21]
 8002974:	7d3b      	ldrb	r3, [r7, #20]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fb4c 	bl	8002014 <tft_color565>
 800297c:	4603      	mov	r3, r0
 800297e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002980:	e113      	b.n	8002baa <tft_readGRAM+0xaf6>
				else
					ret = tft_color565(r, g, b);
 8002982:	7d3a      	ldrb	r2, [r7, #20]
 8002984:	7d79      	ldrb	r1, [r7, #21]
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fb43 	bl	8002014 <tft_color565>
 800298e:	4603      	mov	r3, r0
 8002990:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002992:	e10a      	b.n	8002baa <tft_readGRAM+0xaf6>
			} else
			{
				READ_16(ret);
 8002994:	2101      	movs	r1, #1
 8002996:	4895      	ldr	r0, [pc, #596]	@ (8002bec <tft_readGRAM+0xb38>)
 8002998:	f7fe f9d2 	bl	8000d40 <PIN_HIGH>
 800299c:	2101      	movs	r1, #1
 800299e:	4893      	ldr	r0, [pc, #588]	@ (8002bec <tft_readGRAM+0xb38>)
 80029a0:	f7fe f9be 	bl	8000d20 <PIN_LOW>
 80029a4:	2101      	movs	r1, #1
 80029a6:	4891      	ldr	r0, [pc, #580]	@ (8002bec <tft_readGRAM+0xb38>)
 80029a8:	f7fe f9ba 	bl	8000d20 <PIN_LOW>
 80029ac:	2101      	movs	r1, #1
 80029ae:	488f      	ldr	r0, [pc, #572]	@ (8002bec <tft_readGRAM+0xb38>)
 80029b0:	f7fe f9b6 	bl	8000d20 <PIN_LOW>
 80029b4:	2101      	movs	r1, #1
 80029b6:	488d      	ldr	r0, [pc, #564]	@ (8002bec <tft_readGRAM+0xb38>)
 80029b8:	f7fe f9b2 	bl	8000d20 <PIN_LOW>
 80029bc:	2101      	movs	r1, #1
 80029be:	488b      	ldr	r0, [pc, #556]	@ (8002bec <tft_readGRAM+0xb38>)
 80029c0:	f7fe f9ae 	bl	8000d20 <PIN_LOW>
 80029c4:	2101      	movs	r1, #1
 80029c6:	4889      	ldr	r0, [pc, #548]	@ (8002bec <tft_readGRAM+0xb38>)
 80029c8:	f7fe f9aa 	bl	8000d20 <PIN_LOW>
 80029cc:	2101      	movs	r1, #1
 80029ce:	4887      	ldr	r0, [pc, #540]	@ (8002bec <tft_readGRAM+0xb38>)
 80029d0:	f7fe f9a6 	bl	8000d20 <PIN_LOW>
 80029d4:	4b85      	ldr	r3, [pc, #532]	@ (8002bec <tft_readGRAM+0xb38>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b83      	ldr	r3, [pc, #524]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b79      	ldr	r3, [pc, #484]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4313      	orrs	r3, r2
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b75      	ldr	r3, [pc, #468]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4313      	orrs	r3, r2
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b70      	ldr	r3, [pc, #448]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf4 <tft_readGRAM+0xb40>)
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b67      	ldr	r3, [pc, #412]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	0a5b      	lsrs	r3, r3, #9
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	75bb      	strb	r3, [r7, #22]
 8002a60:	2101      	movs	r1, #1
 8002a62:	4862      	ldr	r0, [pc, #392]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a64:	f7fe f96c 	bl	8000d40 <PIN_HIGH>
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4860      	ldr	r0, [pc, #384]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a6c:	f7fe f968 	bl	8000d40 <PIN_HIGH>
 8002a70:	2101      	movs	r1, #1
 8002a72:	485e      	ldr	r0, [pc, #376]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a74:	f7fe f964 	bl	8000d40 <PIN_HIGH>
 8002a78:	2101      	movs	r1, #1
 8002a7a:	485c      	ldr	r0, [pc, #368]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a7c:	f7fe f950 	bl	8000d20 <PIN_LOW>
 8002a80:	2101      	movs	r1, #1
 8002a82:	485a      	ldr	r0, [pc, #360]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a84:	f7fe f94c 	bl	8000d20 <PIN_LOW>
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4858      	ldr	r0, [pc, #352]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a8c:	f7fe f948 	bl	8000d20 <PIN_LOW>
 8002a90:	2101      	movs	r1, #1
 8002a92:	4856      	ldr	r0, [pc, #344]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a94:	f7fe f944 	bl	8000d20 <PIN_LOW>
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4854      	ldr	r0, [pc, #336]	@ (8002bec <tft_readGRAM+0xb38>)
 8002a9c:	f7fe f940 	bl	8000d20 <PIN_LOW>
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4852      	ldr	r0, [pc, #328]	@ (8002bec <tft_readGRAM+0xb38>)
 8002aa4:	f7fe f93c 	bl	8000d20 <PIN_LOW>
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4850      	ldr	r0, [pc, #320]	@ (8002bec <tft_readGRAM+0xb38>)
 8002aac:	f7fe f938 	bl	8000d20 <PIN_LOW>
 8002ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8002bec <tft_readGRAM+0xb38>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b47      	ldr	r3, [pc, #284]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b42      	ldr	r3, [pc, #264]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf0 <tft_readGRAM+0xb3c>)
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4313      	orrs	r3, r2
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b39      	ldr	r3, [pc, #228]	@ (8002bec <tft_readGRAM+0xb38>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <tft_readGRAM+0xb40>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b30      	ldr	r3, [pc, #192]	@ (8002bec <tft_readGRAM+0xb38>)
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	0a5b      	lsrs	r3, r3, #9
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	482b      	ldr	r0, [pc, #172]	@ (8002bec <tft_readGRAM+0xb38>)
 8002b40:	f7fe f8fe 	bl	8000d40 <PIN_HIGH>
 8002b44:	2101      	movs	r1, #1
 8002b46:	4829      	ldr	r0, [pc, #164]	@ (8002bec <tft_readGRAM+0xb38>)
 8002b48:	f7fe f8fa 	bl	8000d40 <PIN_HIGH>
 8002b4c:	7dbb      	ldrb	r3, [r7, #22]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	b21a      	sxth	r2, r3
 8002b52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
				if (_lcd_capable & READ_LOWHIGH)
 8002b5c:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <tft_readGRAM+0xb44>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <tft_readGRAM+0xac8>
					ret = (ret >> 8) | (ret << 8);
 8002b68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b21a      	sxth	r2, r3
 8002b70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
				if (_lcd_capable & READ_BGR)
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <tft_readGRAM+0xb44>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <tft_readGRAM+0xaf6>
					ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 8002b88:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b8c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b94:	0adb      	lsrs	r3, r3, #11
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ba0:	02db      	lsls	r3, r3, #11
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	84fb      	strh	r3, [r7, #38]	@ 0x26
			}
#if defined(SUPPORT_9488_555)
    		if (is555) ret = color555_to_565(ret);
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <tft_readGRAM+0xb48>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <tft_readGRAM+0xb0a>
 8002bb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe f939 	bl	8000e2c <color555_to_565>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif
*block++ = ret;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1c9a      	adds	r2, r3, #2
 8002bc2:	60ba      	str	r2, [r7, #8]
 8002bc4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002bc6:	801a      	strh	r2, [r3, #0]
n--;
 8002bc8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	847b      	strh	r3, [r7, #34]	@ 0x22
if (!(_lcd_capable & AUTO_READINC))
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <tft_readGRAM+0xb44>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00f      	beq.n	8002c00 <tft_readGRAM+0xb4c>
		while (n)
 8002be0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f47f ad63 	bne.w	80026b0 <tft_readGRAM+0x5fc>
 8002bea:	e00a      	b.n	8002c02 <tft_readGRAM+0xb4e>
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	200000d6 	.word	0x200000d6
 8002bfc:	200000cc 	.word	0x200000cc
	break;
 8002c00:	bf00      	nop
		}
		if (++col >= w) {
 8002c02:	8bfb      	ldrh	r3, [r7, #30]
 8002c04:	3301      	adds	r3, #1
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	83fb      	strh	r3, [r7, #30]
 8002c0a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	db0d      	blt.n	8002c32 <tft_readGRAM+0xb7e>
			col = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	83fb      	strh	r3, [r7, #30]
			if (++row >= h)
 8002c1a:	8c3b      	ldrh	r3, [r7, #32]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	843b      	strh	r3, [r7, #32]
 8002c22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002c26:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	db01      	blt.n	8002c32 <tft_readGRAM+0xb7e>
				row = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	843b      	strh	r3, [r7, #32]
		}
		RD_IDLE;
 8002c32:	2101      	movs	r1, #1
 8002c34:	4814      	ldr	r0, [pc, #80]	@ (8002c88 <tft_readGRAM+0xbd4>)
 8002c36:	f7fe f883 	bl	8000d40 <PIN_HIGH>
		CS_IDLE;
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4813      	ldr	r0, [pc, #76]	@ (8002c8c <tft_readGRAM+0xbd8>)
 8002c3e:	f7fe f87f 	bl	8000d40 <PIN_HIGH>
		setWriteDir();
 8002c42:	f7fe f985 	bl	8000f50 <setWriteDir>
	while (n > 0) {
 8002c46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f73f aa7e 	bgt.w	800214c <tft_readGRAM+0x98>
	}
	if (!(_lcd_capable & MIPI_DCS_REV1))
 8002c50:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <tft_readGRAM+0xbdc>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d110      	bne.n	8002c7e <tft_readGRAM+0xbca>
		setAddrWindow(0, 0, width() - 1, height() - 1);
 8002c5c:	f7fe f8ae 	bl	8000dbc <width>
 8002c60:	4603      	mov	r3, r0
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21c      	sxth	r4, r3
 8002c68:	f7fe f8b4 	bl	8000dd4 <height>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	4622      	mov	r2, r4
 8002c76:	2100      	movs	r1, #0
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7ff f879 	bl	8001d70 <setAddrWindow>
	return 0;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	372c      	adds	r7, #44	@ 0x2c
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	200000d6 	.word	0x200000d6

08002c94 <tft_reset>:

void tft_reset(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
	done_reset = 1;
 8002c98:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <tft_reset+0x88>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
	setWriteDir();
 8002c9e:	f7fe f957 	bl	8000f50 <setWriteDir>
	CTL_INIT();
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	481e      	ldr	r0, [pc, #120]	@ (8002d20 <tft_reset+0x8c>)
 8002ca6:	f7fe f871 	bl	8000d8c <PIN_OUTPUT>
 8002caa:	2102      	movs	r1, #2
 8002cac:	481c      	ldr	r0, [pc, #112]	@ (8002d20 <tft_reset+0x8c>)
 8002cae:	f7fe f86d 	bl	8000d8c <PIN_OUTPUT>
 8002cb2:	2110      	movs	r1, #16
 8002cb4:	481a      	ldr	r0, [pc, #104]	@ (8002d20 <tft_reset+0x8c>)
 8002cb6:	f7fe f869 	bl	8000d8c <PIN_OUTPUT>
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4819      	ldr	r0, [pc, #100]	@ (8002d24 <tft_reset+0x90>)
 8002cbe:	f7fe f865 	bl	8000d8c <PIN_OUTPUT>
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	4818      	ldr	r0, [pc, #96]	@ (8002d28 <tft_reset+0x94>)
 8002cc6:	f7fe f861 	bl	8000d8c <PIN_OUTPUT>
	CS_IDLE;
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4815      	ldr	r0, [pc, #84]	@ (8002d24 <tft_reset+0x90>)
 8002cce:	f7fe f837 	bl	8000d40 <PIN_HIGH>
	RD_IDLE;
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4812      	ldr	r0, [pc, #72]	@ (8002d20 <tft_reset+0x8c>)
 8002cd6:	f7fe f833 	bl	8000d40 <PIN_HIGH>
	WR_IDLE;
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4810      	ldr	r0, [pc, #64]	@ (8002d20 <tft_reset+0x8c>)
 8002cde:	f7fe f82f 	bl	8000d40 <PIN_HIGH>
	RESET_IDLE;
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4810      	ldr	r0, [pc, #64]	@ (8002d28 <tft_reset+0x94>)
 8002ce6:	f7fe f82b 	bl	8000d40 <PIN_HIGH>
	delay(50);
 8002cea:	2032      	movs	r0, #50	@ 0x32
 8002cec:	f7ff f97a 	bl	8001fe4 <delay>
	RESET_ACTIVE;
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	480d      	ldr	r0, [pc, #52]	@ (8002d28 <tft_reset+0x94>)
 8002cf4:	f7fe f814 	bl	8000d20 <PIN_LOW>
	delay(100);
 8002cf8:	2064      	movs	r0, #100	@ 0x64
 8002cfa:	f7ff f973 	bl	8001fe4 <delay>
	RESET_IDLE;
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4809      	ldr	r0, [pc, #36]	@ (8002d28 <tft_reset+0x94>)
 8002d02:	f7fe f81d 	bl	8000d40 <PIN_HIGH>
	delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8002d06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d0a:	f7ff f96b 	bl	8001fe4 <delay>
	tft_writeCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 8002d0e:	2100      	movs	r1, #0
 8002d10:	20b0      	movs	r0, #176	@ 0xb0
 8002d12:	f7ff f9bd 	bl	8002090 <tft_writeCmdData>
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200000ca 	.word	0x200000ca
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020800 	.word	0x40020800

08002d2c <tft_init>:

void tft_init(uint16_t ID)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
	int16_t *p16;               //so we can "write" to a const protected variable.
	const uint8_t *table8_ads = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
	int16_t table_size;
	_lcd_xor = 0;
 8002d3e:	4bd2      	ldr	r3, [pc, #840]	@ (8003088 <tft_init+0x35c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]
	switch (_lcd_ID = ID) {
 8002d44:	4ad1      	ldr	r2, [pc, #836]	@ (800308c <tft_init+0x360>)
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	8013      	strh	r3, [r2, #0]
 8002d4a:	4bd0      	ldr	r3, [pc, #832]	@ (800308c <tft_init+0x360>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8002d52:	4293      	cmp	r3, r2
 8002d54:	f000 82c8 	beq.w	80032e8 <tft_init+0x5bc>
 8002d58:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	f300 8302 	bgt.w	8003366 <tft_init+0x63a>
 8002d62:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002d66:	4293      	cmp	r3, r2
 8002d68:	f000 82ee 	beq.w	8003348 <tft_init+0x61c>
 8002d6c:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002d70:	4293      	cmp	r3, r2
 8002d72:	f300 82f8 	bgt.w	8003366 <tft_init+0x63a>
 8002d76:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	f000 82b4 	beq.w	80032e8 <tft_init+0x5bc>
 8002d80:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8002d84:	4293      	cmp	r3, r2
 8002d86:	f300 82ee 	bgt.w	8003366 <tft_init+0x63a>
 8002d8a:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	f000 8235 	beq.w	80031fe <tft_init+0x4d2>
 8002d94:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	f300 82e4 	bgt.w	8003366 <tft_init+0x63a>
 8002d9e:	f249 4288 	movw	r2, #38024	@ 0x9488
 8002da2:	4293      	cmp	r3, r2
 8002da4:	f300 82df 	bgt.w	8003366 <tft_init+0x63a>
 8002da8:	f249 4287 	movw	r2, #38023	@ 0x9487
 8002dac:	4293      	cmp	r3, r2
 8002dae:	f280 8284 	bge.w	80032ba <tft_init+0x58e>
 8002db2:	f249 4286 	movw	r2, #38022	@ 0x9486
 8002db6:	4293      	cmp	r3, r2
 8002db8:	f000 8265 	beq.w	8003286 <tft_init+0x55a>
 8002dbc:	f249 4286 	movw	r2, #38022	@ 0x9486
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	f300 82d0 	bgt.w	8003366 <tft_init+0x63a>
 8002dc6:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	f000 8244 	beq.w	8003258 <tft_init+0x52c>
 8002dd0:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	f300 82c6 	bgt.w	8003366 <tft_init+0x63a>
 8002dda:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f300 82c1 	bgt.w	8003366 <tft_init+0x63a>
 8002de4:	f249 3202 	movw	r2, #37634	@ 0x9302
 8002de8:	4293      	cmp	r3, r2
 8002dea:	f280 80a5 	bge.w	8002f38 <tft_init+0x20c>
 8002dee:	f249 0290 	movw	r2, #37008	@ 0x9090
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f000 818b 	beq.w	800310e <tft_init+0x3e2>
 8002df8:	f249 0290 	movw	r2, #37008	@ 0x9090
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f300 82b2 	bgt.w	8003366 <tft_init+0x63a>
 8002e02:	f248 3257 	movw	r2, #33623	@ 0x8357
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f000 817c 	beq.w	8003104 <tft_init+0x3d8>
 8002e0c:	f248 3257 	movw	r2, #33623	@ 0x8357
 8002e10:	4293      	cmp	r3, r2
 8002e12:	f300 82a8 	bgt.w	8003366 <tft_init+0x63a>
 8002e16:	f248 0231 	movw	r2, #32817	@ 0x8031
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f000 8169 	beq.w	80030f2 <tft_init+0x3c6>
 8002e20:	f248 0231 	movw	r2, #32817	@ 0x8031
 8002e24:	4293      	cmp	r3, r2
 8002e26:	f300 829e 	bgt.w	8003366 <tft_init+0x63a>
 8002e2a:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f000 823e 	beq.w	80032b0 <tft_init+0x584>
 8002e34:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	f300 8294 	bgt.w	8003366 <tft_init+0x63a>
 8002e3e:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f000 8280 	beq.w	8003348 <tft_init+0x61c>
 8002e48:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	f300 828a 	bgt.w	8003366 <tft_init+0x63a>
 8002e52:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002e56:	4293      	cmp	r3, r2
 8002e58:	f000 8142 	beq.w	80030e0 <tft_init+0x3b4>
 8002e5c:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002e60:	4293      	cmp	r3, r2
 8002e62:	f300 8280 	bgt.w	8003366 <tft_init+0x63a>
 8002e66:	f646 0209 	movw	r2, #26633	@ 0x6809
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	f000 8190 	beq.w	8003190 <tft_init+0x464>
 8002e70:	f646 0209 	movw	r2, #26633	@ 0x6809
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f300 8276 	bgt.w	8003366 <tft_init+0x63a>
 8002e7a:	f245 4208 	movw	r2, #21512	@ 0x5408
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f000 8176 	beq.w	8003170 <tft_init+0x444>
 8002e84:	f245 4208 	movw	r2, #21512	@ 0x5408
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	f300 826c 	bgt.w	8003366 <tft_init+0x63a>
 8002e8e:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002e92:	4293      	cmp	r3, r2
 8002e94:	f000 810f 	beq.w	80030b6 <tft_init+0x38a>
 8002e98:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	f300 8262 	bgt.w	8003366 <tft_init+0x63a>
 8002ea2:	f242 0253 	movw	r2, #8275	@ 0x2053
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f000 81a4 	beq.w	80031f4 <tft_init+0x4c8>
 8002eac:	f242 0253 	movw	r2, #8275	@ 0x2053
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	f300 8258 	bgt.w	8003366 <tft_init+0x63a>
 8002eb6:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	f000 8191 	beq.w	80031e2 <tft_init+0x4b6>
 8002ec0:	f241 6202 	movw	r2, #5634	@ 0x1602
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f300 824e 	bgt.w	8003366 <tft_init+0x63a>
 8002eca:	f241 5281 	movw	r2, #5505	@ 0x1581
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	f000 81bd 	beq.w	800324e <tft_init+0x522>
 8002ed4:	f241 5281 	movw	r2, #5505	@ 0x1581
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	f300 8244 	bgt.w	8003366 <tft_init+0x63a>
 8002ede:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	f000 80de 	beq.w	80030a4 <tft_init+0x378>
 8002ee8:	f241 5226 	movw	r2, #5414	@ 0x1526
 8002eec:	4293      	cmp	r3, r2
 8002eee:	f300 823a 	bgt.w	8003366 <tft_init+0x63a>
 8002ef2:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8002ef6:	f000 80bd 	beq.w	8003074 <tft_init+0x348>
 8002efa:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8002efe:	f300 8232 	bgt.w	8003366 <tft_init+0x63a>
 8002f02:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f000 80a0 	beq.w	800304c <tft_init+0x320>
 8002f0c:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002f10:	4293      	cmp	r3, r2
 8002f12:	f300 8228 	bgt.w	8003366 <tft_init+0x63a>
 8002f16:	f241 5205 	movw	r2, #5381	@ 0x1505
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	f000 812d 	beq.w	800317a <tft_init+0x44e>
 8002f20:	f241 5205 	movw	r2, #5381	@ 0x1505
 8002f24:	4293      	cmp	r3, r2
 8002f26:	f300 821e 	bgt.w	8003366 <tft_init+0x63a>
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f000 811b 	beq.w	8003166 <tft_init+0x43a>
 8002f30:	2b99      	cmp	r3, #153	@ 0x99
 8002f32:	f000 8103 	beq.w	800313c <tft_init+0x410>
 8002f36:	e216      	b.n	8003366 <tft_init+0x63a>
 8002f38:	f5a3 4313 	sub.w	r3, r3, #37632	@ 0x9300
 8002f3c:	3b02      	subs	r3, #2
 8002f3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f40:	f200 8211 	bhi.w	8003366 <tft_init+0x63a>
 8002f44:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <tft_init+0x220>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08003209 	.word	0x08003209
 8002f50:	08003367 	.word	0x08003367
 8002f54:	08003367 	.word	0x08003367
 8002f58:	08003367 	.word	0x08003367
 8002f5c:	08003367 	.word	0x08003367
 8002f60:	08003367 	.word	0x08003367
 8002f64:	08003367 	.word	0x08003367
 8002f68:	08003367 	.word	0x08003367
 8002f6c:	08003367 	.word	0x08003367
 8002f70:	08003367 	.word	0x08003367
 8002f74:	08003367 	.word	0x08003367
 8002f78:	08003367 	.word	0x08003367
 8002f7c:	08003367 	.word	0x08003367
 8002f80:	08003367 	.word	0x08003367
 8002f84:	08003367 	.word	0x08003367
 8002f88:	08003367 	.word	0x08003367
 8002f8c:	08003367 	.word	0x08003367
 8002f90:	08003367 	.word	0x08003367
 8002f94:	08003367 	.word	0x08003367
 8002f98:	08003367 	.word	0x08003367
 8002f9c:	08003367 	.word	0x08003367
 8002fa0:	08003367 	.word	0x08003367
 8002fa4:	08003367 	.word	0x08003367
 8002fa8:	08003367 	.word	0x08003367
 8002fac:	08003367 	.word	0x08003367
 8002fb0:	08003367 	.word	0x08003367
 8002fb4:	08003367 	.word	0x08003367
 8002fb8:	08003367 	.word	0x08003367
 8002fbc:	08003367 	.word	0x08003367
 8002fc0:	08003367 	.word	0x08003367
 8002fc4:	0800317b 	.word	0x0800317b
 8002fc8:	08003367 	.word	0x08003367
 8002fcc:	08003367 	.word	0x08003367
 8002fd0:	08003367 	.word	0x08003367
 8002fd4:	08003367 	.word	0x08003367
 8002fd8:	0800319b 	.word	0x0800319b
 8002fdc:	08003367 	.word	0x08003367
 8002fe0:	080031bb 	.word	0x080031bb
 8002fe4:	0800319b 	.word	0x0800319b
 8002fe8:	0800321d 	.word	0x0800321d
 8002fec:	08003367 	.word	0x08003367
 8002ff0:	08003367 	.word	0x08003367
 8002ff4:	08003367 	.word	0x08003367
 8002ff8:	08003367 	.word	0x08003367
 8002ffc:	08003367 	.word	0x08003367
 8003000:	08003367 	.word	0x08003367
 8003004:	08003367 	.word	0x08003367
 8003008:	080031a5 	.word	0x080031a5
 800300c:	08003367 	.word	0x08003367
 8003010:	08003367 	.word	0x08003367
 8003014:	08003367 	.word	0x08003367
 8003018:	080031a5 	.word	0x080031a5
 800301c:	08003367 	.word	0x08003367
 8003020:	08003367 	.word	0x08003367
 8003024:	08003213 	.word	0x08003213
 8003028:	08003367 	.word	0x08003367
 800302c:	08003367 	.word	0x08003367
 8003030:	08003367 	.word	0x08003367
 8003034:	08003367 	.word	0x08003367
 8003038:	08003367 	.word	0x08003367
 800303c:	08003367 	.word	0x08003367
 8003040:	08003367 	.word	0x08003367
 8003044:	08003233 	.word	0x08003233
 8003048:	0800323d 	.word	0x0800323d
		init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
		break;
#endif

	case 0x1511:                // Unknown from Levy
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 800304c:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <tft_init+0x364>)
 800304e:	2203      	movs	r2, #3
 8003050:	801a      	strh	r2, [r3, #0]
		static const uint8_t R61511_regValues[]  = {
				0xB0, 1, 0x00,       //Command Access Protect
		};
		table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <tft_init+0x368>)
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	2303      	movs	r3, #3
 8003058:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 800305a:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <tft_init+0x36c>)
 800305c:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003064:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003066:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <tft_init+0x370>)
 8003068:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003070:	801a      	strh	r2, [r3, #0]
		break;
 8003072:	e17e      	b.n	8003372 <tft_init+0x646>

	case 0x1520:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <tft_init+0x364>)
 8003076:	f240 4213 	movw	r2, #1043	@ 0x413
 800307a:	801a      	strh	r2, [r3, #0]
		static const uint8_t R61520_regValues[]  = {
				0xB0, 1, 0x00,      //Command Access Protect
				0xC0, 1, 0x0A,      //DM=1, BGR=1
		};
		table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 800307c:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <tft_init+0x374>)
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	2306      	movs	r3, #6
 8003082:	837b      	strh	r3, [r7, #26]
		break;
 8003084:	e175      	b.n	8003372 <tft_init+0x646>
 8003086:	bf00      	nop
 8003088:	200000d4 	.word	0x200000d4
 800308c:	200000d8 	.word	0x200000d8
 8003090:	200000d6 	.word	0x200000d6
 8003094:	080080d0 	.word	0x080080d0
 8003098:	08000dd5 	.word	0x08000dd5
 800309c:	08000dbd 	.word	0x08000dbd
 80030a0:	080080d4 	.word	0x080080d4

	case 0x1526:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80030a4:	4b95      	ldr	r3, [pc, #596]	@ (80032fc <tft_init+0x5d0>)
 80030a6:	f240 4213 	movw	r2, #1043	@ 0x413
 80030aa:	801a      	strh	r2, [r3, #0]
				0xB0, 1, 0x03,      //Command Access
				0xE2, 1, 0x3F,      //Command Write Access
				0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
				0xE2, 1, 0x00,      //Command Write Protect
		};
		table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80030ac:	4b94      	ldr	r3, [pc, #592]	@ (8003300 <tft_init+0x5d4>)
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	230c      	movs	r3, #12
 80030b2:	837b      	strh	r3, [r7, #26]
		break;
 80030b4:	e15d      	b.n	8003372 <tft_init+0x646>
		init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
		break;
#endif

	case 0x5310:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 80030b6:	4b91      	ldr	r3, [pc, #580]	@ (80032fc <tft_init+0x5d0>)
 80030b8:	f640 6213 	movw	r2, #3603	@ 0xe13
 80030bc:	801a      	strh	r2, [r3, #0]
		static const uint8_t NT35310_regValues[]  = {        //
				TFTLCD_DELAY8, 10,    //just some dummy
		};
		table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 80030be:	4b91      	ldr	r3, [pc, #580]	@ (8003304 <tft_init+0x5d8>)
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2302      	movs	r3, #2
 80030c4:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 80030c6:	4b90      	ldr	r3, [pc, #576]	@ (8003308 <tft_init+0x5dc>)
 80030c8:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80030d0:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80030d2:	4b8e      	ldr	r3, [pc, #568]	@ (800330c <tft_init+0x5e0>)
 80030d4:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80030dc:	801a      	strh	r2, [r3, #0]
		break;
 80030de:	e148      	b.n	8003372 <tft_init+0x646>
		init_table16(ST7781_regValues, sizeof(ST7781_regValues));
		break;
#endif

	case 0x7789:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80030e0:	4b86      	ldr	r3, [pc, #536]	@ (80032fc <tft_init+0x5d0>)
 80030e2:	f240 4213 	movw	r2, #1043	@ 0x413
 80030e6:	801a      	strh	r2, [r3, #0]
				(0x55), 1, 0x90,    //WRCACE  [00]
				(0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
				(0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
				(0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
		};
		table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80030e8:	4b89      	ldr	r3, [pc, #548]	@ (8003310 <tft_init+0x5e4>)
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	2341      	movs	r3, #65	@ 0x41
 80030ee:	837b      	strh	r3, [r7, #26]
		break;
 80030f0:	e13f      	b.n	8003372 <tft_init+0x646>

	case 0x8031:      //Unknown BangGood thanks PrinceCharles
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80030f2:	4b82      	ldr	r3, [pc, #520]	@ (80032fc <tft_init+0x5d0>)
 80030f4:	f241 4213 	movw	r2, #5139	@ 0x1413
 80030f8:	801a      	strh	r2, [r3, #0]
		static const uint8_t FK8031_regValues[]  = {
				// 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
				0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
				0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
		};
		table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80030fa:	4b86      	ldr	r3, [pc, #536]	@ (8003314 <tft_init+0x5e8>)
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	2312      	movs	r3, #18
 8003100:	837b      	strh	r3, [r7, #26]
		break;
 8003102:	e136      	b.n	8003372 <tft_init+0x646>
		//        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
		break;
#endif

	case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8003104:	4b7d      	ldr	r3, [pc, #500]	@ (80032fc <tft_init+0x5d0>)
 8003106:	f241 4203 	movw	r2, #5123	@ 0x1403
 800310a:	801a      	strh	r2, [r3, #0]
		goto common_8357;
 800310c:	e003      	b.n	8003116 <tft_init+0x3ea>
	case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800310e:	4b7b      	ldr	r3, [pc, #492]	@ (80032fc <tft_init+0x5d0>)
 8003110:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003114:	801a      	strh	r2, [r3, #0]
		common_8357:
		dummy=1;
 8003116:	2301      	movs	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
		static const uint8_t HX8357C_regValues[]  = {
				TFTLCD_DELAY8, 1,  //dummy table
		};
		table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800311a:	4b7f      	ldr	r3, [pc, #508]	@ (8003318 <tft_init+0x5ec>)
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	2302      	movs	r3, #2
 8003120:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8003122:	4b79      	ldr	r3, [pc, #484]	@ (8003308 <tft_init+0x5dc>)
 8003124:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800312c:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 800312e:	4b77      	ldr	r3, [pc, #476]	@ (800330c <tft_init+0x5e0>)
 8003130:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003138:	801a      	strh	r2, [r3, #0]
		break;
 800313a:	e11a      	b.n	8003372 <tft_init+0x646>

	case 0x0099:                //HX8357-D matches datasheet
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800313c:	4b6f      	ldr	r3, [pc, #444]	@ (80032fc <tft_init+0x5d0>)
 800313e:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003142:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
				// HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
				(0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
		};
		table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 8003144:	4b75      	ldr	r3, [pc, #468]	@ (800331c <tft_init+0x5f0>)
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	231d      	movs	r3, #29
 800314a:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 800314c:	4b6e      	ldr	r3, [pc, #440]	@ (8003308 <tft_init+0x5dc>)
 800314e:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003156:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003158:	4b6c      	ldr	r3, [pc, #432]	@ (800330c <tft_init+0x5e0>)
 800315a:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003162:	801a      	strh	r2, [r3, #0]
		break;
 8003164:	e105      	b.n	8003372 <tft_init+0x646>
		*p16 = 176;
		break;
#endif

	case 0x0001:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 8003166:	4b65      	ldr	r3, [pc, #404]	@ (80032fc <tft_init+0x5d0>)
 8003168:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 800316c:	801a      	strh	r2, [r3, #0]
		goto common_9320;
 800316e:	e008      	b.n	8003182 <tft_init+0x456>
	case 0x5408:
		_lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8003170:	4b62      	ldr	r3, [pc, #392]	@ (80032fc <tft_init+0x5d0>)
 8003172:	f241 0204 	movw	r2, #4100	@ 0x1004
 8003176:	801a      	strh	r2, [r3, #0]
		//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
		goto common_9320;
 8003178:	e003      	b.n	8003182 <tft_init+0x456>
	case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
	case 0x9320:
		_lcd_capable = 0 | REV_SCREEN | READ_BGR;
 800317a:	4b60      	ldr	r3, [pc, #384]	@ (80032fc <tft_init+0x5d0>)
 800317c:	f241 0204 	movw	r2, #4100	@ 0x1004
 8003180:	801a      	strh	r2, [r3, #0]
		common_9320:
		dummy=1;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
				0x0098, 0x0000,
				//-----Display on-----------------------
				0x0007, 0x0173,
				TFTLCD_DELAY, 50,
		};
		init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 8003186:	21d8      	movs	r1, #216	@ 0xd8
 8003188:	4865      	ldr	r0, [pc, #404]	@ (8003320 <tft_init+0x5f4>)
 800318a:	f7fe fbb0 	bl	80018ee <init_table16>
		break;
 800318e:	e0f0      	b.n	8003372 <tft_init+0x646>
	case 0x6809:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8003190:	4b5a      	ldr	r3, [pc, #360]	@ (80032fc <tft_init+0x5d0>)
 8003192:	f241 1202 	movw	r2, #4354	@ 0x1102
 8003196:	801a      	strh	r2, [r3, #0]
		goto common_93x5;
 8003198:	e008      	b.n	80031ac <tft_init+0x480>
	case 0x9328:
	case 0x9325:
		_lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800319a:	4b58      	ldr	r3, [pc, #352]	@ (80032fc <tft_init+0x5d0>)
 800319c:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 80031a0:	801a      	strh	r2, [r3, #0]
		goto common_93x5;
 80031a2:	e003      	b.n	80031ac <tft_init+0x480>
	case 0x9331:
	case 0x9335:
		_lcd_capable = 0 | REV_SCREEN;
 80031a4:	4b55      	ldr	r3, [pc, #340]	@ (80032fc <tft_init+0x5d0>)
 80031a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031aa:	801a      	strh	r2, [r3, #0]
		common_93x5:
		dummy=1;
 80031ac:	2301      	movs	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
				//-------------- Panel Control -------------------//
				0x0090, 0x0010,
				0x0092, 0x0000,
				0x0007, 0x0133,     // 262K color and display ON
		};
		init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80031b0:	21cc      	movs	r1, #204	@ 0xcc
 80031b2:	485c      	ldr	r0, [pc, #368]	@ (8003324 <tft_init+0x5f8>)
 80031b4:	f7fe fb9b 	bl	80018ee <init_table16>
		break;
 80031b8:	e0db      	b.n	8003372 <tft_init+0x646>
		*p16 = 240;
		break;
#endif

	case 0x9327:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80031ba:	4b50      	ldr	r3, [pc, #320]	@ (80032fc <tft_init+0x5d0>)
 80031bc:	f240 4203 	movw	r2, #1027	@ 0x403
 80031c0:	801a      	strh	r2, [r3, #0]
				//            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
				0xCA, 1, 0x00,      //DGC LUT ???
				0xEA, 1, 0x80,      //3-Gamma Function Enable
				//                     0xB0, 1, 0x03,      //Enable Protect
		};
		table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80031c2:	4b59      	ldr	r3, [pc, #356]	@ (8003328 <tft_init+0x5fc>)
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	231e      	movs	r3, #30
 80031c8:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 80031ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003308 <tft_init+0x5dc>)
 80031cc:	613b      	str	r3, [r7, #16]
		*p16 = 400;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80031d4:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80031d6:	4b4d      	ldr	r3, [pc, #308]	@ (800330c <tft_init+0x5e0>)
 80031d8:	613b      	str	r3, [r7, #16]
		*p16 = 240;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	22f0      	movs	r2, #240	@ 0xf0
 80031de:	801a      	strh	r2, [r3, #0]
		break;
 80031e0:	e0c7      	b.n	8003372 <tft_init+0x646>
	case 0x1602:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not tft_readGRAM
 80031e2:	4b46      	ldr	r3, [pc, #280]	@ (80032fc <tft_init+0x5d0>)
 80031e4:	f240 4203 	movw	r2, #1027	@ 0x403
 80031e8:	801a      	strh	r2, [r3, #0]
		static const uint8_t XX1602_regValues[]  = {
				0xB8, 1, 0x01,      //GS [00]
				0xC0, 1, 0x0E,      //??Power [0A]
		};
		table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80031ea:	4b50      	ldr	r3, [pc, #320]	@ (800332c <tft_init+0x600>)
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	2306      	movs	r3, #6
 80031f0:	837b      	strh	r3, [r7, #26]
		break;
 80031f2:	e0be      	b.n	8003372 <tft_init+0x646>

	case 0x2053:    //weird from BangGood
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80031f4:	4b41      	ldr	r3, [pc, #260]	@ (80032fc <tft_init+0x5d0>)
 80031f6:	f241 4217 	movw	r2, #5143	@ 0x1417
 80031fa:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80031fc:	e012      	b.n	8003224 <tft_init+0x4f8>
	case 0xAC11:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80031fe:	4b3f      	ldr	r3, [pc, #252]	@ (80032fc <tft_init+0x5d0>)
 8003200:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003204:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003206:	e00d      	b.n	8003224 <tft_init+0x4f8>
	case 0x9302:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8003208:	4b3c      	ldr	r3, [pc, #240]	@ (80032fc <tft_init+0x5d0>)
 800320a:	f240 4203 	movw	r2, #1027	@ 0x403
 800320e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003210:	e008      	b.n	8003224 <tft_init+0x4f8>
	case 0x9338:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003212:	4b3a      	ldr	r3, [pc, #232]	@ (80032fc <tft_init+0x5d0>)
 8003214:	f240 4213 	movw	r2, #1043	@ 0x413
 8003218:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800321a:	e003      	b.n	8003224 <tft_init+0x4f8>
	case 0x9329:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 800321c:	4b37      	ldr	r3, [pc, #220]	@ (80032fc <tft_init+0x5d0>)
 800321e:	f241 6203 	movw	r2, #5635	@ 0x1603
 8003222:	801a      	strh	r2, [r3, #0]
		common_9329:
		dummy=1;
 8003224:	2301      	movs	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
				//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
				//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
				//            0xB7, 1, 0x06,      //Entry Mode Set [06]
				0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
		};
		table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8003228:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <tft_init+0x604>)
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	2303      	movs	r3, #3
 800322e:	837b      	strh	r3, [r7, #26]
		break;
 8003230:	e09f      	b.n	8003372 <tft_init+0x646>

	case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8003232:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <tft_init+0x5d0>)
 8003234:	f241 4213 	movw	r2, #5139	@ 0x1413
 8003238:	801a      	strh	r2, [r3, #0]
		goto common_9341;
 800323a:	bf00      	nop
	case 0x9341:
		common_9341:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800323c:	4b2f      	ldr	r3, [pc, #188]	@ (80032fc <tft_init+0x5d0>)
 800323e:	f240 4213 	movw	r2, #1043	@ 0x413
 8003242:	801a      	strh	r2, [r3, #0]
			0xC7, 1, 0xC0,      //VCOM 2 [C0]
			0x36, 1, 0x88,      //Memory Access [00]
			0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
			0xB7, 1, 0x07,      //Entry Mode [00]
	};
	table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 8003244:	4b3b      	ldr	r3, [pc, #236]	@ (8003334 <tft_init+0x608>)
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	2365      	movs	r3, #101	@ 0x65
 800324a:	837b      	strh	r3, [r7, #26]
	break;
 800324c:	e091      	b.n	8003372 <tft_init+0x646>
		p16 = (int16_t *) & width;
		*p16 = 320;
		break;
#endif
	case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 800324e:	4b2b      	ldr	r3, [pc, #172]	@ (80032fc <tft_init+0x5d0>)
 8003250:	f240 4213 	movw	r2, #1043	@ 0x413
 8003254:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 8003256:	e003      	b.n	8003260 <tft_init+0x534>
	case 0x9481:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8003258:	4b28      	ldr	r3, [pc, #160]	@ (80032fc <tft_init+0x5d0>)
 800325a:	f240 4207 	movw	r2, #1031	@ 0x407
 800325e:	801a      	strh	r2, [r3, #0]
		common_9481:
		dummy=1;
 8003260:	2301      	movs	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
				0x0C, 2, 0x00, 0x55, //RDCOLMOD
				0xB4, 1, 0x00,      //SETDISPLAY
				//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
				0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
		};
		table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 8003264:	4b34      	ldr	r3, [pc, #208]	@ (8003338 <tft_init+0x60c>)
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	2345      	movs	r3, #69	@ 0x45
 800326a:	837b      	strh	r3, [r7, #26]
		//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
		//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
		//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
		//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
		//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
		p16 = (int16_t *) & height;
 800326c:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <tft_init+0x5dc>)
 800326e:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003276:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 8003278:	4b24      	ldr	r3, [pc, #144]	@ (800330c <tft_init+0x5e0>)
 800327a:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003282:	801a      	strh	r2, [r3, #0]
		break;
 8003284:	e075      	b.n	8003372 <tft_init+0x646>
	case 0x9486:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 8003286:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <tft_init+0x5d0>)
 8003288:	f240 4203 	movw	r2, #1027	@ 0x403
 800328c:	801a      	strh	r2, [r3, #0]
				// 4.2 WTK 3.5 Inch Initial Code too white
				0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
				0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
		};
		table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 800328e:	4b2b      	ldr	r3, [pc, #172]	@ (800333c <tft_init+0x610>)
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	233b      	movs	r3, #59	@ 0x3b
 8003294:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 8003296:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <tft_init+0x5dc>)
 8003298:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80032a0:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80032a2:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <tft_init+0x5e0>)
 80032a4:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80032ac:	801a      	strh	r2, [r3, #0]
		break;
 80032ae:	e060      	b.n	8003372 <tft_init+0x646>
	case 0x7796:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80032b0:	4b12      	ldr	r3, [pc, #72]	@ (80032fc <tft_init+0x5d0>)
 80032b2:	f240 4203 	movw	r2, #1027	@ 0x403
 80032b6:	801a      	strh	r2, [r3, #0]
		goto common_9488;
 80032b8:	e003      	b.n	80032c2 <tft_init+0x596>
	case 0x9487:                //with thanks to Charlyf
	case 0x9488:
		_lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <tft_init+0x5d0>)
 80032bc:	f240 4213 	movw	r2, #1043	@ 0x413
 80032c0:	801a      	strh	r2, [r3, #0]
		common_9488:
		dummy=1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
				0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
				0xB7, 1, 0xC6,      //Entry Mode      [06]
				0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
				0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
		};
		table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80032c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003340 <tft_init+0x614>)
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	232b      	movs	r3, #43	@ 0x2b
 80032cc:	837b      	strh	r3, [r7, #26]
		p16 = (int16_t *) & height;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <tft_init+0x5dc>)
 80032d0:	613b      	str	r3, [r7, #16]
		*p16 = 480;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80032d8:	801a      	strh	r2, [r3, #0]
		p16 = (int16_t *) & width;
 80032da:	4b0c      	ldr	r3, [pc, #48]	@ (800330c <tft_init+0x5e0>)
 80032dc:	613b      	str	r3, [r7, #16]
		*p16 = 320;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80032e4:	801a      	strh	r2, [r3, #0]
		break;
 80032e6:	e044      	b.n	8003372 <tft_init+0x646>
	case 0xB505:                //R61505V
	case 0xC505:                //R61505W
		_lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80032e8:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <tft_init+0x5d0>)
 80032ea:	f241 0208 	movw	r2, #4104	@ 0x1008
 80032ee:	801a      	strh	r2, [r3, #0]
				0x0092, 0x0100,
				0x0093, 0x0701,
				TFTLCD_DELAY, 80,
				0x0007, 0x0100,     //BASEE=1--Display On
		};
		init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80032f0:	21b0      	movs	r1, #176	@ 0xb0
 80032f2:	4814      	ldr	r0, [pc, #80]	@ (8003344 <tft_init+0x618>)
 80032f4:	f7fe fafb 	bl	80018ee <init_table16>
		break;
 80032f8:	e03b      	b.n	8003372 <tft_init+0x646>
 80032fa:	bf00      	nop
 80032fc:	200000d6 	.word	0x200000d6
 8003300:	080080dc 	.word	0x080080dc
 8003304:	080080e8 	.word	0x080080e8
 8003308:	08000dd5 	.word	0x08000dd5
 800330c:	08000dbd 	.word	0x08000dbd
 8003310:	080080ec 	.word	0x080080ec
 8003314:	08008130 	.word	0x08008130
 8003318:	08008144 	.word	0x08008144
 800331c:	08008148 	.word	0x08008148
 8003320:	08008168 	.word	0x08008168
 8003324:	08008240 	.word	0x08008240
 8003328:	0800830c 	.word	0x0800830c
 800332c:	0800832c 	.word	0x0800832c
 8003330:	08008334 	.word	0x08008334
 8003334:	08008338 	.word	0x08008338
 8003338:	080083a0 	.word	0x080083a0
 800333c:	080083e8 	.word	0x080083e8
 8003340:	08008424 	.word	0x08008424
 8003344:	08008450 	.word	0x08008450

#if defined(SUPPORT_B509_7793)
	case 0x7793:
	case 0xB509:
		_lcd_capable = REV_SCREEN;
 8003348:	4b33      	ldr	r3, [pc, #204]	@ (8003418 <tft_init+0x6ec>)
 800334a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800334e:	801a      	strh	r2, [r3, #0]
				TFTLCD_DELAY, 50,

				0x0200, 0x0000,
				0x0201, 0x0000,
		};
		init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8003350:	21c0      	movs	r1, #192	@ 0xc0
 8003352:	4832      	ldr	r0, [pc, #200]	@ (800341c <tft_init+0x6f0>)
 8003354:	f7fe facb 	bl	80018ee <init_table16>
		p16 = (int16_t *) & height;
 8003358:	4b31      	ldr	r3, [pc, #196]	@ (8003420 <tft_init+0x6f4>)
 800335a:	613b      	str	r3, [r7, #16]
		*p16 = 400;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003362:	801a      	strh	r2, [r3, #0]
		break;
 8003364:	e005      	b.n	8003372 <tft_init+0x646>
		p16 = (int16_t *) & width;
		*p16 = 854;
		break;
#endif
	default:
		p16 = (int16_t *) & width;
 8003366:	4b2f      	ldr	r3, [pc, #188]	@ (8003424 <tft_init+0x6f8>)
 8003368:	613b      	str	r3, [r7, #16]
		*p16 = 0;       //error value for width
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2200      	movs	r2, #0
 800336e:	801a      	strh	r2, [r3, #0]
		break;
 8003370:	bf00      	nop
	}
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8003372:	4b29      	ldr	r3, [pc, #164]	@ (8003418 <tft_init+0x6ec>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4b28      	ldr	r3, [pc, #160]	@ (8003428 <tft_init+0x6fc>)
 8003388:	801a      	strh	r2, [r3, #0]
	if (table8_ads != NULL) {
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <tft_init+0x680>
		static const uint8_t wake_on[]  = {
				0x11, 0,            //Sleep Out
				TFTLCD_DELAY8, 150,
				0x29, 0,            //Display On
		};
		init_table(&reset_off, sizeof(reset_off));
 8003390:	2109      	movs	r1, #9
 8003392:	4826      	ldr	r0, [pc, #152]	@ (800342c <tft_init+0x700>)
 8003394:	f7fe fa52 	bl	800183c <init_table>
		init_table(table8_ads, table_size);   //can change PIXFMT
 8003398:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800339c:	4619      	mov	r1, r3
 800339e:	69f8      	ldr	r0, [r7, #28]
 80033a0:	f7fe fa4c 	bl	800183c <init_table>
		init_table(&wake_on, sizeof(wake_on));
 80033a4:	2106      	movs	r1, #6
 80033a6:	4822      	ldr	r0, [pc, #136]	@ (8003430 <tft_init+0x704>)
 80033a8:	f7fe fa48 	bl	800183c <init_table>
	}
	tft_setRotation(0);             //PORTRAIT
 80033ac:	2000      	movs	r0, #0
 80033ae:	f000 f985 	bl	80036bc <tft_setRotation>
	tft_invertDisplay(false);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f000 fe36 	bl	8004024 <tft_invertDisplay>
#if defined(SUPPORT_9488_555)
	if (_lcd_ID == 0x9488) {
 80033b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003434 <tft_init+0x708>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f249 4288 	movw	r2, #38024	@ 0x9488
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d125      	bne.n	8003410 <tft_init+0x6e4>
		is555 = 0;
 80033c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <tft_init+0x70c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
		tft_drawPixel(0, 0, 0xFFE0);
 80033ca:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80033ce:	2100      	movs	r1, #0
 80033d0:	2000      	movs	r0, #0
 80033d2:	f000 fbfb 	bl	8003bcc <tft_drawPixel>
		if (tft_readPixel(0, 0) == 0xFF1F) {
 80033d6:	2100      	movs	r1, #0
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fe fe41 	bl	8002060 <tft_readPixel>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d112      	bne.n	8003410 <tft_init+0x6e4>
			uint8_t pixfmt = 0x06;
 80033ea:	2306      	movs	r3, #6
 80033ec:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80033ee:	f107 030f 	add.w	r3, r7, #15
 80033f2:	2201      	movs	r2, #1
 80033f4:	4619      	mov	r1, r3
 80033f6:	203a      	movs	r0, #58	@ 0x3a
 80033f8:	f7fd fd69 	bl	8000ece <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <tft_init+0x6ec>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	f023 0310 	bic.w	r3, r3, #16
 8003404:	b29a      	uxth	r2, r3
 8003406:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <tft_init+0x6ec>)
 8003408:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <tft_init+0x70c>)
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8003410:	bf00      	nop
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200000d6 	.word	0x200000d6
 800341c:	08008500 	.word	0x08008500
 8003420:	08000dd5 	.word	0x08000dd5
 8003424:	08000dbd 	.word	0x08000dbd
 8003428:	200000da 	.word	0x200000da
 800342c:	080085c0 	.word	0x080085c0
 8003430:	080085cc 	.word	0x080085cc
 8003434:	200000d8 	.word	0x200000d8
 8003438:	200000cc 	.word	0x200000cc

0800343c <tft_readID>:

uint16_t tft_readID(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
	uint16_t ret, ret2;
	uint8_t msb;
	ret = readReg(0,0);           //forces a reset() if called before begin()
 8003442:	2100      	movs	r1, #0
 8003444:	2000      	movs	r0, #0
 8003446:	f7fe fb75 	bl	8001b34 <readReg>
 800344a:	4603      	mov	r3, r0
 800344c:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 800344e:	89fb      	ldrh	r3, [r7, #14]
 8003450:	f245 4208 	movw	r2, #21512	@ 0x5408
 8003454:	4293      	cmp	r3, r2
 8003456:	d102      	bne.n	800345e <tft_readID+0x22>
		return 0x5408;
 8003458:	f245 4308 	movw	r3, #21512	@ 0x5408
 800345c:	e128      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 800345e:	89fb      	ldrh	r3, [r7, #14]
 8003460:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003464:	4293      	cmp	r3, r2
 8003466:	d102      	bne.n	800346e <tft_readID+0x32>
		return 0x5420;
 8003468:	f245 4320 	movw	r3, #21536	@ 0x5420
 800346c:	e120      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x8989)          //SSD1289 is always 8989
 800346e:	89fb      	ldrh	r3, [r7, #14]
 8003470:	f648 1289 	movw	r2, #35209	@ 0x8989
 8003474:	4293      	cmp	r3, r2
 8003476:	d102      	bne.n	800347e <tft_readID+0x42>
		return 0x1289;
 8003478:	f241 2389 	movw	r3, #4745	@ 0x1289
 800347c:	e118      	b.n	80036b0 <tft_readID+0x274>
	ret = readReg(0x67,0);        //HX8347-A
 800347e:	2100      	movs	r1, #0
 8003480:	2067      	movs	r0, #103	@ 0x67
 8003482:	f7fe fb57 	bl	8001b34 <readReg>
 8003486:	4603      	mov	r3, r0
 8003488:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x4747)
 800348a:	89fb      	ldrh	r3, [r7, #14]
 800348c:	f244 7247 	movw	r2, #18247	@ 0x4747
 8003490:	4293      	cmp	r3, r2
 8003492:	d102      	bne.n	800349a <tft_readID+0x5e>
		return 0x8347;
 8003494:	f248 3347 	movw	r3, #33607	@ 0x8347
 8003498:	e10a      	b.n	80036b0 <tft_readID+0x274>
	//#if defined(SUPPORT_1963) && USING_16BIT_BUS
	ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 800349a:	20a1      	movs	r0, #161	@ 0xa1
 800349c:	f7fe fc26 	bl	8001cec <readReg32>
 80034a0:	4603      	mov	r3, r0
 80034a2:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x6101)
 80034a4:	89fb      	ldrh	r3, [r7, #14]
 80034a6:	f246 1201 	movw	r2, #24833	@ 0x6101
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d102      	bne.n	80034b4 <tft_readID+0x78>
		return 0x1963;
 80034ae:	f641 1363 	movw	r3, #6499	@ 0x1963
 80034b2:	e0fd      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80034b4:	89fb      	ldrh	r3, [r7, #14]
 80034b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d102      	bne.n	80034c4 <tft_readID+0x88>
		return 0x1526;          //subsequent begin() enables Command Access
 80034be:	f241 5326 	movw	r3, #5414	@ 0x1526
 80034c2:	e0f5      	b.n	80036b0 <tft_readID+0x274>
	//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
	//        return 0x1520;          //subsequent begin() enables Command Access
	//#endif
	ret = readReg40(0xBF);
 80034c4:	20bf      	movs	r0, #191	@ 0xbf
 80034c6:	f7fe fc2c 	bl	8001d22 <readReg40>
 80034ca:	4603      	mov	r3, r0
 80034cc:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80034ce:	89fb      	ldrh	r3, [r7, #14]
 80034d0:	f248 3257 	movw	r2, #33623	@ 0x8357
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d102      	bne.n	80034de <tft_readID+0xa2>
		return 0x8357;
 80034d8:	f248 3357 	movw	r3, #33623	@ 0x8357
 80034dc:	e0e8      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80034de:	89fb      	ldrh	r3, [r7, #14]
 80034e0:	f249 4281 	movw	r2, #38017	@ 0x9481
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d102      	bne.n	80034ee <tft_readID+0xb2>
		return 0x9481;
 80034e8:	f249 4381 	movw	r3, #38017	@ 0x9481
 80034ec:	e0e0      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80034ee:	89fb      	ldrh	r3, [r7, #14]
 80034f0:	f241 5211 	movw	r2, #5393	@ 0x1511
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d102      	bne.n	80034fe <tft_readID+0xc2>
		return 0x1511;
 80034f8:	f241 5311 	movw	r3, #5393	@ 0x1511
 80034fc:	e0d8      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 80034fe:	89fb      	ldrh	r3, [r7, #14]
 8003500:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8003504:	d102      	bne.n	800350c <tft_readID+0xd0>
		return 0x1520;
 8003506:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 800350a:	e0d1      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8003512:	4293      	cmp	r3, r2
 8003514:	d102      	bne.n	800351c <tft_readID+0xe0>
		return 0x1526;
 8003516:	f241 5326 	movw	r3, #5414	@ 0x1526
 800351a:	e0c9      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 800351c:	89fb      	ldrh	r3, [r7, #14]
 800351e:	f241 5281 	movw	r2, #5505	@ 0x1581
 8003522:	4293      	cmp	r3, r2
 8003524:	d102      	bne.n	800352c <tft_readID+0xf0>
		return 0x1581;
 8003526:	f241 5381 	movw	r3, #5505	@ 0x1581
 800352a:	e0c1      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 800352c:	89fb      	ldrh	r3, [r7, #14]
 800352e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003532:	d102      	bne.n	800353a <tft_readID+0xfe>
		return 0x6814;
 8003534:	f646 0314 	movw	r3, #26644	@ 0x6814
 8003538:	e0ba      	b.n	80036b0 <tft_readID+0x274>
	ret = readReg32(0xD4);
 800353a:	20d4      	movs	r0, #212	@ 0xd4
 800353c:	f7fe fbd6 	bl	8001cec <readReg32>
 8003540:	4603      	mov	r3, r0
 8003542:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	f245 3210 	movw	r2, #21264	@ 0x5310
 800354a:	4293      	cmp	r3, r2
 800354c:	d102      	bne.n	8003554 <tft_readID+0x118>
		return 0x5310;
 800354e:	f245 3310 	movw	r3, #21264	@ 0x5310
 8003552:	e0ad      	b.n	80036b0 <tft_readID+0x274>
	ret = readReg32(0xD7);
 8003554:	20d7      	movs	r0, #215	@ 0xd7
 8003556:	f7fe fbc9 	bl	8001cec <readReg32>
 800355a:	4603      	mov	r3, r0
 800355c:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 800355e:	89fb      	ldrh	r3, [r7, #14]
 8003560:	f248 0231 	movw	r2, #32817	@ 0x8031
 8003564:	4293      	cmp	r3, r2
 8003566:	d102      	bne.n	800356e <tft_readID+0x132>
		return 0x8031;
 8003568:	f248 0331 	movw	r3, #32817	@ 0x8031
 800356c:	e0a0      	b.n	80036b0 <tft_readID+0x274>
	ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 800356e:	20ef      	movs	r0, #239	@ 0xef
 8003570:	f7fe fbd7 	bl	8001d22 <readReg40>
 8003574:	4603      	mov	r3, r0
 8003576:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x9327)
 8003578:	89fb      	ldrh	r3, [r7, #14]
 800357a:	f249 3227 	movw	r2, #37671	@ 0x9327
 800357e:	4293      	cmp	r3, r2
 8003580:	d102      	bne.n	8003588 <tft_readID+0x14c>
		return 0x9327;
 8003582:	f249 3327 	movw	r3, #37671	@ 0x9327
 8003586:	e093      	b.n	80036b0 <tft_readID+0x274>
	ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8003588:	20fe      	movs	r0, #254	@ 0xfe
 800358a:	f7fe fbaf 	bl	8001cec <readReg32>
 800358e:	4603      	mov	r3, r0
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x2053)
 8003594:	89fb      	ldrh	r3, [r7, #14]
 8003596:	f242 0253 	movw	r2, #8275	@ 0x2053
 800359a:	4293      	cmp	r3, r2
 800359c:	d102      	bne.n	80035a4 <tft_readID+0x168>
		return 0x2053;
 800359e:	f242 0353 	movw	r3, #8275	@ 0x2053
 80035a2:	e085      	b.n	80036b0 <tft_readID+0x274>
	uint32_t ret32 = readReg32(0x04);
 80035a4:	2004      	movs	r0, #4
 80035a6:	f7fe fba1 	bl	8001cec <readReg32>
 80035aa:	60b8      	str	r0, [r7, #8]
	msb = ret32 >> 16;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	71fb      	strb	r3, [r7, #7]
	ret = ret32;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	81fb      	strh	r3, [r7, #14]
	//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
	if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d122      	bne.n	8003602 <tft_readID+0x1c6>
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c2:	d11e      	bne.n	8003602 <tft_readID+0x1c6>
#if 1
		uint8_t cmds[] = {0xFF, 0x83, 0x57};
 80035c4:	4a3c      	ldr	r2, [pc, #240]	@ (80036b8 <tft_readID+0x27c>)
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	4611      	mov	r1, r2
 80035cc:	8019      	strh	r1, [r3, #0]
 80035ce:	3302      	adds	r3, #2
 80035d0:	0c12      	lsrs	r2, r2, #16
 80035d2:	701a      	strb	r2, [r3, #0]
		pushCommand(0xB9, cmds, 3);
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	2203      	movs	r2, #3
 80035d8:	4619      	mov	r1, r3
 80035da:	20b9      	movs	r0, #185	@ 0xb9
 80035dc:	f7fd fc77 	bl	8000ece <pushCommand>
		msb = readReg(0xD0,0);
 80035e0:	2100      	movs	r1, #0
 80035e2:	20d0      	movs	r0, #208	@ 0xd0
 80035e4:	f7fe faa6 	bl	8001b34 <readReg>
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
		if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2b99      	cmp	r3, #153	@ 0x99
 80035f0:	d101      	bne.n	80035f6 <tft_readID+0x1ba>
 80035f2:	2399      	movs	r3, #153	@ 0x99
 80035f4:	e05c      	b.n	80036b0 <tft_readID+0x274>
		if (msb == 0x90)        //HX8357-C undocumented
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	2b90      	cmp	r3, #144	@ 0x90
 80035fa:	d102      	bne.n	8003602 <tft_readID+0x1c6>
#endif
			return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 80035fc:	f249 0390 	movw	r3, #37008	@ 0x9090
 8003600:	e056      	b.n	80036b0 <tft_readID+0x274>
	}
	//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
	//        return 0x1526;          //subsequent begin() enables Command Access
	if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8003602:	89fb      	ldrh	r3, [r7, #14]
 8003604:	f241 5226 	movw	r2, #5414	@ 0x1526
 8003608:	4293      	cmp	r3, r2
 800360a:	d102      	bne.n	8003612 <tft_readID+0x1d6>
		return 0x1526;          //subsequent begin() enables Command Access
 800360c:	f241 5326 	movw	r3, #5414	@ 0x1526
 8003610:	e04e      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	f648 12f0 	movw	r2, #35312	@ 0x89f0
 8003618:	4293      	cmp	r3, r2
 800361a:	d102      	bne.n	8003622 <tft_readID+0x1e6>
		return 0x7735;
 800361c:	f247 7335 	movw	r3, #30517	@ 0x7735
 8003620:	e046      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	f248 5252 	movw	r2, #34130	@ 0x8552
 8003628:	4293      	cmp	r3, r2
 800362a:	d102      	bne.n	8003632 <tft_readID+0x1f6>
		return 0x7789;
 800362c:	f247 7389 	movw	r3, #30601	@ 0x7789
 8003630:	e03e      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8003638:	4293      	cmp	r3, r2
 800363a:	d102      	bne.n	8003642 <tft_readID+0x206>
		return 0xAC11;
 800363c:	f64a 4311 	movw	r3, #44049	@ 0xac11
 8003640:	e036      	b.n	80036b0 <tft_readID+0x274>
	ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8003642:	20d3      	movs	r0, #211	@ 0xd3
 8003644:	f7fe fb52 	bl	8001cec <readReg32>
 8003648:	60b8      	str	r0, [r7, #8]
	ret = ret32 >> 8;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x9163) return ret;
 8003650:	89fb      	ldrh	r3, [r7, #14]
 8003652:	f249 1263 	movw	r2, #37219	@ 0x9163
 8003656:	4293      	cmp	r3, r2
 8003658:	d101      	bne.n	800365e <tft_readID+0x222>
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	e028      	b.n	80036b0 <tft_readID+0x274>
	ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 800365e:	20d3      	movs	r0, #211	@ 0xd3
 8003660:	f7fe fb44 	bl	8001cec <readReg32>
 8003664:	4603      	mov	r3, r0
 8003666:	81fb      	strh	r3, [r7, #14]
	msb = ret >> 8;
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	71fb      	strb	r3, [r7, #7]
	if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	2b93      	cmp	r3, #147	@ 0x93
 8003674:	d00b      	beq.n	800368e <tft_readID+0x252>
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	2b94      	cmp	r3, #148	@ 0x94
 800367a:	d008      	beq.n	800368e <tft_readID+0x252>
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b98      	cmp	r3, #152	@ 0x98
 8003680:	d005      	beq.n	800368e <tft_readID+0x252>
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b77      	cmp	r3, #119	@ 0x77
 8003686:	d002      	beq.n	800368e <tft_readID+0x252>
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	2b16      	cmp	r3, #22
 800368c:	d101      	bne.n	8003692 <tft_readID+0x256>
		return ret;             //0x9488, 9486, 9340, 9341, 7796
 800368e:	89fb      	ldrh	r3, [r7, #14]
 8003690:	e00e      	b.n	80036b0 <tft_readID+0x274>
	if (ret == 0x00D3 || ret == 0xD3D3)
 8003692:	89fb      	ldrh	r3, [r7, #14]
 8003694:	2bd3      	cmp	r3, #211	@ 0xd3
 8003696:	d004      	beq.n	80036a2 <tft_readID+0x266>
 8003698:	89fb      	ldrh	r3, [r7, #14]
 800369a:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <tft_readID+0x26a>
		return ret;             //16-bit write-only bus
 80036a2:	89fb      	ldrh	r3, [r7, #14]
 80036a4:	e004      	b.n	80036b0 <tft_readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
	 */
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 80036a6:	2100      	movs	r1, #0
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7fe fa43 	bl	8001b34 <readReg>
 80036ae:	4603      	mov	r3, r0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	08006ec8 	.word	0x08006ec8

080036bc <tft_setRotation>:

void tft_setRotation(uint8_t r)
{
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
	uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 80036c6:	4b9c      	ldr	r3, [pc, #624]	@ (8003938 <tft_setRotation+0x27c>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	827b      	strh	r3, [r7, #18]
	uint8_t val, d[3];
	rotation = r & 3;           // just perform the operation ourselves on the protected variables
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b99      	ldr	r3, [pc, #612]	@ (800393c <tft_setRotation+0x280>)
 80036d6:	701a      	strb	r2, [r3, #0]
	_width = (rotation & 1) ? HEIGHT : WIDTH;
 80036d8:	4b98      	ldr	r3, [pc, #608]	@ (800393c <tft_setRotation+0x280>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <tft_setRotation+0x2e>
 80036e4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80036e8:	e000      	b.n	80036ec <tft_setRotation+0x30>
 80036ea:	22f0      	movs	r2, #240	@ 0xf0
 80036ec:	4b94      	ldr	r3, [pc, #592]	@ (8003940 <tft_setRotation+0x284>)
 80036ee:	801a      	strh	r2, [r3, #0]
	_height = (rotation & 1) ? WIDTH : HEIGHT;
 80036f0:	4b92      	ldr	r3, [pc, #584]	@ (800393c <tft_setRotation+0x280>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <tft_setRotation+0x44>
 80036fc:	22f0      	movs	r2, #240	@ 0xf0
 80036fe:	e001      	b.n	8003704 <tft_setRotation+0x48>
 8003700:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003704:	4b8f      	ldr	r3, [pc, #572]	@ (8003944 <tft_setRotation+0x288>)
 8003706:	801a      	strh	r2, [r3, #0]
	switch (rotation) {
 8003708:	4b8c      	ldr	r3, [pc, #560]	@ (800393c <tft_setRotation+0x280>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d817      	bhi.n	8003740 <tft_setRotation+0x84>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <tft_setRotation+0x5c>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003729 	.word	0x08003729
 800371c:	0800372f 	.word	0x0800372f
 8003720:	08003735 	.word	0x08003735
 8003724:	0800373b 	.word	0x0800373b
	case 0:                    //PORTRAIT:
		val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1  01001000
 8003728:	2348      	movs	r3, #72	@ 0x48
 800372a:	72fb      	strb	r3, [r7, #11]
		break;
 800372c:	e008      	b.n	8003740 <tft_setRotation+0x84>
	case 1:                    //LANDSCAPE: 90 degrees
		val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1   00101000
 800372e:	2328      	movs	r3, #40	@ 0x28
 8003730:	72fb      	strb	r3, [r7, #11]
		break;
 8003732:	e005      	b.n	8003740 <tft_setRotation+0x84>
	case 2:                    //PORTRAIT_REV: 180 degrees
		val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1   10011000
 8003734:	2398      	movs	r3, #152	@ 0x98
 8003736:	72fb      	strb	r3, [r7, #11]
		break;
 8003738:	e002      	b.n	8003740 <tft_setRotation+0x84>
	case 3:                    //LANDSCAPE_REV: 270 degrees
		val = 0x70;            //MY=1, MX=1, MV=1, ML=1, BGR=1  11111000 = 0xF8
 800373a:	2370      	movs	r3, #112	@ 0x70
 800373c:	72fb      	strb	r3, [r7, #11]
		break;                 //MY=0, MX=1, MV=1, ML=1, BGR=1  01111000 = 0x78
 800373e:	bf00      	nop
	}                          //MY=0, MX=1, MV=1, ML=1, BGR=0  01110000 = 0x70
	if (_lcd_capable & INVERT_GS)
 8003740:	4b81      	ldr	r3, [pc, #516]	@ (8003948 <tft_setRotation+0x28c>)
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <tft_setRotation+0x9c>
		val ^= 0x80;
 800374c:	7afb      	ldrb	r3, [r7, #11]
 800374e:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8003752:	43db      	mvns	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_SS)
 8003758:	4b7b      	ldr	r3, [pc, #492]	@ (8003948 <tft_setRotation+0x28c>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <tft_setRotation+0xb2>
		val ^= 0x40;
 8003764:	7afb      	ldrb	r3, [r7, #11]
 8003766:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 800376a:	b2db      	uxtb	r3, r3
 800376c:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & INVERT_RGB)
 800376e:	4b76      	ldr	r3, [pc, #472]	@ (8003948 <tft_setRotation+0x28c>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <tft_setRotation+0xc8>
		val ^= 0x08;
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f083 0308 	eor.w	r3, r3, #8
 8003780:	b2db      	uxtb	r3, r3
 8003782:	72fb      	strb	r3, [r7, #11]
	if (_lcd_capable & MIPI_DCS_REV1) {
 8003784:	4b70      	ldr	r3, [pc, #448]	@ (8003948 <tft_setRotation+0x28c>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8119 	beq.w	80039c4 <tft_setRotation+0x308>
		if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 8003792:	4b6e      	ldr	r3, [pc, #440]	@ (800394c <tft_setRotation+0x290>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	f646 0214 	movw	r2, #26644	@ 0x6814
 800379a:	4293      	cmp	r3, r2
 800379c:	d128      	bne.n	80037f0 <tft_setRotation+0x134>
			GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	b25b      	sxtb	r3, r3
 80037a2:	105b      	asrs	r3, r3, #1
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	823b      	strh	r3, [r7, #16]
			SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80037ae:	7afb      	ldrb	r3, [r7, #11]
 80037b0:	105b      	asrs	r3, r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	81fb      	strh	r3, [r7, #14]
			val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 80037ba:	7afb      	ldrb	r3, [r7, #11]
 80037bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	72fb      	strb	r3, [r7, #11]
			d[0] = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	723b      	strb	r3, [r7, #8]
			d[1] = GS | SS_v | 0x02;      //MY, MX
 80037c8:	8a3b      	ldrh	r3, [r7, #16]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	89fb      	ldrh	r3, [r7, #14]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	727b      	strb	r3, [r7, #9]
			d[2] = 0x3B;
 80037dc:	233b      	movs	r3, #59	@ 0x3b
 80037de:	72bb      	strb	r3, [r7, #10]
			WriteCmdParamN(0xB6, 3, d);
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	461a      	mov	r2, r3
 80037e6:	2103      	movs	r1, #3
 80037e8:	20b6      	movs	r0, #182	@ 0xb6
 80037ea:	f7fd fe35 	bl	8001458 <WriteCmdParamN>
			goto common_MC;
 80037ee:	e0c0      	b.n	8003972 <tft_setRotation+0x2b6>
		}
		else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80037f0:	4b56      	ldr	r3, [pc, #344]	@ (800394c <tft_setRotation+0x290>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <tft_setRotation+0x158>
 80037fc:	4b53      	ldr	r3, [pc, #332]	@ (800394c <tft_setRotation+0x290>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	f249 4281 	movw	r2, #38017	@ 0x9481
 8003804:	4293      	cmp	r3, r2
 8003806:	d005      	beq.n	8003814 <tft_setRotation+0x158>
 8003808:	4b50      	ldr	r3, [pc, #320]	@ (800394c <tft_setRotation+0x290>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	f241 5211 	movw	r2, #5393	@ 0x1511
 8003810:	4293      	cmp	r3, r2
 8003812:	d139      	bne.n	8003888 <tft_setRotation+0x1cc>
			if (val & 0x80)
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	b25b      	sxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	da04      	bge.n	8003826 <tft_setRotation+0x16a>
				val |= 0x01;    //GS
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x40))
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <tft_setRotation+0x17e>
					val |= 0x02;    //SS
 8003830:	7afb      	ldrb	r3, [r7, #11]
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	b2db      	uxtb	r3, r3
 8003838:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x1963) val &= ~0xC0;
 800383a:	4b44      	ldr	r3, [pc, #272]	@ (800394c <tft_setRotation+0x290>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8003842:	4293      	cmp	r3, r2
 8003844:	d104      	bne.n	8003850 <tft_setRotation+0x194>
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800384c:	b2db      	uxtb	r3, r3
 800384e:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x9481) val &= ~0xD0;
 8003850:	4b3e      	ldr	r3, [pc, #248]	@ (800394c <tft_setRotation+0x290>)
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	f249 4281 	movw	r2, #38017	@ 0x9481
 8003858:	4293      	cmp	r3, r2
 800385a:	d104      	bne.n	8003866 <tft_setRotation+0x1aa>
 800385c:	7afb      	ldrb	r3, [r7, #11]
 800385e:	f003 032f 	and.w	r3, r3, #47	@ 0x2f
 8003862:	b2db      	uxtb	r3, r3
 8003864:	72fb      	strb	r3, [r7, #11]
				if (_lcd_ID == 0x1511) {
 8003866:	4b39      	ldr	r3, [pc, #228]	@ (800394c <tft_setRotation+0x290>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	f241 5211 	movw	r2, #5393	@ 0x1511
 800386e:	4293      	cmp	r3, r2
 8003870:	d160      	bne.n	8003934 <tft_setRotation+0x278>
					val &= ~0x10;   //remove ML
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	f023 0310 	bic.w	r3, r3, #16
 8003878:	b2db      	uxtb	r3, r3
 800387a:	72fb      	strb	r3, [r7, #11]
					val |= 0xC0;    //force penguin 180 rotation
 800387c:	7afb      	ldrb	r3, [r7, #11]
 800387e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003882:	b2db      	uxtb	r3, r3
 8003884:	72fb      	strb	r3, [r7, #11]
				}
				//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
				goto common_MC;
 8003886:	e055      	b.n	8003934 <tft_setRotation+0x278>
		}
		else if (is8347) {
 8003888:	4b31      	ldr	r3, [pc, #196]	@ (8003950 <tft_setRotation+0x294>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d06f      	beq.n	8003970 <tft_setRotation+0x2b4>
			_MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 8003890:	4b30      	ldr	r3, [pc, #192]	@ (8003954 <tft_setRotation+0x298>)
 8003892:	2202      	movs	r2, #2
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	4b30      	ldr	r3, [pc, #192]	@ (8003958 <tft_setRotation+0x29c>)
 8003898:	2206      	movs	r2, #6
 800389a:	801a      	strh	r2, [r3, #0]
 800389c:	4b2f      	ldr	r3, [pc, #188]	@ (800395c <tft_setRotation+0x2a0>)
 800389e:	2222      	movs	r2, #34	@ 0x22
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003960 <tft_setRotation+0x2a4>)
 80038a4:	2202      	movs	r2, #2
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003964 <tft_setRotation+0x2a8>)
 80038aa:	2204      	movs	r2, #4
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003968 <tft_setRotation+0x2ac>)
 80038b0:	2206      	movs	r2, #6
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	4b2d      	ldr	r3, [pc, #180]	@ (800396c <tft_setRotation+0x2b0>)
 80038b6:	2208      	movs	r2, #8
 80038b8:	801a      	strh	r2, [r3, #0]
			if (_lcd_ID == 0x0065) {             //HX8352-B
 80038ba:	4b24      	ldr	r3, [pc, #144]	@ (800394c <tft_setRotation+0x290>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	2b65      	cmp	r3, #101	@ 0x65
 80038c0:	d121      	bne.n	8003906 <tft_setRotation+0x24a>
				val |= 0x01;    //GS=1
 80038c2:	7afb      	ldrb	r3, [r7, #11]
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <tft_setRotation+0x226>
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	f083 032c 	eor.w	r3, r3, #44	@ 0x2c
 80038dc:	43db      	mvns	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	72fb      	strb	r3, [r7, #11]
				if (r & 1) _MC = 0x82, _MP = 0x80;
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <tft_setRotation+0x23e>
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <tft_setRotation+0x298>)
 80038ee:	2282      	movs	r2, #130	@ 0x82
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <tft_setRotation+0x29c>)
 80038f4:	2280      	movs	r2, #128	@ 0x80
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	e005      	b.n	8003906 <tft_setRotation+0x24a>
				else _MC = 0x80, _MP = 0x82;
 80038fa:	4b16      	ldr	r3, [pc, #88]	@ (8003954 <tft_setRotation+0x298>)
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <tft_setRotation+0x29c>)
 8003902:	2282      	movs	r2, #130	@ 0x82
 8003904:	801a      	strh	r2, [r3, #0]
			}
			if (_lcd_ID == 0x5252) {             //HX8352-A
 8003906:	4b11      	ldr	r3, [pc, #68]	@ (800394c <tft_setRotation+0x290>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	f245 2252 	movw	r2, #21074	@ 0x5252
 800390e:	4293      	cmp	r3, r2
 8003910:	d145      	bne.n	800399e <tft_setRotation+0x2e2>
				val |= 0x02;   //VERT_SCROLLON
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	b2db      	uxtb	r3, r3
 800391a:	72fb      	strb	r3, [r7, #11]
				if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 800391c:	7afb      	ldrb	r3, [r7, #11]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d03b      	beq.n	800399e <tft_setRotation+0x2e2>
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	f083 032b 	eor.w	r3, r3, #43	@ 0x2b
 800392c:	43db      	mvns	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	72fb      	strb	r3, [r7, #11]
			}
			goto common_BGR;
 8003932:	e034      	b.n	800399e <tft_setRotation+0x2e2>
				goto common_MC;
 8003934:	bf00      	nop
 8003936:	e01c      	b.n	8003972 <tft_setRotation+0x2b6>
 8003938:	200000da 	.word	0x200000da
 800393c:	200000d2 	.word	0x200000d2
 8003940:	20000004 	.word	0x20000004
 8003944:	20000006 	.word	0x20000006
 8003948:	200000d6 	.word	0x200000d6
 800394c:	200000d8 	.word	0x200000d8
 8003950:	200000cb 	.word	0x200000cb
 8003954:	200000de 	.word	0x200000de
 8003958:	200000e0 	.word	0x200000e0
 800395c:	200000e2 	.word	0x200000e2
 8003960:	200000e4 	.word	0x200000e4
 8003964:	200000e6 	.word	0x200000e6
 8003968:	200000e8 	.word	0x200000e8
 800396c:	200000ea 	.word	0x200000ea
		}
		common_MC:
 8003970:	bf00      	nop
		_MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8003972:	4b8a      	ldr	r3, [pc, #552]	@ (8003b9c <tft_setRotation+0x4e0>)
 8003974:	222a      	movs	r2, #42	@ 0x2a
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	4b89      	ldr	r3, [pc, #548]	@ (8003ba0 <tft_setRotation+0x4e4>)
 800397a:	222b      	movs	r2, #43	@ 0x2b
 800397c:	801a      	strh	r2, [r3, #0]
 800397e:	4b89      	ldr	r3, [pc, #548]	@ (8003ba4 <tft_setRotation+0x4e8>)
 8003980:	222c      	movs	r2, #44	@ 0x2c
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	4b88      	ldr	r3, [pc, #544]	@ (8003ba8 <tft_setRotation+0x4ec>)
 8003986:	222a      	movs	r2, #42	@ 0x2a
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	4b88      	ldr	r3, [pc, #544]	@ (8003bac <tft_setRotation+0x4f0>)
 800398c:	222a      	movs	r2, #42	@ 0x2a
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	4b87      	ldr	r3, [pc, #540]	@ (8003bb0 <tft_setRotation+0x4f4>)
 8003992:	222b      	movs	r2, #43	@ 0x2b
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	4b87      	ldr	r3, [pc, #540]	@ (8003bb4 <tft_setRotation+0x4f8>)
 8003998:	222b      	movs	r2, #43	@ 0x2b
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	e000      	b.n	80039a0 <tft_setRotation+0x2e4>
			goto common_BGR;
 800399e:	bf00      	nop
		common_BGR:
		WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 80039a0:	4b85      	ldr	r3, [pc, #532]	@ (8003bb8 <tft_setRotation+0x4fc>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <tft_setRotation+0x2f0>
 80039a8:	2316      	movs	r3, #22
 80039aa:	e000      	b.n	80039ae <tft_setRotation+0x2f2>
 80039ac:	2336      	movs	r3, #54	@ 0x36
 80039ae:	f107 020b 	add.w	r2, r7, #11
 80039b2:	2101      	movs	r1, #1
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fd4f 	bl	8001458 <WriteCmdParamN>
		_lcd_madctl = val;
 80039ba:	7afb      	ldrb	r3, [r7, #11]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b7f      	ldr	r3, [pc, #508]	@ (8003bbc <tft_setRotation+0x500>)
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	e0a5      	b.n	8003b10 <tft_setRotation+0x454>
		//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
	}
	// cope with 9320 variants
	else {
		switch (_lcd_ID) {
 80039c4:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc0 <tft_setRotation+0x504>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <tft_setRotation+0x33c>
 80039d0:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80039d4:	4293      	cmp	r3, r2
 80039d6:	dc4f      	bgt.n	8003a78 <tft_setRotation+0x3bc>
 80039d8:	f249 3226 	movw	r2, #37670	@ 0x9326
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00b      	beq.n	80039f8 <tft_setRotation+0x33c>
 80039e0:	f249 3226 	movw	r2, #37670	@ 0x9326
 80039e4:	4293      	cmp	r3, r2
 80039e6:	dc47      	bgt.n	8003a78 <tft_setRotation+0x3bc>
 80039e8:	f245 4220 	movw	r2, #21536	@ 0x5420
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <tft_setRotation+0x33c>
 80039f0:	f247 7293 	movw	r2, #30611	@ 0x7793
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d13f      	bne.n	8003a78 <tft_setRotation+0x3bc>
#endif
		case 0x5420:
		case 0x7793:
		case 0x9326:
		case 0xB509:
			_MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80039f8:	4b68      	ldr	r3, [pc, #416]	@ (8003b9c <tft_setRotation+0x4e0>)
 80039fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	4b67      	ldr	r3, [pc, #412]	@ (8003ba0 <tft_setRotation+0x4e4>)
 8003a02:	f240 2201 	movw	r2, #513	@ 0x201
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	4b66      	ldr	r3, [pc, #408]	@ (8003ba4 <tft_setRotation+0x4e8>)
 8003a0a:	f240 2202 	movw	r2, #514	@ 0x202
 8003a0e:	801a      	strh	r2, [r3, #0]
 8003a10:	4b65      	ldr	r3, [pc, #404]	@ (8003ba8 <tft_setRotation+0x4ec>)
 8003a12:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	4b64      	ldr	r3, [pc, #400]	@ (8003bac <tft_setRotation+0x4f0>)
 8003a1a:	f240 2211 	movw	r2, #529	@ 0x211
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	4b63      	ldr	r3, [pc, #396]	@ (8003bb0 <tft_setRotation+0x4f4>)
 8003a22:	f240 2212 	movw	r2, #530	@ 0x212
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	4b62      	ldr	r3, [pc, #392]	@ (8003bb4 <tft_setRotation+0x4f8>)
 8003a2a:	f240 2213 	movw	r2, #531	@ 0x213
 8003a2e:	801a      	strh	r2, [r3, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 8003a30:	7afb      	ldrb	r3, [r7, #11]
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003a3e:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8003a40:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003a44:	82bb      	strh	r3, [r7, #20]
			if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8003a46:	4b5e      	ldr	r3, [pc, #376]	@ (8003bc0 <tft_setRotation+0x504>)
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d005      	beq.n	8003a5e <tft_setRotation+0x3a2>
 8003a52:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc0 <tft_setRotation+0x504>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d102      	bne.n	8003a64 <tft_setRotation+0x3a8>
 8003a5e:	8abb      	ldrh	r3, [r7, #20]
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	82bb      	strh	r3, [r7, #20]
			tft_writeCmdData(0x400, GS | NL);
 8003a64:	8a3a      	ldrh	r2, [r7, #16]
 8003a66:	8abb      	ldrh	r3, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003a72:	f7fe fb0d 	bl	8002090 <tft_writeCmdData>
			goto common_SS;
 8003a76:	e024      	b.n	8003ac2 <tft_setRotation+0x406>
		default:
			_MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003a78:	4b48      	ldr	r3, [pc, #288]	@ (8003b9c <tft_setRotation+0x4e0>)
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	4b48      	ldr	r3, [pc, #288]	@ (8003ba0 <tft_setRotation+0x4e4>)
 8003a80:	2221      	movs	r2, #33	@ 0x21
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <tft_setRotation+0x4e8>)
 8003a86:	2222      	movs	r2, #34	@ 0x22
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ba8 <tft_setRotation+0x4ec>)
 8003a8c:	2250      	movs	r2, #80	@ 0x50
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	4b46      	ldr	r3, [pc, #280]	@ (8003bac <tft_setRotation+0x4f0>)
 8003a92:	2251      	movs	r2, #81	@ 0x51
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	4b46      	ldr	r3, [pc, #280]	@ (8003bb0 <tft_setRotation+0x4f4>)
 8003a98:	2252      	movs	r2, #82	@ 0x52
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	4b45      	ldr	r3, [pc, #276]	@ (8003bb4 <tft_setRotation+0x4f8>)
 8003a9e:	2253      	movs	r2, #83	@ 0x53
 8003aa0:	801a      	strh	r2, [r3, #0]
			GS = (val & 0x80) ? (1 << 15) : 0;
 8003aa2:	7afb      	ldrb	r3, [r7, #11]
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003aac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003ab0:	823b      	strh	r3, [r7, #16]
			tft_writeCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8003ab2:	8a3b      	ldrh	r3, [r7, #16]
 8003ab4:	f443 531c 	orr.w	r3, r3, #9984	@ 0x2700
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4619      	mov	r1, r3
 8003abc:	2060      	movs	r0, #96	@ 0x60
 8003abe:	f7fe fae7 	bl	8002090 <tft_writeCmdData>
			common_SS:
			SS_v = (val & 0x40) ? (1 << 8) : 0;
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	81fb      	strh	r3, [r7, #14]
			tft_writeCmdData(0x01, SS_v);     // set Driver Output Control
 8003ace:	89fb      	ldrh	r3, [r7, #14]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7fe fadc 	bl	8002090 <tft_writeCmdData>
			common_ORG:
			ORG = (val & 0x20) ? (1 << 3) : 0;
 8003ad8:	7afb      	ldrb	r3, [r7, #11]
 8003ada:	109b      	asrs	r3, r3, #2
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	82fb      	strh	r3, [r7, #22]
				if (rotation == 1 || rotation == 2) {
					val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
				}
			}
#endif
			if (val & 0x08)
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <tft_setRotation+0x43a>
				ORG |= 0x1000;  //BGR
 8003aee:	8afb      	ldrh	r3, [r7, #22]
 8003af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003af4:	82fb      	strh	r3, [r7, #22]
			_lcd_madctl = ORG | 0x0030;
 8003af6:	8afb      	ldrh	r3, [r7, #22]
 8003af8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	4b2f      	ldr	r3, [pc, #188]	@ (8003bbc <tft_setRotation+0x500>)
 8003b00:	801a      	strh	r2, [r3, #0]
			tft_writeCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8003b02:	4b2e      	ldr	r3, [pc, #184]	@ (8003bbc <tft_setRotation+0x500>)
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	2003      	movs	r0, #3
 8003b0a:	f7fe fac1 	bl	8002090 <tft_writeCmdData>
			break;
 8003b0e:	bf00      	nop
				tft_writeCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
			break;
#endif
		}
	}
	if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8003b10:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc4 <tft_setRotation+0x508>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d023      	beq.n	8003b64 <tft_setRotation+0x4a8>
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <tft_setRotation+0x50c>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11d      	bne.n	8003b64 <tft_setRotation+0x4a8>
		uint16_t x;
		x = _MC, _MC = _MP, _MP = x;
 8003b28:	4b1c      	ldr	r3, [pc, #112]	@ (8003b9c <tft_setRotation+0x4e0>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	81bb      	strh	r3, [r7, #12]
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <tft_setRotation+0x4e4>)
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <tft_setRotation+0x4e0>)
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <tft_setRotation+0x4e4>)
 8003b38:	89bb      	ldrh	r3, [r7, #12]
 8003b3a:	8013      	strh	r3, [r2, #0]
		x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba8 <tft_setRotation+0x4ec>)
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	81bb      	strh	r3, [r7, #12]
 8003b42:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb0 <tft_setRotation+0x4f4>)
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	4b18      	ldr	r3, [pc, #96]	@ (8003ba8 <tft_setRotation+0x4ec>)
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <tft_setRotation+0x4f4>)
 8003b4c:	89bb      	ldrh	r3, [r7, #12]
 8003b4e:	8013      	strh	r3, [r2, #0]
		x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8003b50:	4b16      	ldr	r3, [pc, #88]	@ (8003bac <tft_setRotation+0x4f0>)
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	81bb      	strh	r3, [r7, #12]
 8003b56:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <tft_setRotation+0x4f8>)
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <tft_setRotation+0x4f0>)
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <tft_setRotation+0x4f8>)
 8003b60:	89bb      	ldrh	r3, [r7, #12]
 8003b62:	8013      	strh	r3, [r2, #0]
	}
	setAddrWindow(0, 0, width() - 1, height() - 1);
 8003b64:	f7fd f92a 	bl	8000dbc <width>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	b21c      	sxth	r4, r3
 8003b70:	f7fd f930 	bl	8000dd4 <height>
 8003b74:	4603      	mov	r3, r0
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	b21b      	sxth	r3, r3
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	2100      	movs	r1, #0
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7fe f8f5 	bl	8001d70 <setAddrWindow>
	tft_vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8003b86:	2200      	movs	r2, #0
 8003b88:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f000 f923 	bl	8003dd8 <tft_vertScroll>
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd90      	pop	{r4, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200000de 	.word	0x200000de
 8003ba0:	200000e0 	.word	0x200000e0
 8003ba4:	200000e2 	.word	0x200000e2
 8003ba8:	200000e4 	.word	0x200000e4
 8003bac:	200000e6 	.word	0x200000e6
 8003bb0:	200000e8 	.word	0x200000e8
 8003bb4:	200000ea 	.word	0x200000ea
 8003bb8:	200000cb 	.word	0x200000cb
 8003bbc:	200000dc 	.word	0x200000dc
 8003bc0:	200000d8 	.word	0x200000d8
 8003bc4:	200000d2 	.word	0x200000d2
 8003bc8:	200000d6 	.word	0x200000d6

08003bcc <tft_drawPixel>:
{
	return rotation;
}

void tft_drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	80fb      	strh	r3, [r7, #6]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	80bb      	strh	r3, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	807b      	strh	r3, [r7, #2]
	// MCUFRIEND just plots at edge if you try to write outside of the box:
	if (x < 0 || y < 0 || x >= width() || y >= height())
 8003bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f2c0 80e7 	blt.w	8003db6 <tft_drawPixel+0x1ea>
 8003be8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f2c0 80e2 	blt.w	8003db6 <tft_drawPixel+0x1ea>
 8003bf2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8003bf6:	f7fd f8e1 	bl	8000dbc <width>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	f280 80da 	bge.w	8003db6 <tft_drawPixel+0x1ea>
 8003c02:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003c06:	f7fd f8e5 	bl	8000dd4 <height>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	429c      	cmp	r4, r3
 8003c0e:	f280 80d2 	bge.w	8003db6 <tft_drawPixel+0x1ea>
		return;
#if defined(SUPPORT_9488_555)
	if (is555) color = color565_to_555(color);
 8003c12:	4b6b      	ldr	r3, [pc, #428]	@ (8003dc0 <tft_drawPixel+0x1f4>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <tft_drawPixel+0x5a>
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fd f8e5 	bl	8000dec <color565_to_555>
 8003c22:	4603      	mov	r3, r0
 8003c24:	807b      	strh	r3, [r7, #2]
#endif
	setAddrWindow(x, y, x, y);
 8003c26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c2e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003c32:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003c36:	f7fe f89b 	bl	8001d70 <setAddrWindow>
	//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
	if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003c3a:	4b62      	ldr	r3, [pc, #392]	@ (8003dc4 <tft_drawPixel+0x1f8>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80b1 	beq.w	8003da6 <tft_drawPixel+0x1da>
 8003c44:	2101      	movs	r1, #1
 8003c46:	4860      	ldr	r0, [pc, #384]	@ (8003dc8 <tft_drawPixel+0x1fc>)
 8003c48:	f7fd f86a 	bl	8000d20 <PIN_LOW>
 8003c4c:	2110      	movs	r1, #16
 8003c4e:	485f      	ldr	r0, [pc, #380]	@ (8003dcc <tft_drawPixel+0x200>)
 8003c50:	f7fd f866 	bl	8000d20 <PIN_LOW>
 8003c54:	4b5e      	ldr	r3, [pc, #376]	@ (8003dd0 <tft_drawPixel+0x204>)
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd0 <tft_drawPixel+0x204>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	73bb      	strb	r3, [r7, #14]
 8003c64:	4b59      	ldr	r3, [pc, #356]	@ (8003dcc <tft_drawPixel+0x200>)
 8003c66:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8003c6a:	619a      	str	r2, [r3, #24]
 8003c6c:	4b56      	ldr	r3, [pc, #344]	@ (8003dc8 <tft_drawPixel+0x1fc>)
 8003c6e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8003c72:	619a      	str	r2, [r3, #24]
 8003c74:	4b57      	ldr	r3, [pc, #348]	@ (8003dd4 <tft_drawPixel+0x208>)
 8003c76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c7a:	619a      	str	r2, [r3, #24]
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	025b      	lsls	r3, r3, #9
 8003c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c96:	431a      	orrs	r2, r3
 8003c98:	4b4c      	ldr	r3, [pc, #304]	@ (8003dcc <tft_drawPixel+0x200>)
 8003c9a:	619a      	str	r2, [r3, #24]
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	105b      	asrs	r3, r3, #1
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	431a      	orrs	r2, r3
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	4b41      	ldr	r3, [pc, #260]	@ (8003dc8 <tft_drawPixel+0x1fc>)
 8003cc2:	619a      	str	r2, [r3, #24]
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	019b      	lsls	r3, r3, #6
 8003cc8:	4a42      	ldr	r2, [pc, #264]	@ (8003dd4 <tft_drawPixel+0x208>)
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	6193      	str	r3, [r2, #24]
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	483e      	ldr	r0, [pc, #248]	@ (8003dcc <tft_drawPixel+0x200>)
 8003cd4:	f7fd f824 	bl	8000d20 <PIN_LOW>
 8003cd8:	2102      	movs	r1, #2
 8003cda:	483c      	ldr	r0, [pc, #240]	@ (8003dcc <tft_drawPixel+0x200>)
 8003cdc:	f7fd f820 	bl	8000d20 <PIN_LOW>
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	483a      	ldr	r0, [pc, #232]	@ (8003dcc <tft_drawPixel+0x200>)
 8003ce4:	f7fd f81c 	bl	8000d20 <PIN_LOW>
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4838      	ldr	r0, [pc, #224]	@ (8003dcc <tft_drawPixel+0x200>)
 8003cec:	f7fd f828 	bl	8000d40 <PIN_HIGH>
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4836      	ldr	r0, [pc, #216]	@ (8003dcc <tft_drawPixel+0x200>)
 8003cf4:	f7fd f824 	bl	8000d40 <PIN_HIGH>
 8003cf8:	4b34      	ldr	r3, [pc, #208]	@ (8003dcc <tft_drawPixel+0x200>)
 8003cfa:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 8003cfe:	619a      	str	r2, [r3, #24]
 8003d00:	4b31      	ldr	r3, [pc, #196]	@ (8003dc8 <tft_drawPixel+0x1fc>)
 8003d02:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8003d06:	619a      	str	r2, [r3, #24]
 8003d08:	4b32      	ldr	r3, [pc, #200]	@ (8003dd4 <tft_drawPixel+0x208>)
 8003d0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d0e:	619a      	str	r2, [r3, #24]
 8003d10:	7bbb      	ldrb	r3, [r7, #14]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8003d18:	7bbb      	ldrb	r3, [r7, #14]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d20:	431a      	orrs	r2, r3
 8003d22:	7bbb      	ldrb	r3, [r7, #14]
 8003d24:	025b      	lsls	r3, r3, #9
 8003d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	4b27      	ldr	r3, [pc, #156]	@ (8003dcc <tft_drawPixel+0x200>)
 8003d2e:	619a      	str	r2, [r3, #24]
 8003d30:	7bbb      	ldrb	r3, [r7, #14]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003d38:	7bbb      	ldrb	r3, [r7, #14]
 8003d3a:	105b      	asrs	r3, r3, #1
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	7bbb      	ldrb	r3, [r7, #14]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	431a      	orrs	r2, r3
 8003d54:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc8 <tft_drawPixel+0x1fc>)
 8003d56:	619a      	str	r2, [r3, #24]
 8003d58:	7bbb      	ldrb	r3, [r7, #14]
 8003d5a:	019b      	lsls	r3, r3, #6
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <tft_drawPixel+0x208>)
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	6193      	str	r3, [r2, #24]
 8003d64:	2102      	movs	r1, #2
 8003d66:	4819      	ldr	r0, [pc, #100]	@ (8003dcc <tft_drawPixel+0x200>)
 8003d68:	f7fc ffda 	bl	8000d20 <PIN_LOW>
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4817      	ldr	r0, [pc, #92]	@ (8003dcc <tft_drawPixel+0x200>)
 8003d70:	f7fc ffd6 	bl	8000d20 <PIN_LOW>
 8003d74:	2102      	movs	r1, #2
 8003d76:	4815      	ldr	r0, [pc, #84]	@ (8003dcc <tft_drawPixel+0x200>)
 8003d78:	f7fc ffd2 	bl	8000d20 <PIN_LOW>
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	4813      	ldr	r0, [pc, #76]	@ (8003dcc <tft_drawPixel+0x200>)
 8003d80:	f7fc ffde 	bl	8000d40 <PIN_HIGH>
 8003d84:	2102      	movs	r1, #2
 8003d86:	4811      	ldr	r0, [pc, #68]	@ (8003dcc <tft_drawPixel+0x200>)
 8003d88:	f7fc ffda 	bl	8000d40 <PIN_HIGH>
 8003d8c:	2110      	movs	r1, #16
 8003d8e:	480f      	ldr	r0, [pc, #60]	@ (8003dcc <tft_drawPixel+0x200>)
 8003d90:	f7fc ffd6 	bl	8000d40 <PIN_HIGH>
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd f908 	bl	8000fac <write24>
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	480a      	ldr	r0, [pc, #40]	@ (8003dc8 <tft_drawPixel+0x1fc>)
 8003da0:	f7fc ffce 	bl	8000d40 <PIN_HIGH>
 8003da4:	e008      	b.n	8003db8 <tft_drawPixel+0x1ec>
		tft_writeCmdData(_MW, color);
 8003da6:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <tft_drawPixel+0x204>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe f96e 	bl	8002090 <tft_writeCmdData>
 8003db4:	e000      	b.n	8003db8 <tft_drawPixel+0x1ec>
		return;
 8003db6:	bf00      	nop
}
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd90      	pop	{r4, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200000cc 	.word	0x200000cc
 8003dc4:	200000cd 	.word	0x200000cd
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	40020000 	.word	0x40020000
 8003dd0:	200000e2 	.word	0x200000e2
 8003dd4:	40020800 	.word	0x40020800

08003dd8 <tft_vertScroll>:

void tft_vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	80fb      	strh	r3, [r7, #6]
 8003de2:	460b      	mov	r3, r1
 8003de4:	80bb      	strh	r3, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003dea:	4b89      	ldr	r3, [pc, #548]	@ (8004010 <tft_vertScroll+0x238>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	f249 3227 	movw	r2, #37671	@ 0x9327
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10b      	bne.n	8003e0e <tft_vertScroll+0x36>
		if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003df6:	4b87      	ldr	r3, [pc, #540]	@ (8004014 <tft_vertScroll+0x23c>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <tft_vertScroll+0x2e>
 8003dfe:	4b85      	ldr	r3, [pc, #532]	@ (8004014 <tft_vertScroll+0x23c>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d103      	bne.n	8003e0e <tft_vertScroll+0x36>
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	3320      	adds	r3, #32
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	80fb      	strh	r3, [r7, #6]
	}
#endif
	int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	88bb      	ldrh	r3, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	82fb      	strh	r3, [r7, #22]
	int16_t vsp;
	int16_t sea = top;
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003e22:	4b7b      	ldr	r3, [pc, #492]	@ (8004010 <tft_vertScroll+0x238>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	f249 3227 	movw	r2, #37671	@ 0x9327
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d103      	bne.n	8003e36 <tft_vertScroll+0x5e>
 8003e2e:	8afb      	ldrh	r3, [r7, #22]
 8003e30:	3320      	adds	r3, #32
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	82fb      	strh	r3, [r7, #22]
	if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003e36:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003e3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e3e:	425b      	negs	r3, r3
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dd05      	ble.n	8003e50 <tft_vertScroll+0x78>
 8003e44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	db01      	blt.n	8003e54 <tft_vertScroll+0x7c>
 8003e50:	2300      	movs	r3, #0
 8003e52:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	4413      	add	r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	82bb      	strh	r3, [r7, #20]
	if (offset < 0)
 8003e5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da04      	bge.n	8003e70 <tft_vertScroll+0x98>
		vsp += scrollines;          //keep in unsigned range
 8003e66:	8aba      	ldrh	r2, [r7, #20]
 8003e68:	88bb      	ldrh	r3, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	82bb      	strh	r3, [r7, #20]
	sea = top + scrollines - 1;
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	88bb      	ldrh	r3, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	827b      	strh	r3, [r7, #18]
	if (_lcd_capable & MIPI_DCS_REV1) {
 8003e7e:	4b66      	ldr	r3, [pc, #408]	@ (8004018 <tft_vertScroll+0x240>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d071      	beq.n	8003f6e <tft_vertScroll+0x196>
		uint8_t d[6];           // for multi-byte parameters
		d[0] = top >> 8;        //TFA
 8003e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e8e:	121b      	asrs	r3, r3, #8
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	733b      	strb	r3, [r7, #12]
		d[1] = top;
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	737b      	strb	r3, [r7, #13]
		d[2] = scrollines >> 8; //VSA
 8003e9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ea0:	121b      	asrs	r3, r3, #8
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	73bb      	strb	r3, [r7, #14]
		d[3] = scrollines;
 8003ea8:	88bb      	ldrh	r3, [r7, #4]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	73fb      	strb	r3, [r7, #15]
		d[4] = bfa >> 8;        //BFA
 8003eae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003eb2:	121b      	asrs	r3, r3, #8
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	743b      	strb	r3, [r7, #16]
		d[5] = bfa;
 8003eba:	8afb      	ldrh	r3, [r7, #22]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	747b      	strb	r3, [r7, #17]
		WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8003ec0:	4b56      	ldr	r3, [pc, #344]	@ (800401c <tft_vertScroll+0x244>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <tft_vertScroll+0xf4>
 8003ec8:	230e      	movs	r3, #14
 8003eca:	e000      	b.n	8003ece <tft_vertScroll+0xf6>
 8003ecc:	2333      	movs	r3, #51	@ 0x33
 8003ece:	f107 020c 	add.w	r2, r7, #12
 8003ed2:	2106      	movs	r1, #6
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fabf 	bl	8001458 <WriteCmdParamN>
		//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8003eda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ede:	121b      	asrs	r3, r3, #8
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	733b      	strb	r3, [r7, #12]
		d[1] = vsp;
 8003ee6:	8abb      	ldrh	r3, [r7, #20]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	737b      	strb	r3, [r7, #13]
		WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003eec:	4b4b      	ldr	r3, [pc, #300]	@ (800401c <tft_vertScroll+0x244>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <tft_vertScroll+0x120>
 8003ef4:	2314      	movs	r3, #20
 8003ef6:	e000      	b.n	8003efa <tft_vertScroll+0x122>
 8003ef8:	2337      	movs	r3, #55	@ 0x37
 8003efa:	f107 020c 	add.w	r2, r7, #12
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd faa9 	bl	8001458 <WriteCmdParamN>
		if (is8347) {
 8003f06:	4b45      	ldr	r3, [pc, #276]	@ (800401c <tft_vertScroll+0x244>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01f      	beq.n	8003f4e <tft_vertScroll+0x176>
			d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003f0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <tft_vertScroll+0x152>
 8003f16:	4b3e      	ldr	r3, [pc, #248]	@ (8004010 <tft_vertScroll+0x238>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	f248 3247 	movw	r2, #33607	@ 0x8347
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <tft_vertScroll+0x14e>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e002      	b.n	8003f2c <tft_vertScroll+0x154>
 8003f26:	2308      	movs	r3, #8
 8003f28:	e000      	b.n	8003f2c <tft_vertScroll+0x154>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003f2e:	4b38      	ldr	r3, [pc, #224]	@ (8004010 <tft_vertScroll+0x238>)
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	f248 3247 	movw	r2, #33607	@ 0x8347
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <tft_vertScroll+0x166>
 8003f3a:	2318      	movs	r3, #24
 8003f3c:	e000      	b.n	8003f40 <tft_vertScroll+0x168>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f107 020c 	add.w	r2, r7, #12
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fa86 	bl	8001458 <WriteCmdParamN>
 8003f4c:	e05d      	b.n	800400a <tft_vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003f4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d159      	bne.n	800400a <tft_vertScroll+0x232>
 8003f56:	4b30      	ldr	r3, [pc, #192]	@ (8004018 <tft_vertScroll+0x240>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d053      	beq.n	800400a <tft_vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	2013      	movs	r0, #19
 8003f68:	f7fd fa76 	bl	8001458 <WriteCmdParamN>
 8003f6c:	e04d      	b.n	800400a <tft_vertScroll+0x232>
		}
		return;
	}
	// cope with 9320 style variants:
	switch (_lcd_ID) {
 8003f6e:	4b28      	ldr	r3, [pc, #160]	@ (8004010 <tft_vertScroll+0x238>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <tft_vertScroll+0x1f2>
 8003f7a:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	dc34      	bgt.n	8003fec <tft_vertScroll+0x214>
 8003f82:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <tft_vertScroll+0x1f2>
 8003f8a:	f249 3226 	movw	r2, #37670	@ 0x9326
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	dc2c      	bgt.n	8003fec <tft_vertScroll+0x214>
 8003f92:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <tft_vertScroll+0x1f2>
 8003f9a:	f247 7293 	movw	r2, #30611	@ 0x7793
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	dc24      	bgt.n	8003fec <tft_vertScroll+0x214>
 8003fa2:	f245 4220 	movw	r2, #21536	@ 0x5420
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <tft_vertScroll+0x1f2>
 8003faa:	f247 7283 	movw	r2, #30595	@ 0x7783
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d11c      	bne.n	8003fec <tft_vertScroll+0x214>
	case 0x7783:
		tft_writeCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <tft_vertScroll+0x248>)
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	2061      	movs	r0, #97	@ 0x61
 8003fba:	f7fe f869 	bl	8002090 <tft_writeCmdData>
		tft_writeCmdData(0x6A, vsp);        //VL#
 8003fbe:	8abb      	ldrh	r3, [r7, #20]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	206a      	movs	r0, #106	@ 0x6a
 8003fc4:	f7fe f864 	bl	8002090 <tft_writeCmdData>
		break;
 8003fc8:	e01f      	b.n	800400a <tft_vertScroll+0x232>
#endif
	case 0x5420:
	case 0x7793:
	case 0x9326:
	case 0xB509:
		tft_writeCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <tft_vertScroll+0x248>)
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f240 4001 	movw	r0, #1025	@ 0x401
 8003fda:	f7fe f859 	bl	8002090 <tft_writeCmdData>
		tft_writeCmdData(0x404, vsp);       //VL#
 8003fde:	8abb      	ldrh	r3, [r7, #20]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f240 4004 	movw	r0, #1028	@ 0x404
 8003fe6:	f7fe f853 	bl	8002090 <tft_writeCmdData>
		break;
 8003fea:	e00e      	b.n	800400a <tft_vertScroll+0x232>
	default:
		// 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
		tft_writeCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003fec:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <tft_vertScroll+0x248>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	2061      	movs	r0, #97	@ 0x61
 8003ffa:	f7fe f849 	bl	8002090 <tft_writeCmdData>
		tft_writeCmdData(0x6A, vsp);        //VL#
 8003ffe:	8abb      	ldrh	r3, [r7, #20]
 8004000:	4619      	mov	r1, r3
 8004002:	206a      	movs	r0, #106	@ 0x6a
 8004004:	f7fe f844 	bl	8002090 <tft_writeCmdData>
		break;
 8004008:	bf00      	nop
	}
}
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200000d8 	.word	0x200000d8
 8004014:	200000d2 	.word	0x200000d2
 8004018:	200000d6 	.word	0x200000d6
 800401c:	200000cb 	.word	0x200000cb
 8004020:	200000da 	.word	0x200000da

08004024 <tft_invertDisplay>:

void tft_invertDisplay(uint8_t i)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	_lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 800402e:	4b4c      	ldr	r3, [pc, #304]	@ (8004160 <tft_invertDisplay+0x13c>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	b21a      	sxth	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	b21b      	sxth	r3, r3
 8004046:	4053      	eors	r3, r2
 8004048:	b21b      	sxth	r3, r3
 800404a:	b29a      	uxth	r2, r3
 800404c:	4b45      	ldr	r3, [pc, #276]	@ (8004164 <tft_invertDisplay+0x140>)
 800404e:	801a      	strh	r2, [r3, #0]
	if (_lcd_capable & MIPI_DCS_REV1) {
 8004050:	4b43      	ldr	r3, [pc, #268]	@ (8004160 <tft_invertDisplay+0x13c>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d035      	beq.n	80040c8 <tft_invertDisplay+0xa4>
		if (is8347) {
 800405c:	4b42      	ldr	r3, [pc, #264]	@ (8004168 <tft_invertDisplay+0x144>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d024      	beq.n	80040ae <tft_invertDisplay+0x8a>
			// HX8347D: 0x36 Panel Characteristic. REV_Panel
			// HX8347A: 0x36 is Display Control 10
			if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004064:	4b41      	ldr	r3, [pc, #260]	@ (800416c <tft_invertDisplay+0x148>)
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	f248 3247 	movw	r2, #33607	@ 0x8347
 800406c:	4293      	cmp	r3, r2
 800406e:	d005      	beq.n	800407c <tft_invertDisplay+0x58>
 8004070:	4b3e      	ldr	r3, [pc, #248]	@ (800416c <tft_invertDisplay+0x148>)
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	f245 2252 	movw	r2, #21074	@ 0x5252
 8004078:	4293      	cmp	r3, r2
 800407a:	d108      	bne.n	800408e <tft_invertDisplay+0x6a>
				val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 800407c:	4b39      	ldr	r3, [pc, #228]	@ (8004164 <tft_invertDisplay+0x140>)
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <tft_invertDisplay+0x64>
 8004084:	2306      	movs	r3, #6
 8004086:	e000      	b.n	800408a <tft_invertDisplay+0x66>
 8004088:	2302      	movs	r3, #2
 800408a:	73fb      	strb	r3, [r7, #15]
 800408c:	e007      	b.n	800409e <tft_invertDisplay+0x7a>
			else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 800408e:	4b35      	ldr	r3, [pc, #212]	@ (8004164 <tft_invertDisplay+0x140>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <tft_invertDisplay+0x76>
 8004096:	2308      	movs	r3, #8
 8004098:	e000      	b.n	800409c <tft_invertDisplay+0x78>
 800409a:	230a      	movs	r3, #10
 800409c:	73fb      	strb	r3, [r7, #15]
			// HX8347: 0x01 Display Mode has diff bit mapping for A, D
			WriteCmdParamN(0x01, 1, &val);
 800409e:	f107 030f 	add.w	r3, r7, #15
 80040a2:	461a      	mov	r2, r3
 80040a4:	2101      	movs	r1, #1
 80040a6:	2001      	movs	r0, #1
 80040a8:	f7fd f9d6 	bl	8001458 <WriteCmdParamN>
		} else
			WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
		return;
 80040ac:	e055      	b.n	800415a <tft_invertDisplay+0x136>
			WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 80040ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004164 <tft_invertDisplay+0x140>)
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <tft_invertDisplay+0x96>
 80040b6:	2321      	movs	r3, #33	@ 0x21
 80040b8:	e000      	b.n	80040bc <tft_invertDisplay+0x98>
 80040ba:	2320      	movs	r3, #32
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fd f9c9 	bl	8001458 <WriteCmdParamN>
 80040c6:	e048      	b.n	800415a <tft_invertDisplay+0x136>
	}
	// cope with 9320 style variants:
	switch (_lcd_ID) {
 80040c8:	4b28      	ldr	r3, [pc, #160]	@ (800416c <tft_invertDisplay+0x148>)
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d030      	beq.n	8004136 <tft_invertDisplay+0x112>
 80040d4:	f24b 5209 	movw	r2, #46345	@ 0xb509
 80040d8:	4293      	cmp	r3, r2
 80040da:	dc37      	bgt.n	800414c <tft_invertDisplay+0x128>
 80040dc:	f249 3226 	movw	r2, #37670	@ 0x9326
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d028      	beq.n	8004136 <tft_invertDisplay+0x112>
 80040e4:	f249 3226 	movw	r2, #37670	@ 0x9326
 80040e8:	4293      	cmp	r3, r2
 80040ea:	dc2f      	bgt.n	800414c <tft_invertDisplay+0x128>
 80040ec:	f249 2225 	movw	r2, #37413	@ 0x9225
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <tft_invertDisplay+0xf8>
 80040f4:	f249 2225 	movw	r2, #37413	@ 0x9225
 80040f8:	4293      	cmp	r3, r2
 80040fa:	dc27      	bgt.n	800414c <tft_invertDisplay+0x128>
 80040fc:	f247 7293 	movw	r2, #30611	@ 0x7793
 8004100:	4293      	cmp	r3, r2
 8004102:	d018      	beq.n	8004136 <tft_invertDisplay+0x112>
 8004104:	f247 7293 	movw	r2, #30611	@ 0x7793
 8004108:	4293      	cmp	r3, r2
 800410a:	dc1f      	bgt.n	800414c <tft_invertDisplay+0x128>
 800410c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8004110:	d004      	beq.n	800411c <tft_invertDisplay+0xf8>
 8004112:	f245 4220 	movw	r2, #21536	@ 0x5420
 8004116:	4293      	cmp	r3, r2
 8004118:	d00d      	beq.n	8004136 <tft_invertDisplay+0x112>
 800411a:	e017      	b.n	800414c <tft_invertDisplay+0x128>
#ifdef SUPPORT_0139
	case 0x0139:
#endif
	case 0x9225:                                        //REV is in reg(0x07) like Samsung
	case 0x0154:
		tft_writeCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 800411c:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <tft_invertDisplay+0x140>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	b21b      	sxth	r3, r3
 8004124:	f043 0313 	orr.w	r3, r3, #19
 8004128:	b21b      	sxth	r3, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	2007      	movs	r0, #7
 8004130:	f7fd ffae 	bl	8002090 <tft_writeCmdData>
		break;
 8004134:	e011      	b.n	800415a <tft_invertDisplay+0x136>
#endif
	case 0x5420:
	case 0x7793:
	case 0x9326:
	case 0xB509:
		tft_writeCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004136:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <tft_invertDisplay+0x140>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	b29b      	uxth	r3, r3
 8004140:	4619      	mov	r1, r3
 8004142:	f240 4001 	movw	r0, #1025	@ 0x401
 8004146:	f7fd ffa3 	bl	8002090 <tft_writeCmdData>
		break;
 800414a:	e006      	b.n	800415a <tft_invertDisplay+0x136>
	default:
		tft_writeCmdData(0x61, _lcd_rev);
 800414c:	4b05      	ldr	r3, [pc, #20]	@ (8004164 <tft_invertDisplay+0x140>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	4619      	mov	r1, r3
 8004152:	2061      	movs	r0, #97	@ 0x61
 8004154:	f7fd ff9c 	bl	8002090 <tft_writeCmdData>
		break;
 8004158:	bf00      	nop
	}
}
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200000d6 	.word	0x200000d6
 8004164:	200000da 	.word	0x200000da
 8004168:	200000cb 	.word	0x200000cb
 800416c:	200000d8 	.word	0x200000d8

08004170 <tft_drawFastVLine>:

void tft_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b085      	sub	sp, #20
 8004174:	af02      	add	r7, sp, #8
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	80fb      	strh	r3, [r7, #6]
 8004182:	4603      	mov	r3, r0
 8004184:	80bb      	strh	r3, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	807b      	strh	r3, [r7, #2]
 800418a:	4613      	mov	r3, r2
 800418c:	803b      	strh	r3, [r7, #0]
	tft_fillRect(x, y, 1, h, color);
 800418e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004192:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004196:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800419a:	883b      	ldrh	r3, [r7, #0]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	2201      	movs	r2, #1
 80041a2:	f000 f921 	bl	80043e8 <tft_fillRect>
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}

080041ae <tft_drawFastHLine>:

void tft_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80041ae:	b590      	push	{r4, r7, lr}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af02      	add	r7, sp, #8
 80041b4:	4604      	mov	r4, r0
 80041b6:	4608      	mov	r0, r1
 80041b8:	4611      	mov	r1, r2
 80041ba:	461a      	mov	r2, r3
 80041bc:	4623      	mov	r3, r4
 80041be:	80fb      	strh	r3, [r7, #6]
 80041c0:	4603      	mov	r3, r0
 80041c2:	80bb      	strh	r3, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
 80041c8:	4613      	mov	r3, r2
 80041ca:	803b      	strh	r3, [r7, #0]
	tft_fillRect(x, y, w, 1, color);
 80041cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80041d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80041d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80041d8:	883b      	ldrh	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2301      	movs	r3, #1
 80041de:	f000 f903 	bl	80043e8 <tft_fillRect>
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd90      	pop	{r4, r7, pc}

080041ea <tft_fillCircle>:
		}
	}
}

void tft_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80041ea:	b590      	push	{r4, r7, lr}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	461a      	mov	r2, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	80fb      	strh	r3, [r7, #6]
 80041fc:	4603      	mov	r3, r0
 80041fe:	80bb      	strh	r3, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
 8004204:	4613      	mov	r3, r2
 8004206:	803b      	strh	r3, [r7, #0]
	tft_drawFastVLine(x0, y0-r, 2*r+1, color);
 8004208:	88ba      	ldrh	r2, [r7, #4]
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	b219      	sxth	r1, r3
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	b29b      	uxth	r3, r3
 8004218:	3301      	adds	r3, #1
 800421a:	b29b      	uxth	r3, r3
 800421c:	b21a      	sxth	r2, r3
 800421e:	883b      	ldrh	r3, [r7, #0]
 8004220:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004224:	f7ff ffa4 	bl	8004170 <tft_drawFastVLine>
	tft_fillCircleHelper(x0, y0, r, 3, 0, color);
 8004228:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800422c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004230:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004234:	883b      	ldrh	r3, [r7, #0]
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	2300      	movs	r3, #0
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2303      	movs	r3, #3
 800423e:	f000 f804 	bl	800424a <tft_fillCircleHelper>
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bd90      	pop	{r4, r7, pc}

0800424a <tft_fillCircleHelper>:

void tft_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800424a:	b590      	push	{r4, r7, lr}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	4604      	mov	r4, r0
 8004252:	4608      	mov	r0, r1
 8004254:	4611      	mov	r1, r2
 8004256:	461a      	mov	r2, r3
 8004258:	4623      	mov	r3, r4
 800425a:	80fb      	strh	r3, [r7, #6]
 800425c:	4603      	mov	r3, r0
 800425e:	80bb      	strh	r3, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]

	int16_t f     = 1 - r;
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	f1c3 0301 	rsb	r3, r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004272:	2301      	movs	r3, #1
 8004274:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	461a      	mov	r2, r3
 800427a:	03d2      	lsls	r2, r2, #15
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	b29b      	uxth	r3, r3
 8004282:	827b      	strh	r3, [r7, #18]
	int16_t x     = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	823b      	strh	r3, [r7, #16]
	int16_t y     = r;
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	81fb      	strh	r3, [r7, #14]
	int16_t px    = x;
 800428c:	8a3b      	ldrh	r3, [r7, #16]
 800428e:	81bb      	strh	r3, [r7, #12]
	int16_t py    = y;
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	817b      	strh	r3, [r7, #10]

	delta++; // Avoid some +1's in the loop
 8004294:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004298:	b29b      	uxth	r3, r3
 800429a:	3301      	adds	r3, #1
 800429c:	b29b      	uxth	r3, r3
 800429e:	853b      	strh	r3, [r7, #40]	@ 0x28

	while(x < y) {
 80042a0:	e095      	b.n	80043ce <tft_fillCircleHelper+0x184>
		if (f >= 0) {
 80042a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db0e      	blt.n	80042c8 <tft_fillCircleHelper+0x7e>
			y--;
 80042aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80042b6:	8a7b      	ldrh	r3, [r7, #18]
 80042b8:	3302      	adds	r3, #2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	827b      	strh	r3, [r7, #18]
			f     += ddF_y;
 80042be:	8afa      	ldrh	r2, [r7, #22]
 80042c0:	8a7b      	ldrh	r3, [r7, #18]
 80042c2:	4413      	add	r3, r2
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80042c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80042d4:	8abb      	ldrh	r3, [r7, #20]
 80042d6:	3302      	adds	r3, #2
 80042d8:	b29b      	uxth	r3, r3
 80042da:	82bb      	strh	r3, [r7, #20]
		f     += ddF_x;
 80042dc:	8afa      	ldrh	r2, [r7, #22]
 80042de:	8abb      	ldrh	r3, [r7, #20]
 80042e0:	4413      	add	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	82fb      	strh	r3, [r7, #22]
		// These checks avoid double-drawing certain lines, important
		// for the SSD1306 library which has an INVERT drawing mode.
		if(x < (y + 1)) {
 80042e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80042ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	db31      	blt.n	8004356 <tft_fillCircleHelper+0x10c>
			if(corners & 1) tft_drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 80042f2:	787b      	ldrb	r3, [r7, #1]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <tft_fillCircleHelper+0xda>
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	8a3b      	ldrh	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	b218      	sxth	r0, r3
 8004306:	88ba      	ldrh	r2, [r7, #4]
 8004308:	89fb      	ldrh	r3, [r7, #14]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	b29b      	uxth	r3, r3
 800430e:	b219      	sxth	r1, r3
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004318:	4413      	add	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	b21a      	sxth	r2, r3
 800431e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004320:	f7ff ff26 	bl	8004170 <tft_drawFastVLine>
			if(corners & 2) tft_drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d013      	beq.n	8004356 <tft_fillCircleHelper+0x10c>
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	8a3b      	ldrh	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	b218      	sxth	r0, r3
 8004338:	88ba      	ldrh	r2, [r7, #4]
 800433a:	89fb      	ldrh	r3, [r7, #14]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	b219      	sxth	r1, r3
 8004342:	89fb      	ldrh	r3, [r7, #14]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800434a:	4413      	add	r3, r2
 800434c:	b29b      	uxth	r3, r3
 800434e:	b21a      	sxth	r2, r3
 8004350:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004352:	f7ff ff0d 	bl	8004170 <tft_drawFastVLine>
		}
		if(y != py) {
 8004356:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800435a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800435e:	429a      	cmp	r2, r3
 8004360:	d033      	beq.n	80043ca <tft_fillCircleHelper+0x180>
			if(corners & 1) tft_drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8004362:	787b      	ldrb	r3, [r7, #1]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <tft_fillCircleHelper+0x14a>
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	4413      	add	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	b218      	sxth	r0, r3
 8004376:	88ba      	ldrh	r2, [r7, #4]
 8004378:	89bb      	ldrh	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	b219      	sxth	r1, r3
 8004380:	89bb      	ldrh	r3, [r7, #12]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004388:	4413      	add	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	b21a      	sxth	r2, r3
 800438e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004390:	f7ff feee 	bl	8004170 <tft_drawFastVLine>
			if(corners & 2) tft_drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d013      	beq.n	80043c6 <tft_fillCircleHelper+0x17c>
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b218      	sxth	r0, r3
 80043a8:	88ba      	ldrh	r2, [r7, #4]
 80043aa:	89bb      	ldrh	r3, [r7, #12]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	b219      	sxth	r1, r3
 80043b2:	89bb      	ldrh	r3, [r7, #12]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80043ba:	4413      	add	r3, r2
 80043bc:	b29b      	uxth	r3, r3
 80043be:	b21a      	sxth	r2, r3
 80043c0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80043c2:	f7ff fed5 	bl	8004170 <tft_drawFastVLine>
			py = y;
 80043c6:	89fb      	ldrh	r3, [r7, #14]
 80043c8:	817b      	strh	r3, [r7, #10]
		}
		px = x;
 80043ca:	8a3b      	ldrh	r3, [r7, #16]
 80043cc:	81bb      	strh	r3, [r7, #12]
	while(x < y) {
 80043ce:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80043d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	f6ff af63 	blt.w	80042a2 <tft_fillCircleHelper+0x58>
	}
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
	...

080043e8 <tft_fillRect>:
	tft_drawFastVLine(x, y, h, color);
	tft_drawFastVLine(x+w-1, y, h, color);
}

void tft_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4623      	mov	r3, r4
 80043f8:	80fb      	strh	r3, [r7, #6]
 80043fa:	4603      	mov	r3, r0
 80043fc:	80bb      	strh	r3, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	807b      	strh	r3, [r7, #2]
 8004402:	4613      	mov	r3, r2
 8004404:	803b      	strh	r3, [r7, #0]
	int16_t end;
#if defined(SUPPORT_9488_555)
	if (is555) color = color565_to_555(color);
 8004406:	4b95      	ldr	r3, [pc, #596]	@ (800465c <tft_fillRect+0x274>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <tft_fillRect+0x32>
 800440e:	8c3b      	ldrh	r3, [r7, #32]
 8004410:	4618      	mov	r0, r3
 8004412:	f7fc fceb 	bl	8000dec <color565_to_555>
 8004416:	4603      	mov	r3, r0
 8004418:	843b      	strh	r3, [r7, #32]
#endif
	if (w < 0) {
 800441a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800441e:	2b00      	cmp	r3, #0
 8004420:	da08      	bge.n	8004434 <tft_fillRect+0x4c>
		w = -w;
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	425b      	negs	r3, r3
 8004426:	b29b      	uxth	r3, r3
 8004428:	807b      	strh	r3, [r7, #2]
		x -= w;
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	887b      	ldrh	r3, [r7, #2]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	80fb      	strh	r3, [r7, #6]
	}                           //+ve w
	end = x + w;
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	4413      	add	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	81fb      	strh	r3, [r7, #14]
	if (x < 0)
 800443e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	da01      	bge.n	800444a <tft_fillRect+0x62>
		x = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	80fb      	strh	r3, [r7, #6]
	if (end > width())
 800444a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800444e:	f7fc fcb5 	bl	8000dbc <width>
 8004452:	4603      	mov	r3, r0
 8004454:	429c      	cmp	r4, r3
 8004456:	dd03      	ble.n	8004460 <tft_fillRect+0x78>
		end = width();
 8004458:	f7fc fcb0 	bl	8000dbc <width>
 800445c:	4603      	mov	r3, r0
 800445e:	81fb      	strh	r3, [r7, #14]
	w = end - x;
 8004460:	89fa      	ldrh	r2, [r7, #14]
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	807b      	strh	r3, [r7, #2]
	if (h < 0) {
 800446a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da08      	bge.n	8004484 <tft_fillRect+0x9c>
		h = -h;
 8004472:	883b      	ldrh	r3, [r7, #0]
 8004474:	425b      	negs	r3, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	803b      	strh	r3, [r7, #0]
		y -= h;
 800447a:	88ba      	ldrh	r2, [r7, #4]
 800447c:	883b      	ldrh	r3, [r7, #0]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	b29b      	uxth	r3, r3
 8004482:	80bb      	strh	r3, [r7, #4]
	}                           //+ve h
	end = y + h;
 8004484:	88ba      	ldrh	r2, [r7, #4]
 8004486:	883b      	ldrh	r3, [r7, #0]
 8004488:	4413      	add	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	81fb      	strh	r3, [r7, #14]
	if (y < 0)
 800448e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	da01      	bge.n	800449a <tft_fillRect+0xb2>
		y = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	80bb      	strh	r3, [r7, #4]
	if (end > height())
 800449a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800449e:	f7fc fc99 	bl	8000dd4 <height>
 80044a2:	4603      	mov	r3, r0
 80044a4:	429c      	cmp	r4, r3
 80044a6:	dd03      	ble.n	80044b0 <tft_fillRect+0xc8>
		end = height();
 80044a8:	f7fc fc94 	bl	8000dd4 <height>
 80044ac:	4603      	mov	r3, r0
 80044ae:	81fb      	strh	r3, [r7, #14]
	h = end - y;
 80044b0:	89fa      	ldrh	r2, [r7, #14]
 80044b2:	88bb      	ldrh	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	887b      	ldrh	r3, [r7, #2]
 80044be:	4413      	add	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	b21c      	sxth	r4, r3
 80044c8:	88ba      	ldrh	r2, [r7, #4]
 80044ca:	883b      	ldrh	r3, [r7, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80044da:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80044de:	4622      	mov	r2, r4
 80044e0:	f7fd fc46 	bl	8001d70 <setAddrWindow>
	CS_ACTIVE;
 80044e4:	2101      	movs	r1, #1
 80044e6:	485e      	ldr	r0, [pc, #376]	@ (8004660 <tft_fillRect+0x278>)
 80044e8:	f7fc fc1a 	bl	8000d20 <PIN_LOW>
	WriteCmd(_MW);
 80044ec:	2110      	movs	r1, #16
 80044ee:	485d      	ldr	r0, [pc, #372]	@ (8004664 <tft_fillRect+0x27c>)
 80044f0:	f7fc fc16 	bl	8000d20 <PIN_LOW>
 80044f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004668 <tft_fillRect+0x280>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	737b      	strb	r3, [r7, #13]
 80044fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004668 <tft_fillRect+0x280>)
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	733b      	strb	r3, [r7, #12]
 8004504:	4b57      	ldr	r3, [pc, #348]	@ (8004664 <tft_fillRect+0x27c>)
 8004506:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800450a:	619a      	str	r2, [r3, #24]
 800450c:	4b54      	ldr	r3, [pc, #336]	@ (8004660 <tft_fillRect+0x278>)
 800450e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004512:	619a      	str	r2, [r3, #24]
 8004514:	4b55      	ldr	r3, [pc, #340]	@ (800466c <tft_fillRect+0x284>)
 8004516:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800451a:	619a      	str	r2, [r3, #24]
 800451c:	7b7b      	ldrb	r3, [r7, #13]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004524:	7b7b      	ldrb	r3, [r7, #13]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452c:	431a      	orrs	r2, r3
 800452e:	7b7b      	ldrb	r3, [r7, #13]
 8004530:	025b      	lsls	r3, r3, #9
 8004532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004536:	431a      	orrs	r2, r3
 8004538:	4b4a      	ldr	r3, [pc, #296]	@ (8004664 <tft_fillRect+0x27c>)
 800453a:	619a      	str	r2, [r3, #24]
 800453c:	7b7b      	ldrb	r3, [r7, #13]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004544:	7b7b      	ldrb	r3, [r7, #13]
 8004546:	105b      	asrs	r3, r3, #1
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	7b7b      	ldrb	r3, [r7, #13]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	431a      	orrs	r2, r3
 8004558:	7b7b      	ldrb	r3, [r7, #13]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	431a      	orrs	r2, r3
 8004560:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <tft_fillRect+0x278>)
 8004562:	619a      	str	r2, [r3, #24]
 8004564:	7b7b      	ldrb	r3, [r7, #13]
 8004566:	019b      	lsls	r3, r3, #6
 8004568:	4a40      	ldr	r2, [pc, #256]	@ (800466c <tft_fillRect+0x284>)
 800456a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456e:	6193      	str	r3, [r2, #24]
 8004570:	2102      	movs	r1, #2
 8004572:	483c      	ldr	r0, [pc, #240]	@ (8004664 <tft_fillRect+0x27c>)
 8004574:	f7fc fbd4 	bl	8000d20 <PIN_LOW>
 8004578:	2102      	movs	r1, #2
 800457a:	483a      	ldr	r0, [pc, #232]	@ (8004664 <tft_fillRect+0x27c>)
 800457c:	f7fc fbd0 	bl	8000d20 <PIN_LOW>
 8004580:	2102      	movs	r1, #2
 8004582:	4838      	ldr	r0, [pc, #224]	@ (8004664 <tft_fillRect+0x27c>)
 8004584:	f7fc fbcc 	bl	8000d20 <PIN_LOW>
 8004588:	2102      	movs	r1, #2
 800458a:	4836      	ldr	r0, [pc, #216]	@ (8004664 <tft_fillRect+0x27c>)
 800458c:	f7fc fbd8 	bl	8000d40 <PIN_HIGH>
 8004590:	2102      	movs	r1, #2
 8004592:	4834      	ldr	r0, [pc, #208]	@ (8004664 <tft_fillRect+0x27c>)
 8004594:	f7fc fbd4 	bl	8000d40 <PIN_HIGH>
 8004598:	4b32      	ldr	r3, [pc, #200]	@ (8004664 <tft_fillRect+0x27c>)
 800459a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800459e:	619a      	str	r2, [r3, #24]
 80045a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004660 <tft_fillRect+0x278>)
 80045a2:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 80045a6:	619a      	str	r2, [r3, #24]
 80045a8:	4b30      	ldr	r3, [pc, #192]	@ (800466c <tft_fillRect+0x284>)
 80045aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045ae:	619a      	str	r2, [r3, #24]
 80045b0:	7b3b      	ldrb	r3, [r7, #12]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80045b8:	7b3b      	ldrb	r3, [r7, #12]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c0:	431a      	orrs	r2, r3
 80045c2:	7b3b      	ldrb	r3, [r7, #12]
 80045c4:	025b      	lsls	r3, r3, #9
 80045c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ca:	431a      	orrs	r2, r3
 80045cc:	4b25      	ldr	r3, [pc, #148]	@ (8004664 <tft_fillRect+0x27c>)
 80045ce:	619a      	str	r2, [r3, #24]
 80045d0:	7b3b      	ldrb	r3, [r7, #12]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80045d8:	7b3b      	ldrb	r3, [r7, #12]
 80045da:	105b      	asrs	r3, r3, #1
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	431a      	orrs	r2, r3
 80045e2:	7b3b      	ldrb	r3, [r7, #12]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	431a      	orrs	r2, r3
 80045ec:	7b3b      	ldrb	r3, [r7, #12]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	431a      	orrs	r2, r3
 80045f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <tft_fillRect+0x278>)
 80045f6:	619a      	str	r2, [r3, #24]
 80045f8:	7b3b      	ldrb	r3, [r7, #12]
 80045fa:	019b      	lsls	r3, r3, #6
 80045fc:	4a1b      	ldr	r2, [pc, #108]	@ (800466c <tft_fillRect+0x284>)
 80045fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004602:	6193      	str	r3, [r2, #24]
 8004604:	2102      	movs	r1, #2
 8004606:	4817      	ldr	r0, [pc, #92]	@ (8004664 <tft_fillRect+0x27c>)
 8004608:	f7fc fb8a 	bl	8000d20 <PIN_LOW>
 800460c:	2102      	movs	r1, #2
 800460e:	4815      	ldr	r0, [pc, #84]	@ (8004664 <tft_fillRect+0x27c>)
 8004610:	f7fc fb86 	bl	8000d20 <PIN_LOW>
 8004614:	2102      	movs	r1, #2
 8004616:	4813      	ldr	r0, [pc, #76]	@ (8004664 <tft_fillRect+0x27c>)
 8004618:	f7fc fb82 	bl	8000d20 <PIN_LOW>
 800461c:	2102      	movs	r1, #2
 800461e:	4811      	ldr	r0, [pc, #68]	@ (8004664 <tft_fillRect+0x27c>)
 8004620:	f7fc fb8e 	bl	8000d40 <PIN_HIGH>
 8004624:	2102      	movs	r1, #2
 8004626:	480f      	ldr	r0, [pc, #60]	@ (8004664 <tft_fillRect+0x27c>)
 8004628:	f7fc fb8a 	bl	8000d40 <PIN_HIGH>
 800462c:	2110      	movs	r1, #16
 800462e:	480d      	ldr	r0, [pc, #52]	@ (8004664 <tft_fillRect+0x27c>)
 8004630:	f7fc fb86 	bl	8000d40 <PIN_HIGH>
	if (h > w) {
 8004634:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800463c:	429a      	cmp	r2, r3
 800463e:	dd05      	ble.n	800464c <tft_fillRect+0x264>
		end = h;
 8004640:	883b      	ldrh	r3, [r7, #0]
 8004642:	81fb      	strh	r3, [r7, #14]
		h = w;
 8004644:	887b      	ldrh	r3, [r7, #2]
 8004646:	803b      	strh	r3, [r7, #0]
		w = end;
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	807b      	strh	r3, [r7, #2]
	}
	uint8_t hi = color >> 8, lo = color & 0xFF;
 800464c:	8c3b      	ldrh	r3, [r7, #32]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b29b      	uxth	r3, r3
 8004652:	72fb      	strb	r3, [r7, #11]
 8004654:	8c3b      	ldrh	r3, [r7, #32]
 8004656:	72bb      	strb	r3, [r7, #10]
	while (h-- > 0) {
 8004658:	e0a9      	b.n	80047ae <tft_fillRect+0x3c6>
 800465a:	bf00      	nop
 800465c:	200000cc 	.word	0x200000cc
 8004660:	40020400 	.word	0x40020400
 8004664:	40020000 	.word	0x40020000
 8004668:	200000e2 	.word	0x200000e2
 800466c:	40020800 	.word	0x40020800
		end = w;
 8004670:	887b      	ldrh	r3, [r7, #2]
 8004672:	81fb      	strh	r3, [r7, #14]
		//                 write8(b);
		//             } while (--end != 0);
		//        } else
		//#endif
		do {
			write8(hi);
 8004674:	4b68      	ldr	r3, [pc, #416]	@ (8004818 <tft_fillRect+0x430>)
 8004676:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800467a:	619a      	str	r2, [r3, #24]
 800467c:	4b67      	ldr	r3, [pc, #412]	@ (800481c <tft_fillRect+0x434>)
 800467e:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004682:	619a      	str	r2, [r3, #24]
 8004684:	4b66      	ldr	r3, [pc, #408]	@ (8004820 <tft_fillRect+0x438>)
 8004686:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800468a:	619a      	str	r2, [r3, #24]
 800468c:	7afb      	ldrb	r3, [r7, #11]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004694:	7afb      	ldrb	r3, [r7, #11]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469c:	431a      	orrs	r2, r3
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046a6:	431a      	orrs	r2, r3
 80046a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004818 <tft_fillRect+0x430>)
 80046aa:	619a      	str	r2, [r3, #24]
 80046ac:	7afb      	ldrb	r3, [r7, #11]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80046b4:	7afb      	ldrb	r3, [r7, #11]
 80046b6:	105b      	asrs	r3, r3, #1
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	7afb      	ldrb	r3, [r7, #11]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	431a      	orrs	r2, r3
 80046c8:	7afb      	ldrb	r3, [r7, #11]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	431a      	orrs	r2, r3
 80046d0:	4b52      	ldr	r3, [pc, #328]	@ (800481c <tft_fillRect+0x434>)
 80046d2:	619a      	str	r2, [r3, #24]
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	019b      	lsls	r3, r3, #6
 80046d8:	4a51      	ldr	r2, [pc, #324]	@ (8004820 <tft_fillRect+0x438>)
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	6193      	str	r3, [r2, #24]
 80046e0:	2102      	movs	r1, #2
 80046e2:	484d      	ldr	r0, [pc, #308]	@ (8004818 <tft_fillRect+0x430>)
 80046e4:	f7fc fb1c 	bl	8000d20 <PIN_LOW>
 80046e8:	2102      	movs	r1, #2
 80046ea:	484b      	ldr	r0, [pc, #300]	@ (8004818 <tft_fillRect+0x430>)
 80046ec:	f7fc fb18 	bl	8000d20 <PIN_LOW>
 80046f0:	2102      	movs	r1, #2
 80046f2:	4849      	ldr	r0, [pc, #292]	@ (8004818 <tft_fillRect+0x430>)
 80046f4:	f7fc fb14 	bl	8000d20 <PIN_LOW>
 80046f8:	2102      	movs	r1, #2
 80046fa:	4847      	ldr	r0, [pc, #284]	@ (8004818 <tft_fillRect+0x430>)
 80046fc:	f7fc fb20 	bl	8000d40 <PIN_HIGH>
 8004700:	2102      	movs	r1, #2
 8004702:	4845      	ldr	r0, [pc, #276]	@ (8004818 <tft_fillRect+0x430>)
 8004704:	f7fc fb1c 	bl	8000d40 <PIN_HIGH>
			write8(lo);
 8004708:	4b43      	ldr	r3, [pc, #268]	@ (8004818 <tft_fillRect+0x430>)
 800470a:	f04f 62e0 	mov.w	r2, #117440512	@ 0x7000000
 800470e:	619a      	str	r2, [r3, #24]
 8004710:	4b42      	ldr	r3, [pc, #264]	@ (800481c <tft_fillRect+0x434>)
 8004712:	f04f 6287 	mov.w	r2, #70778880	@ 0x4380000
 8004716:	619a      	str	r2, [r3, #24]
 8004718:	4b41      	ldr	r3, [pc, #260]	@ (8004820 <tft_fillRect+0x438>)
 800471a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800471e:	619a      	str	r2, [r3, #24]
 8004720:	7abb      	ldrb	r3, [r7, #10]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8004728:	7abb      	ldrb	r3, [r7, #10]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004730:	431a      	orrs	r2, r3
 8004732:	7abb      	ldrb	r3, [r7, #10]
 8004734:	025b      	lsls	r3, r3, #9
 8004736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800473a:	431a      	orrs	r2, r3
 800473c:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <tft_fillRect+0x430>)
 800473e:	619a      	str	r2, [r3, #24]
 8004740:	7abb      	ldrb	r3, [r7, #10]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8004748:	7abb      	ldrb	r3, [r7, #10]
 800474a:	105b      	asrs	r3, r3, #1
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	431a      	orrs	r2, r3
 8004752:	7abb      	ldrb	r3, [r7, #10]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	431a      	orrs	r2, r3
 800475c:	7abb      	ldrb	r3, [r7, #10]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	431a      	orrs	r2, r3
 8004764:	4b2d      	ldr	r3, [pc, #180]	@ (800481c <tft_fillRect+0x434>)
 8004766:	619a      	str	r2, [r3, #24]
 8004768:	7abb      	ldrb	r3, [r7, #10]
 800476a:	019b      	lsls	r3, r3, #6
 800476c:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <tft_fillRect+0x438>)
 800476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004772:	6193      	str	r3, [r2, #24]
 8004774:	2102      	movs	r1, #2
 8004776:	4828      	ldr	r0, [pc, #160]	@ (8004818 <tft_fillRect+0x430>)
 8004778:	f7fc fad2 	bl	8000d20 <PIN_LOW>
 800477c:	2102      	movs	r1, #2
 800477e:	4826      	ldr	r0, [pc, #152]	@ (8004818 <tft_fillRect+0x430>)
 8004780:	f7fc face 	bl	8000d20 <PIN_LOW>
 8004784:	2102      	movs	r1, #2
 8004786:	4824      	ldr	r0, [pc, #144]	@ (8004818 <tft_fillRect+0x430>)
 8004788:	f7fc faca 	bl	8000d20 <PIN_LOW>
 800478c:	2102      	movs	r1, #2
 800478e:	4822      	ldr	r0, [pc, #136]	@ (8004818 <tft_fillRect+0x430>)
 8004790:	f7fc fad6 	bl	8000d40 <PIN_HIGH>
 8004794:	2102      	movs	r1, #2
 8004796:	4820      	ldr	r0, [pc, #128]	@ (8004818 <tft_fillRect+0x430>)
 8004798:	f7fc fad2 	bl	8000d40 <PIN_HIGH>
		} while (--end != 0);
 800479c:	89fb      	ldrh	r3, [r7, #14]
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	81fb      	strh	r3, [r7, #14]
 80047a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f47f af63 	bne.w	8004674 <tft_fillRect+0x28c>
	while (h-- > 0) {
 80047ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	3a01      	subs	r2, #1
 80047b6:	b292      	uxth	r2, r2
 80047b8:	803a      	strh	r2, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f73f af58 	bgt.w	8004670 <tft_fillRect+0x288>
#endif
	}
	CS_IDLE;
 80047c0:	2101      	movs	r1, #1
 80047c2:	4816      	ldr	r0, [pc, #88]	@ (800481c <tft_fillRect+0x434>)
 80047c4:	f7fc fabc 	bl	8000d40 <PIN_HIGH>
	if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80047c8:	4b16      	ldr	r3, [pc, #88]	@ (8004824 <tft_fillRect+0x43c>)
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00b      	beq.n	80047ec <tft_fillRect+0x404>
 80047d4:	4b14      	ldr	r3, [pc, #80]	@ (8004828 <tft_fillRect+0x440>)
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	f241 5226 	movw	r2, #5414	@ 0x1526
 80047dc:	4293      	cmp	r3, r2
 80047de:	d116      	bne.n	800480e <tft_fillRect+0x426>
 80047e0:	4b12      	ldr	r3, [pc, #72]	@ (800482c <tft_fillRect+0x444>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <tft_fillRect+0x426>
		setAddrWindow(0, 0, width() - 1, height() - 1);
 80047ec:	f7fc fae6 	bl	8000dbc <width>
 80047f0:	4603      	mov	r3, r0
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b21c      	sxth	r4, r3
 80047f8:	f7fc faec 	bl	8000dd4 <height>
 80047fc:	4603      	mov	r3, r0
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29b      	uxth	r3, r3
 8004802:	b21b      	sxth	r3, r3
 8004804:	4622      	mov	r2, r4
 8004806:	2100      	movs	r1, #0
 8004808:	2000      	movs	r0, #0
 800480a:	f7fd fab1 	bl	8001d70 <setAddrWindow>
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bd90      	pop	{r4, r7, pc}
 8004816:	bf00      	nop
 8004818:	40020000 	.word	0x40020000
 800481c:	40020400 	.word	0x40020400
 8004820:	40020800 	.word	0x40020800
 8004824:	200000d6 	.word	0x200000d6
 8004828:	200000d8 	.word	0x200000d8
 800482c:	200000d2 	.word	0x200000d2

08004830 <tft_fillTriangle>:
	tft_drawLine(x1, y1, x2, y2, color);
	tft_drawLine(x2, y2, x0, y0, color);
}

void tft_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b08f      	sub	sp, #60	@ 0x3c
 8004834:	af00      	add	r7, sp, #0
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4623      	mov	r3, r4
 8004840:	80fb      	strh	r3, [r7, #6]
 8004842:	4603      	mov	r3, r0
 8004844:	80bb      	strh	r3, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	807b      	strh	r3, [r7, #2]
 800484a:	4613      	mov	r3, r2
 800484c:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 800484e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004852:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004856:	429a      	cmp	r2, r3
 8004858:	dd0b      	ble.n	8004872 <tft_fillTriangle+0x42>
		_swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800485a:	88bb      	ldrh	r3, [r7, #4]
 800485c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800485e:	883b      	ldrh	r3, [r7, #0]
 8004860:	80bb      	strh	r3, [r7, #4]
 8004862:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004864:	803b      	strh	r3, [r7, #0]
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	80fb      	strh	r3, [r7, #6]
 800486e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004870:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 8004872:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004876:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800487a:	429a      	cmp	r2, r3
 800487c:	dd0f      	ble.n	800489e <tft_fillTriangle+0x6e>
		_swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800487e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004882:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004884:	883b      	ldrh	r3, [r7, #0]
 8004886:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800488a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800488c:	803b      	strh	r3, [r7, #0]
 800488e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004892:	843b      	strh	r3, [r7, #32]
 8004894:	887b      	ldrh	r3, [r7, #2]
 8004896:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800489a:	8c3b      	ldrh	r3, [r7, #32]
 800489c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800489e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80048a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	dd0b      	ble.n	80048c2 <tft_fillTriangle+0x92>
		_swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80048aa:	88bb      	ldrh	r3, [r7, #4]
 80048ac:	83fb      	strh	r3, [r7, #30]
 80048ae:	883b      	ldrh	r3, [r7, #0]
 80048b0:	80bb      	strh	r3, [r7, #4]
 80048b2:	8bfb      	ldrh	r3, [r7, #30]
 80048b4:	803b      	strh	r3, [r7, #0]
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	83bb      	strh	r3, [r7, #28]
 80048ba:	887b      	ldrh	r3, [r7, #2]
 80048bc:	80fb      	strh	r3, [r7, #6]
 80048be:	8bbb      	ldrh	r3, [r7, #28]
 80048c0:	807b      	strh	r3, [r7, #2]
	}

	if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80048c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80048c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d137      	bne.n	800493e <tft_fillTriangle+0x10e>
		a = b = x0;
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80048d2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80048d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		if(x1 < a)      a = x1;
 80048d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80048da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80048de:	429a      	cmp	r2, r3
 80048e0:	da02      	bge.n	80048e8 <tft_fillTriangle+0xb8>
 80048e2:	887b      	ldrh	r3, [r7, #2]
 80048e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80048e6:	e007      	b.n	80048f8 <tft_fillTriangle+0xc8>
		else if(x1 > b) b = x1;
 80048e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80048ec:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80048f0:	429a      	cmp	r2, r3
 80048f2:	dd01      	ble.n	80048f8 <tft_fillTriangle+0xc8>
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	86bb      	strh	r3, [r7, #52]	@ 0x34
		if(x2 < a)      a = x2;
 80048f8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80048fc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004900:	429a      	cmp	r2, r3
 8004902:	da03      	bge.n	800490c <tft_fillTriangle+0xdc>
 8004904:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004908:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800490a:	e008      	b.n	800491e <tft_fillTriangle+0xee>
		else if(x2 > b) b = x2;
 800490c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8004910:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8004914:	429a      	cmp	r2, r3
 8004916:	dd02      	ble.n	800491e <tft_fillTriangle+0xee>
 8004918:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800491c:	86bb      	strh	r3, [r7, #52]	@ 0x34
		tft_drawFastHLine(a, y0, b-a+1, color);
 800491e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004920:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	3301      	adds	r3, #1
 8004928:	b29b      	uxth	r3, r3
 800492a:	b21a      	sxth	r2, r3
 800492c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004930:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004934:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8004938:	f7ff fc39 	bl	80041ae <tft_drawFastHLine>
		return;
 800493c:	e0d4      	b.n	8004ae8 <tft_fillTriangle+0x2b8>
	}

	int16_t
	dx01 = x1 - x0,
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	b29b      	uxth	r3, r3
 8004946:	837b      	strh	r3, [r7, #26]
	dy01 = y1 - y0,
 8004948:	883a      	ldrh	r2, [r7, #0]
 800494a:	88bb      	ldrh	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	b29b      	uxth	r3, r3
 8004950:	833b      	strh	r3, [r7, #24]
	dx02 = x2 - x0,
 8004952:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	82fb      	strh	r3, [r7, #22]
	dy02 = y2 - y0,
 800495e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004962:	88bb      	ldrh	r3, [r7, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	82bb      	strh	r3, [r7, #20]
	dx12 = x2 - x1,
 800496a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800496e:	887b      	ldrh	r3, [r7, #2]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	b29b      	uxth	r3, r3
 8004974:	827b      	strh	r3, [r7, #18]
	dy12 = y2 - y1;
 8004976:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800497a:	883b      	ldrh	r3, [r7, #0]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	b29b      	uxth	r3, r3
 8004980:	823b      	strh	r3, [r7, #16]
	int32_t
	sa   = 0,
 8004982:	2300      	movs	r3, #0
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sb   = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if(y1 == y2) last = y1;   // Include y1 scanline
 800498a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800498e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004992:	429a      	cmp	r2, r3
 8004994:	d102      	bne.n	800499c <tft_fillTriangle+0x16c>
 8004996:	883b      	ldrh	r3, [r7, #0]
 8004998:	863b      	strh	r3, [r7, #48]	@ 0x30
 800499a:	e003      	b.n	80049a4 <tft_fillTriangle+0x174>
	else         last = y1-1; // Skip it
 800499c:	883b      	ldrh	r3, [r7, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	863b      	strh	r3, [r7, #48]	@ 0x30

	for(y=y0; y<=last; y++) {
 80049a4:	88bb      	ldrh	r3, [r7, #4]
 80049a6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80049a8:	e03e      	b.n	8004a28 <tft_fillTriangle+0x1f8>
		a   = x0 + sa / dy01;
 80049aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	4413      	add	r3, r2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
		b   = x0 + sb / dy02;
 80049be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	4413      	add	r3, r2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
		sa += dx01;
 80049d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049d8:	4413      	add	r3, r2
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sb += dx02;
 80049dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049e2:	4413      	add	r3, r2
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		/* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		 */
		if(a > b) _swap_int16_t(a,b);
 80049e6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80049ea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80049ee:	429a      	cmp	r2, r3
 80049f0:	dd05      	ble.n	80049fe <tft_fillTriangle+0x1ce>
 80049f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80049f4:	81bb      	strh	r3, [r7, #12]
 80049f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80049f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80049fa:	89bb      	ldrh	r3, [r7, #12]
 80049fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
		tft_drawFastHLine(a, y, b-a+1, color);
 80049fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004a00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	b21a      	sxth	r2, r3
 8004a0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a10:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8004a14:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8004a18:	f7ff fbc9 	bl	80041ae <tft_drawFastHLine>
	for(y=y0; y<=last; y++) {
 8004a1c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3301      	adds	r3, #1
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004a28:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8004a2c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8004a30:	429a      	cmp	r2, r3
 8004a32:	ddba      	ble.n	80049aa <tft_fillTriangle+0x17a>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = (int32_t)dx12 * (y - y1);
 8004a34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a38:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8004a3c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004a40:	1a8a      	subs	r2, r1, r2
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sb = (int32_t)dx02 * (y - y0);
 8004a48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a4c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8004a50:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004a54:	1a8a      	subs	r2, r1, r2
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	for(; y<=y2; y++) {
 8004a5c:	e03e      	b.n	8004adc <tft_fillTriangle+0x2ac>
		a   = x1 + sa / dy12;
 8004a5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a64:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	86fb      	strh	r3, [r7, #54]	@ 0x36
		b   = x0 + sb / dy02;
 8004a72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	4413      	add	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	86bb      	strh	r3, [r7, #52]	@ 0x34
		sa += dx12;
 8004a86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8c:	4413      	add	r3, r2
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sb += dx02;
 8004a90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a96:	4413      	add	r3, r2
 8004a98:	62bb      	str	r3, [r7, #40]	@ 0x28
		/* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		 */
		if(a > b) _swap_int16_t(a,b);
 8004a9a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8004a9e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	dd05      	ble.n	8004ab2 <tft_fillTriangle+0x282>
 8004aa6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004aa8:	81fb      	strh	r3, [r7, #14]
 8004aaa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004aac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004aae:	89fb      	ldrh	r3, [r7, #14]
 8004ab0:	86bb      	strh	r3, [r7, #52]	@ 0x34
		tft_drawFastHLine(a, y, b-a+1, color);
 8004ab2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004ab4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	b21a      	sxth	r2, r3
 8004ac0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ac4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8004ac8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8004acc:	f7ff fb6f 	bl	80041ae <tft_drawFastHLine>
	for(; y<=y2; y++) {
 8004ad0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004adc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8004ae0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	ddba      	ble.n	8004a5e <tft_fillTriangle+0x22e>
	}
}
 8004ae8:	373c      	adds	r7, #60	@ 0x3c
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd90      	pop	{r4, r7, pc}
	...

08004af0 <tft_fillScreen>:

void tft_fillScreen(uint16_t color)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	4603      	mov	r3, r0
 8004af8:	80fb      	strh	r3, [r7, #6]
	tft_fillRect(0, 0, _width, _height, color);
 8004afa:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <tft_fillScreen+0x2c>)
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b21a      	sxth	r2, r3
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <tft_fillScreen+0x30>)
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b219      	sxth	r1, r3
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7ff fc6a 	bl	80043e8 <tft_fillRect>
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000004 	.word	0x20000004
 8004b20:	20000006 	.word	0x20000006

08004b24 <tft_drawChar>:

/* Fim funções de teste -----------------------------------------------------*/
/* --------------------------------------------------------------------------*/

void tft_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b08b      	sub	sp, #44	@ 0x2c
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	4623      	mov	r3, r4
 8004b34:	80fb      	strh	r3, [r7, #6]
 8004b36:	4603      	mov	r3, r0
 8004b38:	80bb      	strh	r3, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	803b      	strh	r3, [r7, #0]

		// Character is assumed previously filtered by write() to eliminate
		// newlines, returns, non-printable characters, etc.  Calling
		// tft_drawChar() directly with 'bad' characters of font may cause mayhem!

		c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8004b42:	4b57      	ldr	r3, [pc, #348]	@ (8004ca0 <tft_drawChar+0x17c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	70fb      	strb	r3, [r7, #3]
		GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	00da      	lsls	r2, r3, #3
 8004b54:	4b52      	ldr	r3, [pc, #328]	@ (8004ca0 <tft_drawChar+0x17c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
		uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8004b60:	4b4f      	ldr	r3, [pc, #316]	@ (8004ca0 <tft_drawChar+0x17c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

		uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	83fb      	strh	r3, [r7, #30]
		uint8_t  w  = pgm_read_byte(&glyph->width),
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3302      	adds	r3, #2
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	72fb      	strb	r3, [r7, #11]
				h  = pgm_read_byte(&glyph->height);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3303      	adds	r3, #3
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	72bb      	strb	r3, [r7, #10]
		int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3305      	adds	r3, #5
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	727b      	strb	r3, [r7, #9]
				yo = pgm_read_byte(&glyph->yOffset);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3306      	adds	r3, #6
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	723b      	strb	r3, [r7, #8]
		uint8_t  xx, yy, bits = 0, bit = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	76fb      	strb	r3, [r7, #27]
 8004b92:	2300      	movs	r3, #0
 8004b94:	76bb      	strb	r3, [r7, #26]
		int16_t  xo16 = 0, yo16 = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	833b      	strh	r3, [r7, #24]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	82fb      	strh	r3, [r7, #22]

		if(size > 1) {
 8004b9e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d905      	bls.n	8004bb2 <tft_drawChar+0x8e>
			xo16 = xo;
 8004ba6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004baa:	833b      	strh	r3, [r7, #24]
			yo16 = yo;
 8004bac:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004bb0:	82fb      	strh	r3, [r7, #22]
		}

		for(yy=0; yy<h; yy++) {
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	773b      	strb	r3, [r7, #28]
 8004bb6:	e06a      	b.n	8004c8e <tft_drawChar+0x16a>
			for(xx=0; xx<w; xx++) {
 8004bb8:	2300      	movs	r3, #0
 8004bba:	777b      	strb	r3, [r7, #29]
 8004bbc:	e060      	b.n	8004c80 <tft_drawChar+0x15c>
				if(!(bit++ & 7)) {
 8004bbe:	7ebb      	ldrb	r3, [r7, #26]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	76ba      	strb	r2, [r7, #26]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <tft_drawChar+0xb8>
					bits = pgm_read_byte(&bitmap[bo++]);
 8004bcc:	8bfb      	ldrh	r3, [r7, #30]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	83fa      	strh	r2, [r7, #30]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	76fb      	strb	r3, [r7, #27]
				}
				if(bits & 0x80) {
 8004bdc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da47      	bge.n	8004c74 <tft_drawChar+0x150>
					if(size == 1) {
 8004be4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d11a      	bne.n	8004c22 <tft_drawChar+0xfe>
						writePixel(x+xo+xx, y+yo+yy, color);
 8004bec:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	7f7b      	ldrb	r3, [r7, #29]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	b218      	sxth	r0, r3
 8004c02:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	88bb      	ldrh	r3, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	7f3b      	ldrb	r3, [r7, #28]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	b21b      	sxth	r3, r3
 8004c18:	883a      	ldrh	r2, [r7, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f7fd f9cc 	bl	8001fb8 <writePixel>
 8004c20:	e028      	b.n	8004c74 <tft_drawChar+0x150>
					} else {
						tft_fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8004c22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004c26:	7f7b      	ldrb	r3, [r7, #29]
 8004c28:	4413      	add	r3, r2
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	fb12 f303 	smulbb	r3, r2, r3
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b218      	sxth	r0, r3
 8004c40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004c44:	7f3b      	ldrb	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	fb12 f303 	smulbb	r3, r2, r3
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	88bb      	ldrh	r3, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	b219      	sxth	r1, r3
 8004c5e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c62:	b21a      	sxth	r2, r3
 8004c64:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c68:	b21c      	sxth	r4, r3
 8004c6a:	883b      	ldrh	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	4623      	mov	r3, r4
 8004c70:	f7ff fbba 	bl	80043e8 <tft_fillRect>
								size, size, color);
					}
				}
				bits <<= 1;
 8004c74:	7efb      	ldrb	r3, [r7, #27]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	76fb      	strb	r3, [r7, #27]
			for(xx=0; xx<w; xx++) {
 8004c7a:	7f7b      	ldrb	r3, [r7, #29]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	777b      	strb	r3, [r7, #29]
 8004c80:	7f7a      	ldrb	r2, [r7, #29]
 8004c82:	7afb      	ldrb	r3, [r7, #11]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d39a      	bcc.n	8004bbe <tft_drawChar+0x9a>
		for(yy=0; yy<h; yy++) {
 8004c88:	7f3b      	ldrb	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	773b      	strb	r3, [r7, #28]
 8004c8e:	7f3a      	ldrb	r2, [r7, #28]
 8004c90:	7abb      	ldrb	r3, [r7, #10]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d390      	bcc.n	8004bb8 <tft_drawChar+0x94>
			}
		}

	} // End classic vs custom font
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	3724      	adds	r7, #36	@ 0x24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}
 8004ca0:	20000034 	.word	0x20000034

08004ca4 <tft_write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
 */
/**************************************************************************/
size_t tft_write(uint8_t c)
{
 8004ca4:	b5b0      	push	{r4, r5, r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	4603      	mov	r3, r0
 8004cac:	71fb      	strb	r3, [r7, #7]
	{

		if(c == '\n') {
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	2b0a      	cmp	r3, #10
 8004cb2:	d113      	bne.n	8004cdc <tft_write+0x38>
			cursor_x  = 0;
 8004cb4:	4b49      	ldr	r3, [pc, #292]	@ (8004ddc <tft_write+0x138>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	801a      	strh	r2, [r3, #0]
			cursor_y += (int16_t)textsize *
 8004cba:	4b49      	ldr	r3, [pc, #292]	@ (8004de0 <tft_write+0x13c>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
					(uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004cc0:	4b48      	ldr	r3, [pc, #288]	@ (8004de4 <tft_write+0x140>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330a      	adds	r3, #10
 8004cc6:	781b      	ldrb	r3, [r3, #0]
			cursor_y += (int16_t)textsize *
 8004cc8:	fb12 f303 	smulbb	r3, r2, r3
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	4b46      	ldr	r3, [pc, #280]	@ (8004de8 <tft_write+0x144>)
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	4b44      	ldr	r3, [pc, #272]	@ (8004de8 <tft_write+0x144>)
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e079      	b.n	8004dd0 <tft_write+0x12c>
		} else if(c != '\r') {
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2b0d      	cmp	r3, #13
 8004ce0:	d076      	beq.n	8004dd0 <tft_write+0x12c>
			uint8_t first = pgm_read_byte(&gfxFont->first);
 8004ce2:	4b40      	ldr	r3, [pc, #256]	@ (8004de4 <tft_write+0x140>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	75fb      	strb	r3, [r7, #23]
			if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 8004cec:	79fa      	ldrb	r2, [r7, #7]
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d36d      	bcc.n	8004dd0 <tft_write+0x12c>
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <tft_write+0x140>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3309      	adds	r3, #9
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	79fa      	ldrb	r2, [r7, #7]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d866      	bhi.n	8004dd0 <tft_write+0x12c>
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
						&gfxFont->glyph))[c - first]);
 8004d02:	79fa      	ldrb	r2, [r7, #7]
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	00da      	lsls	r2, r3, #3
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004d0a:	4b36      	ldr	r3, [pc, #216]	@ (8004de4 <tft_write+0x140>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3304      	adds	r3, #4
						&gfxFont->glyph))[c - first]);
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4413      	add	r3, r2
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8004d14:	613b      	str	r3, [r7, #16]
				uint8_t   w     = pgm_read_byte(&glyph->width),
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	73fb      	strb	r3, [r7, #15]
						h     = pgm_read_byte(&glyph->height);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	3303      	adds	r3, #3
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	73bb      	strb	r3, [r7, #14]
				if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d042      	beq.n	8004db2 <tft_write+0x10e>
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03f      	beq.n	8004db2 <tft_write+0x10e>
						int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3305      	adds	r3, #5
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b25b      	sxtb	r3, r3
 8004d3a:	81bb      	strh	r3, [r7, #12]
						if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <tft_write+0x148>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d023      	beq.n	8004d8c <tft_write+0xe8>
 8004d44:	4b25      	ldr	r3, [pc, #148]	@ (8004ddc <tft_write+0x138>)
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4b25      	ldr	r3, [pc, #148]	@ (8004de0 <tft_write+0x13c>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	4413      	add	r3, r2
 8004d58:	fb00 f303 	mul.w	r3, r0, r3
 8004d5c:	440b      	add	r3, r1
 8004d5e:	4a24      	ldr	r2, [pc, #144]	@ (8004df0 <tft_write+0x14c>)
 8004d60:	8812      	ldrh	r2, [r2, #0]
 8004d62:	4293      	cmp	r3, r2
 8004d64:	dd12      	ble.n	8004d8c <tft_write+0xe8>
							cursor_x  = 0;
 8004d66:	4b1d      	ldr	r3, [pc, #116]	@ (8004ddc <tft_write+0x138>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	801a      	strh	r2, [r3, #0]
							cursor_y += (int16_t)textsize *
 8004d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004de0 <tft_write+0x13c>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
									(uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8004d72:	4b1c      	ldr	r3, [pc, #112]	@ (8004de4 <tft_write+0x140>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330a      	adds	r3, #10
 8004d78:	781b      	ldrb	r3, [r3, #0]
							cursor_y += (int16_t)textsize *
 8004d7a:	fb12 f303 	smulbb	r3, r2, r3
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <tft_write+0x144>)
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	4413      	add	r3, r2
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	4b17      	ldr	r3, [pc, #92]	@ (8004de8 <tft_write+0x144>)
 8004d8a:	801a      	strh	r2, [r3, #0]
						}
						tft_drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8004d8c:	4b13      	ldr	r3, [pc, #76]	@ (8004ddc <tft_write+0x138>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b218      	sxth	r0, r3
 8004d92:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <tft_write+0x144>)
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b219      	sxth	r1, r3
 8004d98:	4b16      	ldr	r3, [pc, #88]	@ (8004df4 <tft_write+0x150>)
 8004d9a:	881d      	ldrh	r5, [r3, #0]
 8004d9c:	4b16      	ldr	r3, [pc, #88]	@ (8004df8 <tft_write+0x154>)
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	4a0f      	ldr	r2, [pc, #60]	@ (8004de0 <tft_write+0x13c>)
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	79fc      	ldrb	r4, [r7, #7]
 8004da6:	9201      	str	r2, [sp, #4]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	462b      	mov	r3, r5
 8004dac:	4622      	mov	r2, r4
 8004dae:	f7ff feb9 	bl	8004b24 <tft_drawChar>
				}
				cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	3304      	adds	r3, #4
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <tft_write+0x13c>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	fb12 f303 	smulbb	r3, r2, r3
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <tft_write+0x138>)
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	4413      	add	r3, r2
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	4b03      	ldr	r3, [pc, #12]	@ (8004ddc <tft_write+0x138>)
 8004dce:	801a      	strh	r2, [r3, #0]
			}
		}

	}
	return 1;
 8004dd0:	2301      	movs	r3, #1
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200000d0 	.word	0x200000d0
 8004de0:	20000008 	.word	0x20000008
 8004de4:	20000034 	.word	0x20000034
 8004de8:	200000ce 	.word	0x200000ce
 8004dec:	2000000e 	.word	0x2000000e
 8004df0:	20000004 	.word	0x20000004
 8004df4:	2000000a 	.word	0x2000000a
 8004df8:	2000000c 	.word	0x2000000c

08004dfc <tft_setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
 */
/**************************************************************************/
void tft_setFont(const GFXfont *f) {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	if(f) {            // Font struct pointer passed in?
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <tft_setFont+0x24>
		if(!gfxFont) { // And no current font struct?
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e48 <tft_setFont+0x4c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <tft_setFont+0x38>
			// Switching from classic to new font behavior.
			// Move cursor pos down 6 pixels so it's on baseline.
			cursor_y += 6;
 8004e12:	4b0e      	ldr	r3, [pc, #56]	@ (8004e4c <tft_setFont+0x50>)
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	3306      	adds	r3, #6
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <tft_setFont+0x50>)
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	e009      	b.n	8004e34 <tft_setFont+0x38>
		}
	} else if(gfxFont) { // NULL passed.  Current font struct defined?
 8004e20:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <tft_setFont+0x4c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <tft_setFont+0x38>
		// Switching from new to classic font behavior.
		// Move cursor pos up 6 pixels so it's at top-left of char.
		cursor_y -= 6;
 8004e28:	4b08      	ldr	r3, [pc, #32]	@ (8004e4c <tft_setFont+0x50>)
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	3b06      	subs	r3, #6
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <tft_setFont+0x50>)
 8004e32:	801a      	strh	r2, [r3, #0]
	}
	gfxFont = (GFXfont *)f;
 8004e34:	4a04      	ldr	r2, [pc, #16]	@ (8004e48 <tft_setFont+0x4c>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6013      	str	r3, [r2, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000034 	.word	0x20000034
 8004e4c:	200000ce 	.word	0x200000ce

08004e50 <tft_printnewtstr>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
 */
/**************************************************************************/
void tft_printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	817b      	strh	r3, [r7, #10]
 8004e60:	4613      	mov	r3, r2
 8004e62:	727b      	strb	r3, [r7, #9]
	tft_setFont(f);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ffc9 	bl	8004dfc <tft_setFont>
	textcolor = txtcolor;
 8004e6a:	4a11      	ldr	r2, [pc, #68]	@ (8004eb0 <tft_printnewtstr+0x60>)
 8004e6c:	897b      	ldrh	r3, [r7, #10]
 8004e6e:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8004e70:	7a7b      	ldrb	r3, [r7, #9]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <tft_printnewtstr+0x2a>
 8004e76:	7a7b      	ldrb	r3, [r7, #9]
 8004e78:	e000      	b.n	8004e7c <tft_printnewtstr+0x2c>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb4 <tft_printnewtstr+0x64>)
 8004e7e:	7013      	strb	r3, [r2, #0]
	tft_setCursor(0, row);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	b21b      	sxth	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	2000      	movs	r0, #0
 8004e88:	f000 f816 	bl	8004eb8 <tft_setCursor>
	//while (*str) write (*str++);
	while (*str) tft_write(*str++);
 8004e8c:	e006      	b.n	8004e9c <tft_printnewtstr+0x4c>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	61ba      	str	r2, [r7, #24]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff ff04 	bl	8004ca4 <tft_write>
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f4      	bne.n	8004e8e <tft_printnewtstr+0x3e>
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000000a 	.word	0x2000000a
 8004eb4:	20000008 	.word	0x20000008

08004eb8 <tft_setCursor>:
{
	textsize = size;
}

void tft_setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460a      	mov	r2, r1
 8004ec2:	80fb      	strh	r3, [r7, #6]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	80bb      	strh	r3, [r7, #4]
 8004ec8:	88fa      	ldrh	r2, [r7, #6]
 8004eca:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <tft_setCursor+0x28>)
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	88ba      	ldrh	r2, [r7, #4]
 8004ed0:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <tft_setCursor+0x2c>)
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	200000d0 	.word	0x200000d0
 8004ee4:	200000ce 	.word	0x200000ce

08004ee8 <tft_gpio_init>:
	setAddrWindow(x, y, x1, y1);
}

/****************** Inicialização de GPIOs *************************/
void tft_gpio_init(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	4b32      	ldr	r3, [pc, #200]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	4a31      	ldr	r2, [pc, #196]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efe:	4b2f      	ldr	r3, [pc, #188]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f12:	4a2a      	ldr	r2, [pc, #168]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f1a:	4b28      	ldr	r3, [pc, #160]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	4a23      	ldr	r2, [pc, #140]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004f30:	f043 0302 	orr.w	r3, r3, #2
 8004f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f36:	4b21      	ldr	r3, [pc, #132]	@ (8004fbc <tft_gpio_init+0xd4>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 8004f42:	2101      	movs	r1, #1
 8004f44:	481e      	ldr	r0, [pc, #120]	@ (8004fc0 <tft_gpio_init+0xd8>)
 8004f46:	f7fb ff21 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	481c      	ldr	r0, [pc, #112]	@ (8004fc0 <tft_gpio_init+0xd8>)
 8004f4e:	f7fb ff1d 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 8004f52:	2110      	movs	r1, #16
 8004f54:	481a      	ldr	r0, [pc, #104]	@ (8004fc0 <tft_gpio_init+0xd8>)
 8004f56:	f7fb ff19 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4819      	ldr	r0, [pc, #100]	@ (8004fc4 <tft_gpio_init+0xdc>)
 8004f5e:	f7fb ff15 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 8004f62:	2102      	movs	r1, #2
 8004f64:	4818      	ldr	r0, [pc, #96]	@ (8004fc8 <tft_gpio_init+0xe0>)
 8004f66:	f7fb ff11 	bl	8000d8c <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 8004f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f6e:	4814      	ldr	r0, [pc, #80]	@ (8004fc0 <tft_gpio_init+0xd8>)
 8004f70:	f7fb ff0c 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8004f74:	2180      	movs	r1, #128	@ 0x80
 8004f76:	4814      	ldr	r0, [pc, #80]	@ (8004fc8 <tft_gpio_init+0xe0>)
 8004f78:	f7fb ff08 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8004f7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004f80:	480f      	ldr	r0, [pc, #60]	@ (8004fc0 <tft_gpio_init+0xd8>)
 8004f82:	f7fb ff03 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8004f86:	2108      	movs	r1, #8
 8004f88:	480e      	ldr	r0, [pc, #56]	@ (8004fc4 <tft_gpio_init+0xdc>)
 8004f8a:	f7fb feff 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8004f8e:	2120      	movs	r1, #32
 8004f90:	480c      	ldr	r0, [pc, #48]	@ (8004fc4 <tft_gpio_init+0xdc>)
 8004f92:	f7fb fefb 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8004f96:	2110      	movs	r1, #16
 8004f98:	480a      	ldr	r0, [pc, #40]	@ (8004fc4 <tft_gpio_init+0xdc>)
 8004f9a:	f7fb fef7 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8004f9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004fa2:	4808      	ldr	r0, [pc, #32]	@ (8004fc4 <tft_gpio_init+0xdc>)
 8004fa4:	f7fb fef2 	bl	8000d8c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8004fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fac:	4804      	ldr	r0, [pc, #16]	@ (8004fc0 <tft_gpio_init+0xd8>)
 8004fae:	f7fb feed 	bl	8000d8c <PIN_OUTPUT>
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40020000 	.word	0x40020000
 8004fc4:	40020400 	.word	0x40020400
 8004fc8:	40020800 	.word	0x40020800

08004fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005004 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004fd0:	f7fb fe94 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fd4:	480c      	ldr	r0, [pc, #48]	@ (8005008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004fd6:	490d      	ldr	r1, [pc, #52]	@ (800500c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8005010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fdc:	e002      	b.n	8004fe4 <LoopCopyDataInit>

08004fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fe2:	3304      	adds	r3, #4

08004fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fe8:	d3f9      	bcc.n	8004fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fea:	4a0a      	ldr	r2, [pc, #40]	@ (8005014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fec:	4c0a      	ldr	r4, [pc, #40]	@ (8005018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ff0:	e001      	b.n	8004ff6 <LoopFillZerobss>

08004ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ff4:	3204      	adds	r2, #4

08004ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ff8:	d3fb      	bcc.n	8004ff2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004ffa:	f001 ff31 	bl	8006e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ffe:	f7fb fa79 	bl	80004f4 <main>
  bx  lr    
 8005002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800500c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8005010:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 8005014:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8005018:	200000f0 	.word	0x200000f0

0800501c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800501c:	e7fe      	b.n	800501c <ADC_IRQHandler>
	...

08005020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005024:	4b0e      	ldr	r3, [pc, #56]	@ (8005060 <HAL_Init+0x40>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <HAL_Init+0x40>)
 800502a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800502e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005030:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <HAL_Init+0x40>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a0a      	ldr	r2, [pc, #40]	@ (8005060 <HAL_Init+0x40>)
 8005036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800503a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800503c:	4b08      	ldr	r3, [pc, #32]	@ (8005060 <HAL_Init+0x40>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a07      	ldr	r2, [pc, #28]	@ (8005060 <HAL_Init+0x40>)
 8005042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005048:	2003      	movs	r0, #3
 800504a:	f000 f931 	bl	80052b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800504e:	2000      	movs	r0, #0
 8005050:	f000 f808 	bl	8005064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005054:	f7fb fd90 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023c00 	.word	0x40023c00

08005064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_InitTick+0x54>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <HAL_InitTick+0x58>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	4619      	mov	r1, r3
 8005076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800507a:	fbb3 f3f1 	udiv	r3, r3, r1
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f93b 	bl	80052fe <HAL_SYSTICK_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e00e      	b.n	80050b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b0f      	cmp	r3, #15
 8005096:	d80a      	bhi.n	80050ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005098:	2200      	movs	r2, #0
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	f000 f911 	bl	80052c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050a4:	4a06      	ldr	r2, [pc, #24]	@ (80050c0 <HAL_InitTick+0x5c>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e000      	b.n	80050b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000000 	.word	0x20000000
 80050bc:	20000014 	.word	0x20000014
 80050c0:	20000010 	.word	0x20000010

080050c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050c8:	4b06      	ldr	r3, [pc, #24]	@ (80050e4 <HAL_IncTick+0x20>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <HAL_IncTick+0x24>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4413      	add	r3, r2
 80050d4:	4a04      	ldr	r2, [pc, #16]	@ (80050e8 <HAL_IncTick+0x24>)
 80050d6:	6013      	str	r3, [r2, #0]
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000014 	.word	0x20000014
 80050e8:	200000ec 	.word	0x200000ec

080050ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return uwTick;
 80050f0:	4b03      	ldr	r3, [pc, #12]	@ (8005100 <HAL_GetTick+0x14>)
 80050f2:	681b      	ldr	r3, [r3, #0]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	200000ec 	.word	0x200000ec

08005104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800510c:	f7ff ffee 	bl	80050ec <HAL_GetTick>
 8005110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d005      	beq.n	800512a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800511e:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <HAL_Delay+0x44>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800512a:	bf00      	nop
 800512c:	f7ff ffde 	bl	80050ec <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	429a      	cmp	r2, r3
 800513a:	d8f7      	bhi.n	800512c <HAL_Delay+0x28>
  {
  }
}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000014 	.word	0x20000014

0800514c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800515c:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <__NVIC_SetPriorityGrouping+0x44>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005168:	4013      	ands	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800517c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800517e:	4a04      	ldr	r2, [pc, #16]	@ (8005190 <__NVIC_SetPriorityGrouping+0x44>)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	60d3      	str	r3, [r2, #12]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <__NVIC_GetPriorityGrouping+0x18>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	f003 0307 	and.w	r3, r3, #7
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	6039      	str	r1, [r7, #0]
 80051ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db0a      	blt.n	80051da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	490c      	ldr	r1, [pc, #48]	@ (80051fc <__NVIC_SetPriority+0x4c>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	0112      	lsls	r2, r2, #4
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	440b      	add	r3, r1
 80051d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d8:	e00a      	b.n	80051f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4908      	ldr	r1, [pc, #32]	@ (8005200 <__NVIC_SetPriority+0x50>)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3b04      	subs	r3, #4
 80051e8:	0112      	lsls	r2, r2, #4
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	440b      	add	r3, r1
 80051ee:	761a      	strb	r2, [r3, #24]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	e000e100 	.word	0xe000e100
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005204:	b480      	push	{r7}
 8005206:	b089      	sub	sp, #36	@ 0x24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f1c3 0307 	rsb	r3, r3, #7
 800521e:	2b04      	cmp	r3, #4
 8005220:	bf28      	it	cs
 8005222:	2304      	movcs	r3, #4
 8005224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3304      	adds	r3, #4
 800522a:	2b06      	cmp	r3, #6
 800522c:	d902      	bls.n	8005234 <NVIC_EncodePriority+0x30>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3b03      	subs	r3, #3
 8005232:	e000      	b.n	8005236 <NVIC_EncodePriority+0x32>
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	401a      	ands	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800524c:	f04f 31ff 	mov.w	r1, #4294967295
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	43d9      	mvns	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	4313      	orrs	r3, r2
         );
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	@ 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3b01      	subs	r3, #1
 8005278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800527c:	d301      	bcc.n	8005282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800527e:	2301      	movs	r3, #1
 8005280:	e00f      	b.n	80052a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005282:	4a0a      	ldr	r2, [pc, #40]	@ (80052ac <SysTick_Config+0x40>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800528a:	210f      	movs	r1, #15
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	f7ff ff8e 	bl	80051b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <SysTick_Config+0x40>)
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800529a:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <SysTick_Config+0x40>)
 800529c:	2207      	movs	r2, #7
 800529e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	e000e010 	.word	0xe000e010

080052b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff47 	bl	800514c <__NVIC_SetPriorityGrouping>
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d8:	f7ff ff5c 	bl	8005194 <__NVIC_GetPriorityGrouping>
 80052dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7ff ff8e 	bl	8005204 <NVIC_EncodePriority>
 80052e8:	4602      	mov	r2, r0
 80052ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff5d 	bl	80051b0 <__NVIC_SetPriority>
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff ffb0 	bl	800526c <SysTick_Config>
 800530c:	4603      	mov	r3, r0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	@ 0x24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800532a:	2300      	movs	r3, #0
 800532c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800532e:	2300      	movs	r3, #0
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	e165      	b.n	8005600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005334:	2201      	movs	r2, #1
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4013      	ands	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	429a      	cmp	r2, r3
 800534e:	f040 8154 	bne.w	80055fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b01      	cmp	r3, #1
 800535c:	d005      	beq.n	800536a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005366:	2b02      	cmp	r3, #2
 8005368:	d130      	bne.n	80053cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	2203      	movs	r2, #3
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4313      	orrs	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053a0:	2201      	movs	r2, #1
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 0201 	and.w	r2, r3, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d017      	beq.n	8005408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	2203      	movs	r2, #3
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4013      	ands	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d123      	bne.n	800545c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	08da      	lsrs	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3208      	adds	r2, #8
 800541c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	220f      	movs	r2, #15
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	08da      	lsrs	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3208      	adds	r2, #8
 8005456:	69b9      	ldr	r1, [r7, #24]
 8005458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	2203      	movs	r2, #3
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	43db      	mvns	r3, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4013      	ands	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 0203 	and.w	r2, r3, #3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80ae 	beq.w	80055fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005618 <HAL_GPIO_Init+0x300>)
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005618 <HAL_GPIO_Init+0x300>)
 80054a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80054ae:	4b5a      	ldr	r3, [pc, #360]	@ (8005618 <HAL_GPIO_Init+0x300>)
 80054b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ba:	4a58      	ldr	r2, [pc, #352]	@ (800561c <HAL_GPIO_Init+0x304>)
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	3302      	adds	r3, #2
 80054c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	220f      	movs	r2, #15
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005620 <HAL_GPIO_Init+0x308>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d025      	beq.n	8005532 <HAL_GPIO_Init+0x21a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005624 <HAL_GPIO_Init+0x30c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01f      	beq.n	800552e <HAL_GPIO_Init+0x216>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005628 <HAL_GPIO_Init+0x310>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d019      	beq.n	800552a <HAL_GPIO_Init+0x212>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a4c      	ldr	r2, [pc, #304]	@ (800562c <HAL_GPIO_Init+0x314>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_GPIO_Init+0x20e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a4b      	ldr	r2, [pc, #300]	@ (8005630 <HAL_GPIO_Init+0x318>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00d      	beq.n	8005522 <HAL_GPIO_Init+0x20a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a4a      	ldr	r2, [pc, #296]	@ (8005634 <HAL_GPIO_Init+0x31c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d007      	beq.n	800551e <HAL_GPIO_Init+0x206>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a49      	ldr	r2, [pc, #292]	@ (8005638 <HAL_GPIO_Init+0x320>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <HAL_GPIO_Init+0x202>
 8005516:	2306      	movs	r3, #6
 8005518:	e00c      	b.n	8005534 <HAL_GPIO_Init+0x21c>
 800551a:	2307      	movs	r3, #7
 800551c:	e00a      	b.n	8005534 <HAL_GPIO_Init+0x21c>
 800551e:	2305      	movs	r3, #5
 8005520:	e008      	b.n	8005534 <HAL_GPIO_Init+0x21c>
 8005522:	2304      	movs	r3, #4
 8005524:	e006      	b.n	8005534 <HAL_GPIO_Init+0x21c>
 8005526:	2303      	movs	r3, #3
 8005528:	e004      	b.n	8005534 <HAL_GPIO_Init+0x21c>
 800552a:	2302      	movs	r3, #2
 800552c:	e002      	b.n	8005534 <HAL_GPIO_Init+0x21c>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_GPIO_Init+0x21c>
 8005532:	2300      	movs	r3, #0
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	f002 0203 	and.w	r2, r2, #3
 800553a:	0092      	lsls	r2, r2, #2
 800553c:	4093      	lsls	r3, r2
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005544:	4935      	ldr	r1, [pc, #212]	@ (800561c <HAL_GPIO_Init+0x304>)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	3302      	adds	r3, #2
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005552:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <HAL_GPIO_Init+0x324>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005576:	4a31      	ldr	r2, [pc, #196]	@ (800563c <HAL_GPIO_Init+0x324>)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800557c:	4b2f      	ldr	r3, [pc, #188]	@ (800563c <HAL_GPIO_Init+0x324>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	43db      	mvns	r3, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055a0:	4a26      	ldr	r2, [pc, #152]	@ (800563c <HAL_GPIO_Init+0x324>)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055a6:	4b25      	ldr	r3, [pc, #148]	@ (800563c <HAL_GPIO_Init+0x324>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055ca:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <HAL_GPIO_Init+0x324>)
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055d0:	4b1a      	ldr	r3, [pc, #104]	@ (800563c <HAL_GPIO_Init+0x324>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055f4:	4a11      	ldr	r2, [pc, #68]	@ (800563c <HAL_GPIO_Init+0x324>)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3301      	adds	r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b0f      	cmp	r3, #15
 8005604:	f67f ae96 	bls.w	8005334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	3724      	adds	r7, #36	@ 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	40013800 	.word	0x40013800
 8005620:	40020000 	.word	0x40020000
 8005624:	40020400 	.word	0x40020400
 8005628:	40020800 	.word	0x40020800
 800562c:	40020c00 	.word	0x40020c00
 8005630:	40021000 	.word	0x40021000
 8005634:	40021400 	.word	0x40021400
 8005638:	40021800 	.word	0x40021800
 800563c:	40013c00 	.word	0x40013c00

08005640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
 800564c:	4613      	mov	r3, r2
 800564e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005650:	787b      	ldrb	r3, [r7, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800565c:	e003      	b.n	8005666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	041a      	lsls	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	619a      	str	r2, [r3, #24]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0cc      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005688:	4b68      	ldr	r3, [pc, #416]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d90c      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b65      	ldr	r3, [pc, #404]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b63      	ldr	r3, [pc, #396]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0b8      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d020      	beq.n	80056fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c8:	4b59      	ldr	r3, [pc, #356]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4a58      	ldr	r2, [pc, #352]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056e0:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a52      	ldr	r2, [pc, #328]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b50      	ldr	r3, [pc, #320]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	494d      	ldr	r1, [pc, #308]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d044      	beq.n	8005794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b47      	ldr	r3, [pc, #284]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d119      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d003      	beq.n	8005732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572e:	2b03      	cmp	r3, #3
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005732:	4b3f      	ldr	r3, [pc, #252]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e06f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005742:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e067      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005752:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4934      	ldr	r1, [pc, #208]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005764:	f7ff fcc2 	bl	80050ec <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	e00a      	b.n	8005782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576c:	f7ff fcbe 	bl	80050ec <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e04f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 020c 	and.w	r2, r3, #12
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	429a      	cmp	r2, r3
 8005792:	d1eb      	bne.n	800576c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005794:	4b25      	ldr	r3, [pc, #148]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d20c      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b20      	ldr	r3, [pc, #128]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e032      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c8:	4b19      	ldr	r3, [pc, #100]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4916      	ldr	r1, [pc, #88]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e6:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	490e      	ldr	r1, [pc, #56]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057fa:	f000 f855 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	490a      	ldr	r1, [pc, #40]	@ (8005834 <HAL_RCC_ClockConfig+0x1c0>)
 800580c:	5ccb      	ldrb	r3, [r1, r3]
 800580e:	fa22 f303 	lsr.w	r3, r2, r3
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <HAL_RCC_ClockConfig+0x1c4>)
 8005814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_RCC_ClockConfig+0x1c8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fc22 	bl	8005064 <HAL_InitTick>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00
 8005830:	40023800 	.word	0x40023800
 8005834:	080080b8 	.word	0x080080b8
 8005838:	20000000 	.word	0x20000000
 800583c:	20000010 	.word	0x20000010

08005840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000000 	.word	0x20000000

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a9b      	lsrs	r3, r3, #10
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4903      	ldr	r1, [pc, #12]	@ (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	080080c8 	.word	0x080080c8

08005880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005884:	f7ff ffdc 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005888:	4602      	mov	r2, r0
 800588a:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	0b5b      	lsrs	r3, r3, #13
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	4903      	ldr	r1, [pc, #12]	@ (80058a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005896:	5ccb      	ldrb	r3, [r1, r3]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40023800 	.word	0x40023800
 80058a4:	080080c8 	.word	0x080080c8

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b0ae      	sub	sp, #184	@ 0xb8
 80058ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ce:	4bcb      	ldr	r3, [pc, #812]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	f200 8206 	bhi.w	8005ce8 <HAL_RCC_GetSysClockFreq+0x440>
 80058dc:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005919 	.word	0x08005919
 80058e8:	08005ce9 	.word	0x08005ce9
 80058ec:	08005ce9 	.word	0x08005ce9
 80058f0:	08005ce9 	.word	0x08005ce9
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005ce9 	.word	0x08005ce9
 80058fc:	08005ce9 	.word	0x08005ce9
 8005900:	08005ce9 	.word	0x08005ce9
 8005904:	08005929 	.word	0x08005929
 8005908:	08005ce9 	.word	0x08005ce9
 800590c:	08005ce9 	.word	0x08005ce9
 8005910:	08005ce9 	.word	0x08005ce9
 8005914:	08005b19 	.word	0x08005b19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005918:	4bb9      	ldr	r3, [pc, #740]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x358>)
 800591a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800591e:	e1e7      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005920:	4bb8      	ldr	r3, [pc, #736]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005926:	e1e3      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005928:	4bb4      	ldr	r3, [pc, #720]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005934:	4bb1      	ldr	r3, [pc, #708]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d071      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005940:	4bae      	ldr	r3, [pc, #696]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	099b      	lsrs	r3, r3, #6
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800594c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	0159      	lsls	r1, r3, #5
 8005974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005978:	0150      	lsls	r0, r2, #5
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4621      	mov	r1, r4
 8005980:	1a51      	subs	r1, r2, r1
 8005982:	6439      	str	r1, [r7, #64]	@ 0x40
 8005984:	4629      	mov	r1, r5
 8005986:	eb63 0301 	sbc.w	r3, r3, r1
 800598a:	647b      	str	r3, [r7, #68]	@ 0x44
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005998:	4649      	mov	r1, r9
 800599a:	018b      	lsls	r3, r1, #6
 800599c:	4641      	mov	r1, r8
 800599e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059a2:	4641      	mov	r1, r8
 80059a4:	018a      	lsls	r2, r1, #6
 80059a6:	4641      	mov	r1, r8
 80059a8:	1a51      	subs	r1, r2, r1
 80059aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059ac:	4649      	mov	r1, r9
 80059ae:	eb63 0301 	sbc.w	r3, r3, r1
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80059c0:	4649      	mov	r1, r9
 80059c2:	00cb      	lsls	r3, r1, #3
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ca:	4641      	mov	r1, r8
 80059cc:	00ca      	lsls	r2, r1, #3
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	4622      	mov	r2, r4
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059da:	462b      	mov	r3, r5
 80059dc:	460a      	mov	r2, r1
 80059de:	eb42 0303 	adc.w	r3, r2, r3
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80059f0:	4629      	mov	r1, r5
 80059f2:	024b      	lsls	r3, r1, #9
 80059f4:	4621      	mov	r1, r4
 80059f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059fa:	4621      	mov	r1, r4
 80059fc:	024a      	lsls	r2, r1, #9
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005a14:	f7fa fbf6 	bl	8000204 <__aeabi_uldivmod>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a22:	e067      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a24:	4b75      	ldr	r3, [pc, #468]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	099b      	lsrs	r3, r3, #6
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a3e:	2300      	movs	r3, #0
 8005a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f04f 0000 	mov.w	r0, #0
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	0159      	lsls	r1, r3, #5
 8005a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a58:	0150      	lsls	r0, r2, #5
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4621      	mov	r1, r4
 8005a60:	1a51      	subs	r1, r2, r1
 8005a62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a64:	4629      	mov	r1, r5
 8005a66:	eb63 0301 	sbc.w	r3, r3, r1
 8005a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005a78:	4649      	mov	r1, r9
 8005a7a:	018b      	lsls	r3, r1, #6
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a82:	4641      	mov	r1, r8
 8005a84:	018a      	lsls	r2, r1, #6
 8005a86:	4641      	mov	r1, r8
 8005a88:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa6:	4692      	mov	sl, r2
 8005aa8:	469b      	mov	fp, r3
 8005aaa:	4623      	mov	r3, r4
 8005aac:	eb1a 0303 	adds.w	r3, sl, r3
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	028b      	lsls	r3, r1, #10
 8005aca:	4621      	mov	r1, r4
 8005acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	028a      	lsls	r2, r1, #10
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005adc:	2200      	movs	r2, #0
 8005ade:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ae0:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005ae6:	f7fa fb8d 	bl	8000204 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4613      	mov	r3, r2
 8005af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af4:	4b41      	ldr	r3, [pc, #260]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	3301      	adds	r3, #1
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8005b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b16:	e0eb      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b18:	4b38      	ldr	r3, [pc, #224]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b24:	4b35      	ldr	r3, [pc, #212]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d06b      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b30:	4b32      	ldr	r3, [pc, #200]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	099b      	lsrs	r3, r3, #6
 8005b36:	2200      	movs	r2, #0
 8005b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b42:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b44:	2300      	movs	r3, #0
 8005b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	462b      	mov	r3, r5
 8005b50:	f04f 0000 	mov.w	r0, #0
 8005b54:	f04f 0100 	mov.w	r1, #0
 8005b58:	0159      	lsls	r1, r3, #5
 8005b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b5e:	0150      	lsls	r0, r2, #5
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4621      	mov	r1, r4
 8005b66:	1a51      	subs	r1, r2, r1
 8005b68:	61b9      	str	r1, [r7, #24]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005b7e:	4659      	mov	r1, fp
 8005b80:	018b      	lsls	r3, r1, #6
 8005b82:	4651      	mov	r1, sl
 8005b84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b88:	4651      	mov	r1, sl
 8005b8a:	018a      	lsls	r2, r1, #6
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ebb2 0801 	subs.w	r8, r2, r1
 8005b92:	4659      	mov	r1, fp
 8005b94:	eb63 0901 	sbc.w	r9, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bac:	4690      	mov	r8, r2
 8005bae:	4699      	mov	r9, r3
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	eb18 0303 	adds.w	r3, r8, r3
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	462b      	mov	r3, r5
 8005bba:	eb49 0303 	adc.w	r3, r9, r3
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005bcc:	4629      	mov	r1, r5
 8005bce:	024b      	lsls	r3, r1, #9
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	024a      	lsls	r2, r1, #9
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005be2:	2200      	movs	r2, #0
 8005be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005be6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bec:	f7fa fb0a 	bl	8000204 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bfa:	e065      	b.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x420>
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	00f42400 	.word	0x00f42400
 8005c04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c08:	4b3d      	ldr	r3, [pc, #244]	@ (8005d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	099b      	lsrs	r3, r3, #6
 8005c0e:	2200      	movs	r2, #0
 8005c10:	4618      	mov	r0, r3
 8005c12:	4611      	mov	r1, r2
 8005c14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005c22:	4642      	mov	r2, r8
 8005c24:	464b      	mov	r3, r9
 8005c26:	f04f 0000 	mov.w	r0, #0
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	0159      	lsls	r1, r3, #5
 8005c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c34:	0150      	lsls	r0, r2, #5
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	1a51      	subs	r1, r2, r1
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	4649      	mov	r1, r9
 8005c42:	eb63 0301 	sbc.w	r3, r3, r1
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005c54:	4659      	mov	r1, fp
 8005c56:	018b      	lsls	r3, r1, #6
 8005c58:	4651      	mov	r1, sl
 8005c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c5e:	4651      	mov	r1, sl
 8005c60:	018a      	lsls	r2, r1, #6
 8005c62:	4651      	mov	r1, sl
 8005c64:	1a54      	subs	r4, r2, r1
 8005c66:	4659      	mov	r1, fp
 8005c68:	eb63 0501 	sbc.w	r5, r3, r1
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	00eb      	lsls	r3, r5, #3
 8005c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7a:	00e2      	lsls	r2, r4, #3
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	461d      	mov	r5, r3
 8005c80:	4643      	mov	r3, r8
 8005c82:	18e3      	adds	r3, r4, r3
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	464b      	mov	r3, r9
 8005c88:	eb45 0303 	adc.w	r3, r5, r3
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	028b      	lsls	r3, r1, #10
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	028a      	lsls	r2, r1, #10
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cba:	f7fa faa3 	bl	8000204 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	0f1b      	lsrs	r3, r3, #28
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8005cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ce6:	e003      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce8:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	37b8      	adds	r7, #184	@ 0xb8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800
 8005d04:	00f42400 	.word	0x00f42400

08005d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e28d      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8083 	beq.w	8005e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d28:	4b94      	ldr	r3, [pc, #592]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d019      	beq.n	8005d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d34:	4b91      	ldr	r3, [pc, #580]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d40:	4b8e      	ldr	r3, [pc, #568]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	d112      	bne.n	8005d80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5a:	4b88      	ldr	r3, [pc, #544]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d68:	4b84      	ldr	r3, [pc, #528]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05b      	beq.n	8005e2c <HAL_RCC_OscConfig+0x124>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d157      	bne.n	8005e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e25a      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d88:	d106      	bne.n	8005d98 <HAL_RCC_OscConfig+0x90>
 8005d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e01d      	b.n	8005dd4 <HAL_RCC_OscConfig+0xcc>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005da0:	d10c      	bne.n	8005dbc <HAL_RCC_OscConfig+0xb4>
 8005da2:	4b76      	ldr	r3, [pc, #472]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a75      	ldr	r2, [pc, #468]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b73      	ldr	r3, [pc, #460]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a72      	ldr	r2, [pc, #456]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_OscConfig+0xcc>
 8005dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d013      	beq.n	8005e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7ff f986 	bl	80050ec <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de4:	f7ff f982 	bl	80050ec <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	@ 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e21f      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df6:	4b61      	ldr	r3, [pc, #388]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0xdc>
 8005e02:	e014      	b.n	8005e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7ff f972 	bl	80050ec <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e0c:	f7ff f96e 	bl	80050ec <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	@ 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e20b      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1e:	4b57      	ldr	r3, [pc, #348]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x104>
 8005e2a:	e000      	b.n	8005e2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d06f      	beq.n	8005f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e3a:	4b50      	ldr	r3, [pc, #320]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d017      	beq.n	8005e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e46:	4b4d      	ldr	r3, [pc, #308]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d105      	bne.n	8005e5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e52:	4b4a      	ldr	r3, [pc, #296]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e5e:	4b47      	ldr	r3, [pc, #284]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d11c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e6a:	4b44      	ldr	r3, [pc, #272]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d116      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e76:	4b41      	ldr	r3, [pc, #260]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_RCC_OscConfig+0x186>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d001      	beq.n	8005e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e1d3      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4937      	ldr	r1, [pc, #220]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	e03a      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d020      	beq.n	8005eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eac:	4b34      	ldr	r3, [pc, #208]	@ (8005f80 <HAL_RCC_OscConfig+0x278>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7ff f91b 	bl	80050ec <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eba:	f7ff f917 	bl	80050ec <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e1b4      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed8:	4b28      	ldr	r3, [pc, #160]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4925      	ldr	r1, [pc, #148]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	600b      	str	r3, [r1, #0]
 8005eec:	e015      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eee:	4b24      	ldr	r3, [pc, #144]	@ (8005f80 <HAL_RCC_OscConfig+0x278>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef4:	f7ff f8fa 	bl	80050ec <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efc:	f7ff f8f6 	bl	80050ec <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e193      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d036      	beq.n	8005f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f2e:	4b15      	ldr	r3, [pc, #84]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7ff f8da 	bl	80050ec <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7ff f8d6 	bl	80050ec <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e173      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <HAL_RCC_OscConfig+0x274>)
 8005f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x234>
 8005f5a:	e01b      	b.n	8005f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5c:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7ff f8c3 	bl	80050ec <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f68:	e00e      	b.n	8005f88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6a:	f7ff f8bf 	bl	80050ec <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d907      	bls.n	8005f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e15c      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	42470000 	.word	0x42470000
 8005f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f88:	4b8a      	ldr	r3, [pc, #552]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ea      	bne.n	8005f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8097 	beq.w	80060d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa6:	4b83      	ldr	r3, [pc, #524]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	4a7e      	ldr	r2, [pc, #504]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd2:	4b79      	ldr	r3, [pc, #484]	@ (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d118      	bne.n	8006010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fde:	4b76      	ldr	r3, [pc, #472]	@ (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a75      	ldr	r2, [pc, #468]	@ (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fea:	f7ff f87f 	bl	80050ec <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff2:	f7ff f87b 	bl	80050ec <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e118      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	4b6c      	ldr	r3, [pc, #432]	@ (80061b8 <HAL_RCC_OscConfig+0x4b0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d106      	bne.n	8006026 <HAL_RCC_OscConfig+0x31e>
 8006018:	4b66      	ldr	r3, [pc, #408]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601c:	4a65      	ldr	r2, [pc, #404]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	6713      	str	r3, [r2, #112]	@ 0x70
 8006024:	e01c      	b.n	8006060 <HAL_RCC_OscConfig+0x358>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d10c      	bne.n	8006048 <HAL_RCC_OscConfig+0x340>
 800602e:	4b61      	ldr	r3, [pc, #388]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006032:	4a60      	ldr	r2, [pc, #384]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006034:	f043 0304 	orr.w	r3, r3, #4
 8006038:	6713      	str	r3, [r2, #112]	@ 0x70
 800603a:	4b5e      	ldr	r3, [pc, #376]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603e:	4a5d      	ldr	r2, [pc, #372]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	6713      	str	r3, [r2, #112]	@ 0x70
 8006046:	e00b      	b.n	8006060 <HAL_RCC_OscConfig+0x358>
 8006048:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604c:	4a59      	ldr	r2, [pc, #356]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	@ 0x70
 8006054:	4b57      	ldr	r3, [pc, #348]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006058:	4a56      	ldr	r2, [pc, #344]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d015      	beq.n	8006094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006068:	f7ff f840 	bl	80050ec <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606e:	e00a      	b.n	8006086 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006070:	f7ff f83c 	bl	80050ec <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e0d7      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006086:	4b4b      	ldr	r3, [pc, #300]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ee      	beq.n	8006070 <HAL_RCC_OscConfig+0x368>
 8006092:	e014      	b.n	80060be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7ff f82a 	bl	80050ec <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7ff f826 	bl	80050ec <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0c1      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b2:	4b40      	ldr	r3, [pc, #256]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ee      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d105      	bne.n	80060d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c4:	4b3b      	ldr	r3, [pc, #236]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	4a3a      	ldr	r2, [pc, #232]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80ad 	beq.w	8006234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060da:	4b36      	ldr	r3, [pc, #216]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 030c 	and.w	r3, r3, #12
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d060      	beq.n	80061a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d145      	bne.n	800617a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b33      	ldr	r3, [pc, #204]	@ (80061bc <HAL_RCC_OscConfig+0x4b4>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f4:	f7fe fffa 	bl	80050ec <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fe fff6 	bl	80050ec <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e093      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610e:	4b29      	ldr	r3, [pc, #164]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	019b      	lsls	r3, r3, #6
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	3b01      	subs	r3, #1
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006144:	071b      	lsls	r3, r3, #28
 8006146:	491b      	ldr	r1, [pc, #108]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800614c:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <HAL_RCC_OscConfig+0x4b4>)
 800614e:	2201      	movs	r2, #1
 8006150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006152:	f7fe ffcb 	bl	80050ec <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615a:	f7fe ffc7 	bl	80050ec <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e064      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616c:	4b11      	ldr	r3, [pc, #68]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x452>
 8006178:	e05c      	b.n	8006234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617a:	4b10      	ldr	r3, [pc, #64]	@ (80061bc <HAL_RCC_OscConfig+0x4b4>)
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fe ffb4 	bl	80050ec <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006188:	f7fe ffb0 	bl	80050ec <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e04d      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	4b06      	ldr	r3, [pc, #24]	@ (80061b4 <HAL_RCC_OscConfig+0x4ac>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x480>
 80061a6:	e045      	b.n	8006234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e040      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40007000 	.word	0x40007000
 80061bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006240 <HAL_RCC_OscConfig+0x538>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d030      	beq.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d129      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d122      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d119      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d10f      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d107      	bne.n	8006230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800

08006244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e041      	b.n	80062da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fa fcac 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f000 f95e 	bl	8006544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d001      	beq.n	80062fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e046      	b.n	800638a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a23      	ldr	r2, [pc, #140]	@ (8006398 <HAL_TIM_Base_Start+0xb4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d022      	beq.n	8006354 <HAL_TIM_Base_Start+0x70>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006316:	d01d      	beq.n	8006354 <HAL_TIM_Base_Start+0x70>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1f      	ldr	r2, [pc, #124]	@ (800639c <HAL_TIM_Base_Start+0xb8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d018      	beq.n	8006354 <HAL_TIM_Base_Start+0x70>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1e      	ldr	r2, [pc, #120]	@ (80063a0 <HAL_TIM_Base_Start+0xbc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <HAL_TIM_Base_Start+0x70>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1c      	ldr	r2, [pc, #112]	@ (80063a4 <HAL_TIM_Base_Start+0xc0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_TIM_Base_Start+0x70>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1b      	ldr	r2, [pc, #108]	@ (80063a8 <HAL_TIM_Base_Start+0xc4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d009      	beq.n	8006354 <HAL_TIM_Base_Start+0x70>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a19      	ldr	r2, [pc, #100]	@ (80063ac <HAL_TIM_Base_Start+0xc8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_TIM_Base_Start+0x70>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a18      	ldr	r2, [pc, #96]	@ (80063b0 <HAL_TIM_Base_Start+0xcc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d111      	bne.n	8006378 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b06      	cmp	r3, #6
 8006364:	d010      	beq.n	8006388 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006376:	e007      	b.n	8006388 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40010000 	.word	0x40010000
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40010400 	.word	0x40010400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40001800 	.word	0x40001800

080063b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_TIM_ConfigClockSource+0x1c>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e0b4      	b.n	800653a <HAL_TIM_ConfigClockSource+0x186>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006408:	d03e      	beq.n	8006488 <HAL_TIM_ConfigClockSource+0xd4>
 800640a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800640e:	f200 8087 	bhi.w	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006416:	f000 8086 	beq.w	8006526 <HAL_TIM_ConfigClockSource+0x172>
 800641a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800641e:	d87f      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006420:	2b70      	cmp	r3, #112	@ 0x70
 8006422:	d01a      	beq.n	800645a <HAL_TIM_ConfigClockSource+0xa6>
 8006424:	2b70      	cmp	r3, #112	@ 0x70
 8006426:	d87b      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006428:	2b60      	cmp	r3, #96	@ 0x60
 800642a:	d050      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x11a>
 800642c:	2b60      	cmp	r3, #96	@ 0x60
 800642e:	d877      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006430:	2b50      	cmp	r3, #80	@ 0x50
 8006432:	d03c      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0xfa>
 8006434:	2b50      	cmp	r3, #80	@ 0x50
 8006436:	d873      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006438:	2b40      	cmp	r3, #64	@ 0x40
 800643a:	d058      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x13a>
 800643c:	2b40      	cmp	r3, #64	@ 0x40
 800643e:	d86f      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006440:	2b30      	cmp	r3, #48	@ 0x30
 8006442:	d064      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x15a>
 8006444:	2b30      	cmp	r3, #48	@ 0x30
 8006446:	d86b      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006448:	2b20      	cmp	r3, #32
 800644a:	d060      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x15a>
 800644c:	2b20      	cmp	r3, #32
 800644e:	d867      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d05c      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x15a>
 8006454:	2b10      	cmp	r3, #16
 8006456:	d05a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x15a>
 8006458:	e062      	b.n	8006520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800646a:	f000 f991 	bl	8006790 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800647c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	609a      	str	r2, [r3, #8]
      break;
 8006486:	e04f      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006498:	f000 f97a 	bl	8006790 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064aa:	609a      	str	r2, [r3, #8]
      break;
 80064ac:	e03c      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ba:	461a      	mov	r2, r3
 80064bc:	f000 f8ee 	bl	800669c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2150      	movs	r1, #80	@ 0x50
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f947 	bl	800675a <TIM_ITRx_SetConfig>
      break;
 80064cc:	e02c      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064da:	461a      	mov	r2, r3
 80064dc:	f000 f90d 	bl	80066fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2160      	movs	r1, #96	@ 0x60
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f937 	bl	800675a <TIM_ITRx_SetConfig>
      break;
 80064ec:	e01c      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fa:	461a      	mov	r2, r3
 80064fc:	f000 f8ce 	bl	800669c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2140      	movs	r1, #64	@ 0x40
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f927 	bl	800675a <TIM_ITRx_SetConfig>
      break;
 800650c:	e00c      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f000 f91e 	bl	800675a <TIM_ITRx_SetConfig>
      break;
 800651e:	e003      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
      break;
 8006524:	e000      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a46      	ldr	r2, [pc, #280]	@ (8006670 <TIM_Base_SetConfig+0x12c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006562:	d00f      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a43      	ldr	r2, [pc, #268]	@ (8006674 <TIM_Base_SetConfig+0x130>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00b      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a42      	ldr	r2, [pc, #264]	@ (8006678 <TIM_Base_SetConfig+0x134>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d007      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a41      	ldr	r2, [pc, #260]	@ (800667c <TIM_Base_SetConfig+0x138>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a40      	ldr	r2, [pc, #256]	@ (8006680 <TIM_Base_SetConfig+0x13c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d108      	bne.n	8006596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a35      	ldr	r2, [pc, #212]	@ (8006670 <TIM_Base_SetConfig+0x12c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d02b      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a4:	d027      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a32      	ldr	r2, [pc, #200]	@ (8006674 <TIM_Base_SetConfig+0x130>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d023      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a31      	ldr	r2, [pc, #196]	@ (8006678 <TIM_Base_SetConfig+0x134>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01f      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a30      	ldr	r2, [pc, #192]	@ (800667c <TIM_Base_SetConfig+0x138>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01b      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006680 <TIM_Base_SetConfig+0x13c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d017      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006684 <TIM_Base_SetConfig+0x140>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006688 <TIM_Base_SetConfig+0x144>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2c      	ldr	r2, [pc, #176]	@ (800668c <TIM_Base_SetConfig+0x148>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006690 <TIM_Base_SetConfig+0x14c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006694 <TIM_Base_SetConfig+0x150>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a29      	ldr	r2, [pc, #164]	@ (8006698 <TIM_Base_SetConfig+0x154>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a10      	ldr	r2, [pc, #64]	@ (8006670 <TIM_Base_SetConfig+0x12c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_Base_SetConfig+0xf8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a12      	ldr	r2, [pc, #72]	@ (8006680 <TIM_Base_SetConfig+0x13c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d103      	bne.n	8006644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b01      	cmp	r3, #1
 8006654:	d105      	bne.n	8006662 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	611a      	str	r2, [r3, #16]
  }
}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40010000 	.word	0x40010000
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	40010400 	.word	0x40010400
 8006684:	40014000 	.word	0x40014000
 8006688:	40014400 	.word	0x40014400
 800668c:	40014800 	.word	0x40014800
 8006690:	40001800 	.word	0x40001800
 8006694:	40001c00 	.word	0x40001c00
 8006698:	40002000 	.word	0x40002000

0800669c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0201 	bic.w	r2, r3, #1
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f023 030a 	bic.w	r3, r3, #10
 80066d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b087      	sub	sp, #28
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f023 0210 	bic.w	r2, r3, #16
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	031b      	lsls	r3, r3, #12
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006736:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	f043 0307 	orr.w	r3, r3, #7
 800677c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	021a      	lsls	r2, r3, #8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	609a      	str	r2, [r3, #8]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e05a      	b.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a21      	ldr	r2, [pc, #132]	@ (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d022      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006834:	d01d      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a1d      	ldr	r2, [pc, #116]	@ (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d018      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1b      	ldr	r2, [pc, #108]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d013      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1a      	ldr	r2, [pc, #104]	@ (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00e      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a18      	ldr	r2, [pc, #96]	@ (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d009      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a17      	ldr	r2, [pc, #92]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a15      	ldr	r2, [pc, #84]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d10c      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4313      	orrs	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40010400 	.word	0x40010400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40001800 	.word	0x40001800

080068c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e042      	b.n	8006960 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fa f98c 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2224      	movs	r2, #36	@ 0x24
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800690a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f82b 	bl	8006968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800696c:	b0c0      	sub	sp, #256	@ 0x100
 800696e:	af00      	add	r7, sp, #0
 8006970:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	68d9      	ldr	r1, [r3, #12]
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	ea40 0301 	orr.w	r3, r0, r1
 8006990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	431a      	orrs	r2, r3
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069c0:	f021 010c 	bic.w	r1, r1, #12
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069ce:	430b      	orrs	r3, r1
 80069d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e2:	6999      	ldr	r1, [r3, #24]
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	ea40 0301 	orr.w	r3, r0, r1
 80069ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b8f      	ldr	r3, [pc, #572]	@ (8006c34 <UART_SetConfig+0x2cc>)
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d005      	beq.n	8006a08 <UART_SetConfig+0xa0>
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b8d      	ldr	r3, [pc, #564]	@ (8006c38 <UART_SetConfig+0x2d0>)
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d104      	bne.n	8006a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a08:	f7fe ff3a 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 8006a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a10:	e003      	b.n	8006a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a12:	f7fe ff21 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8006a16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a24:	f040 810c 	bne.w	8006c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	1891      	adds	r1, r2, r2
 8006a40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a42:	415b      	adcs	r3, r3
 8006a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	eb12 0801 	adds.w	r8, r2, r1
 8006a50:	4629      	mov	r1, r5
 8006a52:	eb43 0901 	adc.w	r9, r3, r1
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a6a:	4690      	mov	r8, r2
 8006a6c:	4699      	mov	r9, r3
 8006a6e:	4623      	mov	r3, r4
 8006a70:	eb18 0303 	adds.w	r3, r8, r3
 8006a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a78:	462b      	mov	r3, r5
 8006a7a:	eb49 0303 	adc.w	r3, r9, r3
 8006a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a96:	460b      	mov	r3, r1
 8006a98:	18db      	adds	r3, r3, r3
 8006a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	eb42 0303 	adc.w	r3, r2, r3
 8006aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006aac:	f7f9 fbaa 	bl	8000204 <__aeabi_uldivmod>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4b61      	ldr	r3, [pc, #388]	@ (8006c3c <UART_SetConfig+0x2d4>)
 8006ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	011c      	lsls	r4, r3, #4
 8006abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	1891      	adds	r1, r2, r2
 8006ad6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ad8:	415b      	adcs	r3, r3
 8006ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b00:	4692      	mov	sl, r2
 8006b02:	469b      	mov	fp, r3
 8006b04:	4643      	mov	r3, r8
 8006b06:	eb1a 0303 	adds.w	r3, sl, r3
 8006b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	eb4b 0303 	adc.w	r3, fp, r3
 8006b14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	18db      	adds	r3, r3, r3
 8006b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b32:	4613      	mov	r3, r2
 8006b34:	eb42 0303 	adc.w	r3, r2, r3
 8006b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b42:	f7f9 fb5f 	bl	8000204 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c3c <UART_SetConfig+0x2d4>)
 8006b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2264      	movs	r2, #100	@ 0x64
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	1acb      	subs	r3, r1, r3
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b62:	4b36      	ldr	r3, [pc, #216]	@ (8006c3c <UART_SetConfig+0x2d4>)
 8006b64:	fba3 2302 	umull	r2, r3, r3, r2
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b70:	441c      	add	r4, r3
 8006b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	1891      	adds	r1, r2, r2
 8006b8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b8c:	415b      	adcs	r3, r3
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b94:	4641      	mov	r1, r8
 8006b96:	1851      	adds	r1, r2, r1
 8006b98:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	414b      	adcs	r3, r1
 8006b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bac:	4659      	mov	r1, fp
 8006bae:	00cb      	lsls	r3, r1, #3
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb6:	4651      	mov	r1, sl
 8006bb8:	00ca      	lsls	r2, r1, #3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bc8:	464b      	mov	r3, r9
 8006bca:	460a      	mov	r2, r1
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006be0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006be8:	460b      	mov	r3, r1
 8006bea:	18db      	adds	r3, r3, r3
 8006bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bee:	4613      	mov	r3, r2
 8006bf0:	eb42 0303 	adc.w	r3, r2, r3
 8006bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bfe:	f7f9 fb01 	bl	8000204 <__aeabi_uldivmod>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <UART_SetConfig+0x2d4>)
 8006c08:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	2164      	movs	r1, #100	@ 0x64
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	3332      	adds	r3, #50	@ 0x32
 8006c1a:	4a08      	ldr	r2, [pc, #32]	@ (8006c3c <UART_SetConfig+0x2d4>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	f003 0207 	and.w	r2, r3, #7
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4422      	add	r2, r4
 8006c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c30:	e106      	b.n	8006e40 <UART_SetConfig+0x4d8>
 8006c32:	bf00      	nop
 8006c34:	40011000 	.word	0x40011000
 8006c38:	40011400 	.word	0x40011400
 8006c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c52:	4642      	mov	r2, r8
 8006c54:	464b      	mov	r3, r9
 8006c56:	1891      	adds	r1, r2, r2
 8006c58:	6239      	str	r1, [r7, #32]
 8006c5a:	415b      	adcs	r3, r3
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c62:	4641      	mov	r1, r8
 8006c64:	1854      	adds	r4, r2, r1
 8006c66:	4649      	mov	r1, r9
 8006c68:	eb43 0501 	adc.w	r5, r3, r1
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	00eb      	lsls	r3, r5, #3
 8006c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c7a:	00e2      	lsls	r2, r4, #3
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	4643      	mov	r3, r8
 8006c82:	18e3      	adds	r3, r4, r3
 8006c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c88:	464b      	mov	r3, r9
 8006c8a:	eb45 0303 	adc.w	r3, r5, r3
 8006c8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cae:	4629      	mov	r1, r5
 8006cb0:	008b      	lsls	r3, r1, #2
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cb8:	4621      	mov	r1, r4
 8006cba:	008a      	lsls	r2, r1, #2
 8006cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006cc0:	f7f9 faa0 	bl	8000204 <__aeabi_uldivmod>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4b60      	ldr	r3, [pc, #384]	@ (8006e4c <UART_SetConfig+0x4e4>)
 8006cca:	fba3 2302 	umull	r2, r3, r3, r2
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	011c      	lsls	r4, r3, #4
 8006cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	1891      	adds	r1, r2, r2
 8006cea:	61b9      	str	r1, [r7, #24]
 8006cec:	415b      	adcs	r3, r3
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	1851      	adds	r1, r2, r1
 8006cf8:	6139      	str	r1, [r7, #16]
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	414b      	adcs	r3, r1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	00cb      	lsls	r3, r1, #3
 8006d10:	4651      	mov	r1, sl
 8006d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d16:	4651      	mov	r1, sl
 8006d18:	00ca      	lsls	r2, r1, #3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4642      	mov	r2, r8
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d28:	464b      	mov	r3, r9
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	eb42 0303 	adc.w	r3, r2, r3
 8006d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	008b      	lsls	r3, r1, #2
 8006d50:	4641      	mov	r1, r8
 8006d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d56:	4641      	mov	r1, r8
 8006d58:	008a      	lsls	r2, r1, #2
 8006d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d5e:	f7f9 fa51 	bl	8000204 <__aeabi_uldivmod>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	4b38      	ldr	r3, [pc, #224]	@ (8006e4c <UART_SetConfig+0x4e4>)
 8006d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	2264      	movs	r2, #100	@ 0x64
 8006d72:	fb02 f303 	mul.w	r3, r2, r3
 8006d76:	1acb      	subs	r3, r1, r3
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	3332      	adds	r3, #50	@ 0x32
 8006d7c:	4a33      	ldr	r2, [pc, #204]	@ (8006e4c <UART_SetConfig+0x4e4>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d88:	441c      	add	r4, r3
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d92:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d98:	4642      	mov	r2, r8
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	1891      	adds	r1, r2, r2
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	415b      	adcs	r3, r3
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006da8:	4641      	mov	r1, r8
 8006daa:	1851      	adds	r1, r2, r1
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	4649      	mov	r1, r9
 8006db0:	414b      	adcs	r3, r1
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	00cb      	lsls	r3, r1, #3
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dca:	4651      	mov	r1, sl
 8006dcc:	00ca      	lsls	r2, r1, #3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	189b      	adds	r3, r3, r2
 8006dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dda:	464b      	mov	r3, r9
 8006ddc:	460a      	mov	r2, r1
 8006dde:	eb42 0303 	adc.w	r3, r2, r3
 8006de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dee:	667a      	str	r2, [r7, #100]	@ 0x64
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	008b      	lsls	r3, r1, #2
 8006e00:	4641      	mov	r1, r8
 8006e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e06:	4641      	mov	r1, r8
 8006e08:	008a      	lsls	r2, r1, #2
 8006e0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e0e:	f7f9 f9f9 	bl	8000204 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <UART_SetConfig+0x4e4>)
 8006e18:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	2164      	movs	r1, #100	@ 0x64
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	3332      	adds	r3, #50	@ 0x32
 8006e2a:	4a08      	ldr	r2, [pc, #32]	@ (8006e4c <UART_SetConfig+0x4e4>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 020f 	and.w	r2, r3, #15
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4422      	add	r2, r4
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e46:	46bd      	mov	sp, r7
 8006e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4c:	51eb851f 	.word	0x51eb851f

08006e50 <memset>:
 8006e50:	4402      	add	r2, r0
 8006e52:	4603      	mov	r3, r0
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d100      	bne.n	8006e5a <memset+0xa>
 8006e58:	4770      	bx	lr
 8006e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5e:	e7f9      	b.n	8006e54 <memset+0x4>

08006e60 <__libc_init_array>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	4d0d      	ldr	r5, [pc, #52]	@ (8006e98 <__libc_init_array+0x38>)
 8006e64:	4c0d      	ldr	r4, [pc, #52]	@ (8006e9c <__libc_init_array+0x3c>)
 8006e66:	1b64      	subs	r4, r4, r5
 8006e68:	10a4      	asrs	r4, r4, #2
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	42a6      	cmp	r6, r4
 8006e6e:	d109      	bne.n	8006e84 <__libc_init_array+0x24>
 8006e70:	4d0b      	ldr	r5, [pc, #44]	@ (8006ea0 <__libc_init_array+0x40>)
 8006e72:	4c0c      	ldr	r4, [pc, #48]	@ (8006ea4 <__libc_init_array+0x44>)
 8006e74:	f000 f818 	bl	8006ea8 <_init>
 8006e78:	1b64      	subs	r4, r4, r5
 8006e7a:	10a4      	asrs	r4, r4, #2
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	42a6      	cmp	r6, r4
 8006e80:	d105      	bne.n	8006e8e <__libc_init_array+0x2e>
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e88:	4798      	blx	r3
 8006e8a:	3601      	adds	r6, #1
 8006e8c:	e7ee      	b.n	8006e6c <__libc_init_array+0xc>
 8006e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e92:	4798      	blx	r3
 8006e94:	3601      	adds	r6, #1
 8006e96:	e7f2      	b.n	8006e7e <__libc_init_array+0x1e>
 8006e98:	080085dc 	.word	0x080085dc
 8006e9c:	080085dc 	.word	0x080085dc
 8006ea0:	080085dc 	.word	0x080085dc
 8006ea4:	080085e0 	.word	0x080085e0

08006ea8 <_init>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_fini>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr
